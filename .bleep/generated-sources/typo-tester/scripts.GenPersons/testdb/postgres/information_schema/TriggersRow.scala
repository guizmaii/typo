/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package information_schema

import anorm.RowParser
import anorm.Success
import java.time.ZonedDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class TriggersRow(
  triggerCatalog: Option[String],
  triggerSchema: Option[String],
  triggerName: Option[String],
  eventManipulation: Option[String],
  eventObjectCatalog: Option[String],
  eventObjectSchema: Option[String],
  eventObjectTable: Option[String],
  actionOrder: Option[Int],
  actionCondition: Option[String],
  actionStatement: Option[String],
  actionOrientation: Option[String],
  actionTiming: Option[String],
  actionReferenceOldTable: Option[String],
  actionReferenceNewTable: Option[String],
  actionReferenceOldRow: Option[String],
  actionReferenceNewRow: Option[String],
  created: Option[ZonedDateTime]
)

object TriggersRow {
  def rowParser(prefix: String): RowParser[TriggersRow] = { row =>
    Success(
      TriggersRow(
        triggerCatalog = row[Option[String]](prefix + "trigger_catalog"),
        triggerSchema = row[Option[String]](prefix + "trigger_schema"),
        triggerName = row[Option[String]](prefix + "trigger_name"),
        eventManipulation = row[Option[String]](prefix + "event_manipulation"),
        eventObjectCatalog = row[Option[String]](prefix + "event_object_catalog"),
        eventObjectSchema = row[Option[String]](prefix + "event_object_schema"),
        eventObjectTable = row[Option[String]](prefix + "event_object_table"),
        actionOrder = row[Option[Int]](prefix + "action_order"),
        actionCondition = row[Option[String]](prefix + "action_condition"),
        actionStatement = row[Option[String]](prefix + "action_statement"),
        actionOrientation = row[Option[String]](prefix + "action_orientation"),
        actionTiming = row[Option[String]](prefix + "action_timing"),
        actionReferenceOldTable = row[Option[String]](prefix + "action_reference_old_table"),
        actionReferenceNewTable = row[Option[String]](prefix + "action_reference_new_table"),
        actionReferenceOldRow = row[Option[String]](prefix + "action_reference_old_row"),
        actionReferenceNewRow = row[Option[String]](prefix + "action_reference_new_row"),
        created = row[Option[ZonedDateTime]](prefix + "created")
      )
    )
  }

  implicit val oFormat: OFormat[TriggersRow] = new OFormat[TriggersRow]{
    override def writes(o: TriggersRow): JsObject =
      Json.obj(
        "trigger_catalog" -> o.triggerCatalog,
      "trigger_schema" -> o.triggerSchema,
      "trigger_name" -> o.triggerName,
      "event_manipulation" -> o.eventManipulation,
      "event_object_catalog" -> o.eventObjectCatalog,
      "event_object_schema" -> o.eventObjectSchema,
      "event_object_table" -> o.eventObjectTable,
      "action_order" -> o.actionOrder,
      "action_condition" -> o.actionCondition,
      "action_statement" -> o.actionStatement,
      "action_orientation" -> o.actionOrientation,
      "action_timing" -> o.actionTiming,
      "action_reference_old_table" -> o.actionReferenceOldTable,
      "action_reference_new_table" -> o.actionReferenceNewTable,
      "action_reference_old_row" -> o.actionReferenceOldRow,
      "action_reference_new_row" -> o.actionReferenceNewRow,
      "created" -> o.created
      )

    override def reads(json: JsValue): JsResult[TriggersRow] = {
      JsResult.fromTry(
        Try(
          TriggersRow(
            triggerCatalog = json.\("trigger_catalog").toOption.map(_.as[String]),
            triggerSchema = json.\("trigger_schema").toOption.map(_.as[String]),
            triggerName = json.\("trigger_name").toOption.map(_.as[String]),
            eventManipulation = json.\("event_manipulation").toOption.map(_.as[String]),
            eventObjectCatalog = json.\("event_object_catalog").toOption.map(_.as[String]),
            eventObjectSchema = json.\("event_object_schema").toOption.map(_.as[String]),
            eventObjectTable = json.\("event_object_table").toOption.map(_.as[String]),
            actionOrder = json.\("action_order").toOption.map(_.as[Int]),
            actionCondition = json.\("action_condition").toOption.map(_.as[String]),
            actionStatement = json.\("action_statement").toOption.map(_.as[String]),
            actionOrientation = json.\("action_orientation").toOption.map(_.as[String]),
            actionTiming = json.\("action_timing").toOption.map(_.as[String]),
            actionReferenceOldTable = json.\("action_reference_old_table").toOption.map(_.as[String]),
            actionReferenceNewTable = json.\("action_reference_new_table").toOption.map(_.as[String]),
            actionReferenceOldRow = json.\("action_reference_old_row").toOption.map(_.as[String]),
            actionReferenceNewRow = json.\("action_reference_new_row").toOption.map(_.as[String]),
            created = json.\("created").toOption.map(_.as[ZonedDateTime])
          )
        )
      )
    }
  }
}
