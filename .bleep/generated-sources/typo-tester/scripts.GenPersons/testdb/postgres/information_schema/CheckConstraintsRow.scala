/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package information_schema

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class CheckConstraintsRow(
  constraintCatalog: Option[String],
  constraintSchema: Option[String],
  constraintName: Option[String],
  checkClause: Option[String]
)

object CheckConstraintsRow {
  def rowParser(prefix: String): RowParser[CheckConstraintsRow] = { row =>
    Success(
      CheckConstraintsRow(
        constraintCatalog = row[Option[String]](prefix + "constraint_catalog"),
        constraintSchema = row[Option[String]](prefix + "constraint_schema"),
        constraintName = row[Option[String]](prefix + "constraint_name"),
        checkClause = row[Option[String]](prefix + "check_clause")
      )
    )
  }

  implicit val oFormat: OFormat[CheckConstraintsRow] = new OFormat[CheckConstraintsRow]{
    override def writes(o: CheckConstraintsRow): JsObject =
      Json.obj(
        "constraint_catalog" -> o.constraintCatalog,
      "constraint_schema" -> o.constraintSchema,
      "constraint_name" -> o.constraintName,
      "check_clause" -> o.checkClause
      )

    override def reads(json: JsValue): JsResult[CheckConstraintsRow] = {
      JsResult.fromTry(
        Try(
          CheckConstraintsRow(
            constraintCatalog = json.\("constraint_catalog").toOption.map(_.as[String]),
            constraintSchema = json.\("constraint_schema").toOption.map(_.as[String]),
            constraintName = json.\("constraint_name").toOption.map(_.as[String]),
            checkClause = json.\("check_clause").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
