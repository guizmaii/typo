/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package information_schema

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SchemataRow(
  catalogName: Option[String],
  schemaName: Option[String],
  schemaOwner: Option[String],
  defaultCharacterSetCatalog: Option[String],
  defaultCharacterSetSchema: Option[String],
  defaultCharacterSetName: Option[String],
  sqlPath: Option[String]
)

object SchemataRow {
  def rowParser(prefix: String): RowParser[SchemataRow] = { row =>
    Success(
      SchemataRow(
        catalogName = row[Option[String]](prefix + "catalog_name"),
        schemaName = row[Option[String]](prefix + "schema_name"),
        schemaOwner = row[Option[String]](prefix + "schema_owner"),
        defaultCharacterSetCatalog = row[Option[String]](prefix + "default_character_set_catalog"),
        defaultCharacterSetSchema = row[Option[String]](prefix + "default_character_set_schema"),
        defaultCharacterSetName = row[Option[String]](prefix + "default_character_set_name"),
        sqlPath = row[Option[String]](prefix + "sql_path")
      )
    )
  }

  implicit val oFormat: OFormat[SchemataRow] = new OFormat[SchemataRow]{
    override def writes(o: SchemataRow): JsObject =
      Json.obj(
        "catalog_name" -> o.catalogName,
      "schema_name" -> o.schemaName,
      "schema_owner" -> o.schemaOwner,
      "default_character_set_catalog" -> o.defaultCharacterSetCatalog,
      "default_character_set_schema" -> o.defaultCharacterSetSchema,
      "default_character_set_name" -> o.defaultCharacterSetName,
      "sql_path" -> o.sqlPath
      )

    override def reads(json: JsValue): JsResult[SchemataRow] = {
      JsResult.fromTry(
        Try(
          SchemataRow(
            catalogName = json.\("catalog_name").toOption.map(_.as[String]),
            schemaName = json.\("schema_name").toOption.map(_.as[String]),
            schemaOwner = json.\("schema_owner").toOption.map(_.as[String]),
            defaultCharacterSetCatalog = json.\("default_character_set_catalog").toOption.map(_.as[String]),
            defaultCharacterSetSchema = json.\("default_character_set_schema").toOption.map(_.as[String]),
            defaultCharacterSetName = json.\("default_character_set_name").toOption.map(_.as[String]),
            sqlPath = json.\("sql_path").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
