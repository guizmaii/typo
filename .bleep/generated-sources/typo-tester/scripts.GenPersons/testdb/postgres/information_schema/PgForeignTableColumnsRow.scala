/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package information_schema

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgForeignTableColumnsRow(
  nspname: Option[String],
  relname: Option[String],
  attname: Option[String],
  attfdwoptions: Option[Array[String]]
)

object PgForeignTableColumnsRow {
  implicit val rowParser: RowParser[PgForeignTableColumnsRow] = { row =>
    Success(
      PgForeignTableColumnsRow(
        nspname = row[Option[String]]("nspname"),
        relname = row[Option[String]]("relname"),
        attname = row[Option[String]]("attname"),
        attfdwoptions = row[Option[Array[String]]]("attfdwoptions")
      )
    )
  }

  implicit val oFormat: OFormat[PgForeignTableColumnsRow] = new OFormat[PgForeignTableColumnsRow]{
    override def writes(o: PgForeignTableColumnsRow): JsObject =
      Json.obj(
        "nspname" -> o.nspname,
      "relname" -> o.relname,
      "attname" -> o.attname,
      "attfdwoptions" -> o.attfdwoptions
      )

    override def reads(json: JsValue): JsResult[PgForeignTableColumnsRow] = {
      JsResult.fromTry(
        Try(
          PgForeignTableColumnsRow(
            nspname = json.\("nspname").toOption.map(_.as[String]),
            relname = json.\("relname").toOption.map(_.as[String]),
            attname = json.\("attname").toOption.map(_.as[String]),
            attfdwoptions = json.\("attfdwoptions").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
