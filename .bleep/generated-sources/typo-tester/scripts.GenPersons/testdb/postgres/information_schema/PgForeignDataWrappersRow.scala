/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package information_schema

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgForeignDataWrappersRow(
  oid: Option[/* oid */ Long],
  fdwowner: Option[/* oid */ Long],
  fdwoptions: Option[Array[String]],
  foreignDataWrapperCatalog: Option[String],
  foreignDataWrapperName: Option[String],
  authorizationIdentifier: Option[String],
  foreignDataWrapperLanguage: Option[String]
)

object PgForeignDataWrappersRow {
  def rowParser(prefix: String): RowParser[PgForeignDataWrappersRow] = { row =>
    Success(
      PgForeignDataWrappersRow(
        oid = row[Option[/* oid */ Long]](prefix + "oid"),
        fdwowner = row[Option[/* oid */ Long]](prefix + "fdwowner"),
        fdwoptions = row[Option[Array[String]]](prefix + "fdwoptions"),
        foreignDataWrapperCatalog = row[Option[String]](prefix + "foreign_data_wrapper_catalog"),
        foreignDataWrapperName = row[Option[String]](prefix + "foreign_data_wrapper_name"),
        authorizationIdentifier = row[Option[String]](prefix + "authorization_identifier"),
        foreignDataWrapperLanguage = row[Option[String]](prefix + "foreign_data_wrapper_language")
      )
    )
  }

  implicit val oFormat: OFormat[PgForeignDataWrappersRow] = new OFormat[PgForeignDataWrappersRow]{
    override def writes(o: PgForeignDataWrappersRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "fdwowner" -> o.fdwowner,
      "fdwoptions" -> o.fdwoptions,
      "foreign_data_wrapper_catalog" -> o.foreignDataWrapperCatalog,
      "foreign_data_wrapper_name" -> o.foreignDataWrapperName,
      "authorization_identifier" -> o.authorizationIdentifier,
      "foreign_data_wrapper_language" -> o.foreignDataWrapperLanguage
      )

    override def reads(json: JsValue): JsResult[PgForeignDataWrappersRow] = {
      JsResult.fromTry(
        Try(
          PgForeignDataWrappersRow(
            oid = json.\("oid").toOption.map(_.as[/* oid */ Long]),
            fdwowner = json.\("fdwowner").toOption.map(_.as[/* oid */ Long]),
            fdwoptions = json.\("fdwoptions").toOption.map(_.as[Array[String]]),
            foreignDataWrapperCatalog = json.\("foreign_data_wrapper_catalog").toOption.map(_.as[String]),
            foreignDataWrapperName = json.\("foreign_data_wrapper_name").toOption.map(_.as[String]),
            authorizationIdentifier = json.\("authorization_identifier").toOption.map(_.as[String]),
            foreignDataWrapperLanguage = json.\("foreign_data_wrapper_language").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
