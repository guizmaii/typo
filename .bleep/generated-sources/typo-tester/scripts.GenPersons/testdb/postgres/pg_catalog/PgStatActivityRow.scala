/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import java.time.ZonedDateTime
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatActivityRow(
  datid: Option[Long],
  datname: Option[String],
  pid: Option[Int],
  leaderPid: Option[Int],
  usesysid: Option[Long],
  usename: Option[String],
  applicationName: Option[String],
  clientAddr: Option[PGobject],
  clientHostname: Option[String],
  clientPort: Option[Int],
  backendStart: Option[ZonedDateTime],
  xactStart: Option[ZonedDateTime],
  queryStart: Option[ZonedDateTime],
  stateChange: Option[ZonedDateTime],
  waitEventType: Option[String],
  waitEvent: Option[String],
  state: Option[String],
  backendXid: Option[PGobject],
  backendXmin: Option[PGobject],
  queryId: Option[Long],
  query: Option[String],
  backendType: Option[String]
)

object PgStatActivityRow {
  def rowParser(prefix: String): RowParser[PgStatActivityRow] = { row =>
    Success(
      PgStatActivityRow(
        datid = row[Option[Long]](prefix + "datid"),
        datname = row[Option[String]](prefix + "datname"),
        pid = row[Option[Int]](prefix + "pid"),
        leaderPid = row[Option[Int]](prefix + "leader_pid"),
        usesysid = row[Option[Long]](prefix + "usesysid"),
        usename = row[Option[String]](prefix + "usename"),
        applicationName = row[Option[String]](prefix + "application_name"),
        clientAddr = row[Option[PGobject]](prefix + "client_addr"),
        clientHostname = row[Option[String]](prefix + "client_hostname"),
        clientPort = row[Option[Int]](prefix + "client_port"),
        backendStart = row[Option[ZonedDateTime]](prefix + "backend_start"),
        xactStart = row[Option[ZonedDateTime]](prefix + "xact_start"),
        queryStart = row[Option[ZonedDateTime]](prefix + "query_start"),
        stateChange = row[Option[ZonedDateTime]](prefix + "state_change"),
        waitEventType = row[Option[String]](prefix + "wait_event_type"),
        waitEvent = row[Option[String]](prefix + "wait_event"),
        state = row[Option[String]](prefix + "state"),
        backendXid = row[Option[PGobject]](prefix + "backend_xid"),
        backendXmin = row[Option[PGobject]](prefix + "backend_xmin"),
        queryId = row[Option[Long]](prefix + "query_id"),
        query = row[Option[String]](prefix + "query"),
        backendType = row[Option[String]](prefix + "backend_type")
      )
    )
  }

  implicit val oFormat: OFormat[PgStatActivityRow] = new OFormat[PgStatActivityRow]{
    override def writes(o: PgStatActivityRow): JsObject =
      Json.obj(
        "datid" -> o.datid,
      "datname" -> o.datname,
      "pid" -> o.pid,
      "leader_pid" -> o.leaderPid,
      "usesysid" -> o.usesysid,
      "usename" -> o.usename,
      "application_name" -> o.applicationName,
      "client_addr" -> o.clientAddr,
      "client_hostname" -> o.clientHostname,
      "client_port" -> o.clientPort,
      "backend_start" -> o.backendStart,
      "xact_start" -> o.xactStart,
      "query_start" -> o.queryStart,
      "state_change" -> o.stateChange,
      "wait_event_type" -> o.waitEventType,
      "wait_event" -> o.waitEvent,
      "state" -> o.state,
      "backend_xid" -> o.backendXid,
      "backend_xmin" -> o.backendXmin,
      "query_id" -> o.queryId,
      "query" -> o.query,
      "backend_type" -> o.backendType
      )

    override def reads(json: JsValue): JsResult[PgStatActivityRow] = {
      JsResult.fromTry(
        Try(
          PgStatActivityRow(
            datid = json.\("datid").toOption.map(_.as[Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            pid = json.\("pid").toOption.map(_.as[Int]),
            leaderPid = json.\("leader_pid").toOption.map(_.as[Int]),
            usesysid = json.\("usesysid").toOption.map(_.as[Long]),
            usename = json.\("usename").toOption.map(_.as[String]),
            applicationName = json.\("application_name").toOption.map(_.as[String]),
            clientAddr = json.\("client_addr").toOption.map(_.as[PGobject]),
            clientHostname = json.\("client_hostname").toOption.map(_.as[String]),
            clientPort = json.\("client_port").toOption.map(_.as[Int]),
            backendStart = json.\("backend_start").toOption.map(_.as[ZonedDateTime]),
            xactStart = json.\("xact_start").toOption.map(_.as[ZonedDateTime]),
            queryStart = json.\("query_start").toOption.map(_.as[ZonedDateTime]),
            stateChange = json.\("state_change").toOption.map(_.as[ZonedDateTime]),
            waitEventType = json.\("wait_event_type").toOption.map(_.as[String]),
            waitEvent = json.\("wait_event").toOption.map(_.as[String]),
            state = json.\("state").toOption.map(_.as[String]),
            backendXid = json.\("backend_xid").toOption.map(_.as[PGobject]),
            backendXmin = json.\("backend_xmin").toOption.map(_.as[PGobject]),
            queryId = json.\("query_id").toOption.map(_.as[Long]),
            query = json.\("query").toOption.map(_.as[String]),
            backendType = json.\("backend_type").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
