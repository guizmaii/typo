/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatSslRow(
  pid: Option[Int],
  ssl: Option[Boolean],
  version: Option[String],
  cipher: Option[String],
  bits: Option[Int],
  clientDn: Option[String],
  clientSerial: Option[BigDecimal],
  issuerDn: Option[String]
)

object PgStatSslRow {
  def rowParser(prefix: String): RowParser[PgStatSslRow] = { row =>
    Success(
      PgStatSslRow(
        pid = row[Option[Int]](prefix + "pid"),
        ssl = row[Option[Boolean]](prefix + "ssl"),
        version = row[Option[String]](prefix + "version"),
        cipher = row[Option[String]](prefix + "cipher"),
        bits = row[Option[Int]](prefix + "bits"),
        clientDn = row[Option[String]](prefix + "client_dn"),
        clientSerial = row[Option[BigDecimal]](prefix + "client_serial"),
        issuerDn = row[Option[String]](prefix + "issuer_dn")
      )
    )
  }

  implicit val oFormat: OFormat[PgStatSslRow] = new OFormat[PgStatSslRow]{
    override def writes(o: PgStatSslRow): JsObject =
      Json.obj(
        "pid" -> o.pid,
      "ssl" -> o.ssl,
      "version" -> o.version,
      "cipher" -> o.cipher,
      "bits" -> o.bits,
      "client_dn" -> o.clientDn,
      "client_serial" -> o.clientSerial,
      "issuer_dn" -> o.issuerDn
      )

    override def reads(json: JsValue): JsResult[PgStatSslRow] = {
      JsResult.fromTry(
        Try(
          PgStatSslRow(
            pid = json.\("pid").toOption.map(_.as[Int]),
            ssl = json.\("ssl").toOption.map(_.as[Boolean]),
            version = json.\("version").toOption.map(_.as[String]),
            cipher = json.\("cipher").toOption.map(_.as[String]),
            bits = json.\("bits").toOption.map(_.as[Int]),
            clientDn = json.\("client_dn").toOption.map(_.as[String]),
            clientSerial = json.\("client_serial").toOption.map(_.as[BigDecimal]),
            issuerDn = json.\("issuer_dn").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
