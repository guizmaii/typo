/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatsExtExprsRow(
  schemaname: Option[String],
  tablename: Option[String],
  statisticsSchemaname: Option[String],
  statisticsName: Option[String],
  statisticsOwner: Option[String],
  expr: Option[String],
  nullFrac: Option[Float],
  avgWidth: Option[Int],
  nDistinct: Option[Float],
  mostCommonVals: Option[/* anyarray */ PGobject],
  mostCommonFreqs: Option[Array[Float]],
  histogramBounds: Option[/* anyarray */ PGobject],
  correlation: Option[Float],
  mostCommonElems: Option[/* anyarray */ PGobject],
  mostCommonElemFreqs: Option[Array[Float]],
  elemCountHistogram: Option[Array[Float]]
)

object PgStatsExtExprsRow {
  def rowParser(prefix: String): RowParser[PgStatsExtExprsRow] = { row =>
    Success(
      PgStatsExtExprsRow(
        schemaname = row[Option[String]](prefix + "schemaname"),
        tablename = row[Option[String]](prefix + "tablename"),
        statisticsSchemaname = row[Option[String]](prefix + "statistics_schemaname"),
        statisticsName = row[Option[String]](prefix + "statistics_name"),
        statisticsOwner = row[Option[String]](prefix + "statistics_owner"),
        expr = row[Option[String]](prefix + "expr"),
        nullFrac = row[Option[Float]](prefix + "null_frac"),
        avgWidth = row[Option[Int]](prefix + "avg_width"),
        nDistinct = row[Option[Float]](prefix + "n_distinct"),
        mostCommonVals = row[Option[/* anyarray */ PGobject]](prefix + "most_common_vals"),
        mostCommonFreqs = row[Option[Array[Float]]](prefix + "most_common_freqs"),
        histogramBounds = row[Option[/* anyarray */ PGobject]](prefix + "histogram_bounds"),
        correlation = row[Option[Float]](prefix + "correlation"),
        mostCommonElems = row[Option[/* anyarray */ PGobject]](prefix + "most_common_elems"),
        mostCommonElemFreqs = row[Option[Array[Float]]](prefix + "most_common_elem_freqs"),
        elemCountHistogram = row[Option[Array[Float]]](prefix + "elem_count_histogram")
      )
    )
  }

  implicit val oFormat: OFormat[PgStatsExtExprsRow] = new OFormat[PgStatsExtExprsRow]{
    override def writes(o: PgStatsExtExprsRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
      "tablename" -> o.tablename,
      "statistics_schemaname" -> o.statisticsSchemaname,
      "statistics_name" -> o.statisticsName,
      "statistics_owner" -> o.statisticsOwner,
      "expr" -> o.expr,
      "null_frac" -> o.nullFrac,
      "avg_width" -> o.avgWidth,
      "n_distinct" -> o.nDistinct,
      "most_common_vals" -> o.mostCommonVals,
      "most_common_freqs" -> o.mostCommonFreqs,
      "histogram_bounds" -> o.histogramBounds,
      "correlation" -> o.correlation,
      "most_common_elems" -> o.mostCommonElems,
      "most_common_elem_freqs" -> o.mostCommonElemFreqs,
      "elem_count_histogram" -> o.elemCountHistogram
      )

    override def reads(json: JsValue): JsResult[PgStatsExtExprsRow] = {
      JsResult.fromTry(
        Try(
          PgStatsExtExprsRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            tablename = json.\("tablename").toOption.map(_.as[String]),
            statisticsSchemaname = json.\("statistics_schemaname").toOption.map(_.as[String]),
            statisticsName = json.\("statistics_name").toOption.map(_.as[String]),
            statisticsOwner = json.\("statistics_owner").toOption.map(_.as[String]),
            expr = json.\("expr").toOption.map(_.as[String]),
            nullFrac = json.\("null_frac").toOption.map(_.as[Float]),
            avgWidth = json.\("avg_width").toOption.map(_.as[Int]),
            nDistinct = json.\("n_distinct").toOption.map(_.as[Float]),
            mostCommonVals = json.\("most_common_vals").toOption.map(_.as[/* anyarray */ PGobject]),
            mostCommonFreqs = json.\("most_common_freqs").toOption.map(_.as[Array[Float]]),
            histogramBounds = json.\("histogram_bounds").toOption.map(_.as[/* anyarray */ PGobject]),
            correlation = json.\("correlation").toOption.map(_.as[Float]),
            mostCommonElems = json.\("most_common_elems").toOption.map(_.as[/* anyarray */ PGobject]),
            mostCommonElemFreqs = json.\("most_common_elem_freqs").toOption.map(_.as[Array[Float]]),
            elemCountHistogram = json.\("elem_count_histogram").toOption.map(_.as[Array[Float]])
          )
        )
      )
    }
  }
}
