/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTsParserRow(
  oid: PgTsParserId,
  prsname: String,
  prsnamespace: /* oid */ Long,
  prsstart: /* regproc */ PGobject,
  prstoken: /* regproc */ PGobject,
  prsend: /* regproc */ PGobject,
  prsheadline: /* regproc */ PGobject,
  prslextype: /* regproc */ PGobject
)

object PgTsParserRow {
  def rowParser(prefix: String): RowParser[PgTsParserRow] = { row =>
    Success(
      PgTsParserRow(
        oid = row[PgTsParserId](prefix + "oid"),
        prsname = row[String](prefix + "prsname"),
        prsnamespace = row[/* oid */ Long](prefix + "prsnamespace"),
        prsstart = row[/* regproc */ PGobject](prefix + "prsstart"),
        prstoken = row[/* regproc */ PGobject](prefix + "prstoken"),
        prsend = row[/* regproc */ PGobject](prefix + "prsend"),
        prsheadline = row[/* regproc */ PGobject](prefix + "prsheadline"),
        prslextype = row[/* regproc */ PGobject](prefix + "prslextype")
      )
    )
  }

  implicit val oFormat: OFormat[PgTsParserRow] = new OFormat[PgTsParserRow]{
    override def writes(o: PgTsParserRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "prsname" -> o.prsname,
      "prsnamespace" -> o.prsnamespace,
      "prsstart" -> o.prsstart,
      "prstoken" -> o.prstoken,
      "prsend" -> o.prsend,
      "prsheadline" -> o.prsheadline,
      "prslextype" -> o.prslextype
      )

    override def reads(json: JsValue): JsResult[PgTsParserRow] = {
      JsResult.fromTry(
        Try(
          PgTsParserRow(
            oid = json.\("oid").as[PgTsParserId],
            prsname = json.\("prsname").as[String],
            prsnamespace = json.\("prsnamespace").as[/* oid */ Long],
            prsstart = json.\("prsstart").as[/* regproc */ PGobject],
            prstoken = json.\("prstoken").as[/* regproc */ PGobject],
            prsend = json.\("prsend").as[/* regproc */ PGobject],
            prsheadline = json.\("prsheadline").as[/* regproc */ PGobject],
            prslextype = json.\("prslextype").as[/* regproc */ PGobject]
          )
        )
      )
    }
  }
}
