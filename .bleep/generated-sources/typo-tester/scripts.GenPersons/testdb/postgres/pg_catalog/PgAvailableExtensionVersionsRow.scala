/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAvailableExtensionVersionsRow(
  name: Option[String],
  version: Option[String],
  installed: Option[Boolean],
  superuser: Option[Boolean],
  trusted: Option[Boolean],
  relocatable: Option[Boolean],
  schema: Option[String],
  requires: Option[Array[String]],
  comment: Option[String]
)

object PgAvailableExtensionVersionsRow {
  def rowParser(prefix: String): RowParser[PgAvailableExtensionVersionsRow] = { row =>
    Success(
      PgAvailableExtensionVersionsRow(
        name = row[Option[String]](prefix + "name"),
        version = row[Option[String]](prefix + "version"),
        installed = row[Option[Boolean]](prefix + "installed"),
        superuser = row[Option[Boolean]](prefix + "superuser"),
        trusted = row[Option[Boolean]](prefix + "trusted"),
        relocatable = row[Option[Boolean]](prefix + "relocatable"),
        schema = row[Option[String]](prefix + "schema"),
        requires = row[Option[Array[String]]](prefix + "requires"),
        comment = row[Option[String]](prefix + "comment")
      )
    )
  }

  implicit val oFormat: OFormat[PgAvailableExtensionVersionsRow] = new OFormat[PgAvailableExtensionVersionsRow]{
    override def writes(o: PgAvailableExtensionVersionsRow): JsObject =
      Json.obj(
        "name" -> o.name,
      "version" -> o.version,
      "installed" -> o.installed,
      "superuser" -> o.superuser,
      "trusted" -> o.trusted,
      "relocatable" -> o.relocatable,
      "schema" -> o.schema,
      "requires" -> o.requires,
      "comment" -> o.comment
      )

    override def reads(json: JsValue): JsResult[PgAvailableExtensionVersionsRow] = {
      JsResult.fromTry(
        Try(
          PgAvailableExtensionVersionsRow(
            name = json.\("name").toOption.map(_.as[String]),
            version = json.\("version").toOption.map(_.as[String]),
            installed = json.\("installed").toOption.map(_.as[Boolean]),
            superuser = json.\("superuser").toOption.map(_.as[Boolean]),
            trusted = json.\("trusted").toOption.map(_.as[Boolean]),
            relocatable = json.\("relocatable").toOption.map(_.as[Boolean]),
            schema = json.\("schema").toOption.map(_.as[String]),
            requires = json.\("requires").toOption.map(_.as[Array[String]]),
            comment = json.\("comment").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
