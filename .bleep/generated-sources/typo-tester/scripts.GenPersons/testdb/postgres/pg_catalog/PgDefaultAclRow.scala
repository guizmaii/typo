/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgDefaultAclRow(
  oid: PgDefaultAclId,
  defaclrole: Long,
  defaclnamespace: Long,
  defaclobjtype: String,
  defaclacl: Array[PGobject]
)

object PgDefaultAclRow {
  implicit val rowParser: RowParser[PgDefaultAclRow] = { row =>
    Success(
      PgDefaultAclRow(
        oid = row[PgDefaultAclId]("oid"),
        defaclrole = row[Long]("defaclrole"),
        defaclnamespace = row[Long]("defaclnamespace"),
        defaclobjtype = row[String]("defaclobjtype"),
        defaclacl = row[Array[PGobject]]("defaclacl")
      )
    )
  }

  implicit val oFormat: OFormat[PgDefaultAclRow] = new OFormat[PgDefaultAclRow]{
    override def writes(o: PgDefaultAclRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "defaclrole" -> o.defaclrole,
      "defaclnamespace" -> o.defaclnamespace,
      "defaclobjtype" -> o.defaclobjtype,
      "defaclacl" -> o.defaclacl
      )

    override def reads(json: JsValue): JsResult[PgDefaultAclRow] = {
      JsResult.fromTry(
        Try(
          PgDefaultAclRow(
            oid = json.\("oid").as[PgDefaultAclId],
            defaclrole = json.\("defaclrole").as[Long],
            defaclnamespace = json.\("defaclnamespace").as[Long],
            defaclobjtype = json.\("defaclobjtype").as[String],
            defaclacl = json.\("defaclacl").as[Array[PGobject]]
          )
        )
      )
    }
  }
}
