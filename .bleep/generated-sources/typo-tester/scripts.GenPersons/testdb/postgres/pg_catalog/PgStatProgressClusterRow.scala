/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatProgressClusterRow(
  pid: Option[Int],
  datid: Option[Long],
  datname: Option[String],
  relid: Option[Long],
  command: Option[String],
  phase: Option[String],
  clusterIndexRelid: Option[Long],
  heapTuplesScanned: Option[Long],
  heapTuplesWritten: Option[Long],
  heapBlksTotal: Option[Long],
  heapBlksScanned: Option[Long],
  indexRebuildCount: Option[Long]
)

object PgStatProgressClusterRow {
  def rowParser(prefix: String): RowParser[PgStatProgressClusterRow] = { row =>
    Success(
      PgStatProgressClusterRow(
        pid = row[Option[Int]](prefix + "pid"),
        datid = row[Option[Long]](prefix + "datid"),
        datname = row[Option[String]](prefix + "datname"),
        relid = row[Option[Long]](prefix + "relid"),
        command = row[Option[String]](prefix + "command"),
        phase = row[Option[String]](prefix + "phase"),
        clusterIndexRelid = row[Option[Long]](prefix + "cluster_index_relid"),
        heapTuplesScanned = row[Option[Long]](prefix + "heap_tuples_scanned"),
        heapTuplesWritten = row[Option[Long]](prefix + "heap_tuples_written"),
        heapBlksTotal = row[Option[Long]](prefix + "heap_blks_total"),
        heapBlksScanned = row[Option[Long]](prefix + "heap_blks_scanned"),
        indexRebuildCount = row[Option[Long]](prefix + "index_rebuild_count")
      )
    )
  }

  implicit val oFormat: OFormat[PgStatProgressClusterRow] = new OFormat[PgStatProgressClusterRow]{
    override def writes(o: PgStatProgressClusterRow): JsObject =
      Json.obj(
        "pid" -> o.pid,
      "datid" -> o.datid,
      "datname" -> o.datname,
      "relid" -> o.relid,
      "command" -> o.command,
      "phase" -> o.phase,
      "cluster_index_relid" -> o.clusterIndexRelid,
      "heap_tuples_scanned" -> o.heapTuplesScanned,
      "heap_tuples_written" -> o.heapTuplesWritten,
      "heap_blks_total" -> o.heapBlksTotal,
      "heap_blks_scanned" -> o.heapBlksScanned,
      "index_rebuild_count" -> o.indexRebuildCount
      )

    override def reads(json: JsValue): JsResult[PgStatProgressClusterRow] = {
      JsResult.fromTry(
        Try(
          PgStatProgressClusterRow(
            pid = json.\("pid").toOption.map(_.as[Int]),
            datid = json.\("datid").toOption.map(_.as[Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            relid = json.\("relid").toOption.map(_.as[Long]),
            command = json.\("command").toOption.map(_.as[String]),
            phase = json.\("phase").toOption.map(_.as[String]),
            clusterIndexRelid = json.\("cluster_index_relid").toOption.map(_.as[Long]),
            heapTuplesScanned = json.\("heap_tuples_scanned").toOption.map(_.as[Long]),
            heapTuplesWritten = json.\("heap_tuples_written").toOption.map(_.as[Long]),
            heapBlksTotal = json.\("heap_blks_total").toOption.map(_.as[Long]),
            heapBlksScanned = json.\("heap_blks_scanned").toOption.map(_.as[Long]),
            indexRebuildCount = json.\("index_rebuild_count").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
