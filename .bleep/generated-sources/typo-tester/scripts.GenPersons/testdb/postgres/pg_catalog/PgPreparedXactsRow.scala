/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import java.time.ZonedDateTime
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgPreparedXactsRow(
  transaction: Option[PGobject],
  gid: Option[String],
  prepared: Option[ZonedDateTime],
  owner: Option[String],
  database: Option[String]
)

object PgPreparedXactsRow {
  implicit val rowParser: RowParser[PgPreparedXactsRow] = { row =>
    Success(
      PgPreparedXactsRow(
        transaction = row[Option[PGobject]]("transaction"),
        gid = row[Option[String]]("gid"),
        prepared = row[Option[ZonedDateTime]]("prepared"),
        owner = row[Option[String]]("owner"),
        database = row[Option[String]]("database")
      )
    )
  }

  implicit val oFormat: OFormat[PgPreparedXactsRow] = new OFormat[PgPreparedXactsRow]{
    override def writes(o: PgPreparedXactsRow): JsObject =
      Json.obj(
        "transaction" -> o.transaction,
      "gid" -> o.gid,
      "prepared" -> o.prepared,
      "owner" -> o.owner,
      "database" -> o.database
      )

    override def reads(json: JsValue): JsResult[PgPreparedXactsRow] = {
      JsResult.fromTry(
        Try(
          PgPreparedXactsRow(
            transaction = json.\("transaction").toOption.map(_.as[PGobject]),
            gid = json.\("gid").toOption.map(_.as[String]),
            prepared = json.\("prepared").toOption.map(_.as[ZonedDateTime]),
            owner = json.\("owner").toOption.map(_.as[String]),
            database = json.\("database").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
