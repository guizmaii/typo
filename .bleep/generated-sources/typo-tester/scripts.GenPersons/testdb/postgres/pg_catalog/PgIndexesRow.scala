/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgIndexesRow(
  schemaname: Option[String],
  tablename: Option[String],
  indexname: Option[String],
  tablespace: Option[String],
  indexdef: Option[String]
)

object PgIndexesRow {
  implicit val rowParser: RowParser[PgIndexesRow] = { row =>
    Success(
      PgIndexesRow(
        schemaname = row[Option[String]]("schemaname"),
        tablename = row[Option[String]]("tablename"),
        indexname = row[Option[String]]("indexname"),
        tablespace = row[Option[String]]("tablespace"),
        indexdef = row[Option[String]]("indexdef")
      )
    )
  }

  implicit val oFormat: OFormat[PgIndexesRow] = new OFormat[PgIndexesRow]{
    override def writes(o: PgIndexesRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
      "tablename" -> o.tablename,
      "indexname" -> o.indexname,
      "tablespace" -> o.tablespace,
      "indexdef" -> o.indexdef
      )

    override def reads(json: JsValue): JsResult[PgIndexesRow] = {
      JsResult.fromTry(
        Try(
          PgIndexesRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            tablename = json.\("tablename").toOption.map(_.as[String]),
            indexname = json.\("indexname").toOption.map(_.as[String]),
            tablespace = json.\("tablespace").toOption.map(_.as[String]),
            indexdef = json.\("indexdef").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
