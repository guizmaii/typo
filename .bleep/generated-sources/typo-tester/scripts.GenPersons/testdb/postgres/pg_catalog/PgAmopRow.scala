/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAmopRow(
  oid: PgAmopId,
  amopfamily: /* oid */ Long,
  amoplefttype: /* oid */ Long,
  amoprighttype: /* oid */ Long,
  amopstrategy: Int,
  amoppurpose: String,
  amopopr: /* oid */ Long,
  amopmethod: /* oid */ Long,
  amopsortfamily: /* oid */ Long
)

object PgAmopRow {
  def rowParser(prefix: String): RowParser[PgAmopRow] = { row =>
    Success(
      PgAmopRow(
        oid = row[PgAmopId](prefix + "oid"),
        amopfamily = row[/* oid */ Long](prefix + "amopfamily"),
        amoplefttype = row[/* oid */ Long](prefix + "amoplefttype"),
        amoprighttype = row[/* oid */ Long](prefix + "amoprighttype"),
        amopstrategy = row[Int](prefix + "amopstrategy"),
        amoppurpose = row[String](prefix + "amoppurpose"),
        amopopr = row[/* oid */ Long](prefix + "amopopr"),
        amopmethod = row[/* oid */ Long](prefix + "amopmethod"),
        amopsortfamily = row[/* oid */ Long](prefix + "amopsortfamily")
      )
    )
  }

  implicit val oFormat: OFormat[PgAmopRow] = new OFormat[PgAmopRow]{
    override def writes(o: PgAmopRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "amopfamily" -> o.amopfamily,
      "amoplefttype" -> o.amoplefttype,
      "amoprighttype" -> o.amoprighttype,
      "amopstrategy" -> o.amopstrategy,
      "amoppurpose" -> o.amoppurpose,
      "amopopr" -> o.amopopr,
      "amopmethod" -> o.amopmethod,
      "amopsortfamily" -> o.amopsortfamily
      )

    override def reads(json: JsValue): JsResult[PgAmopRow] = {
      JsResult.fromTry(
        Try(
          PgAmopRow(
            oid = json.\("oid").as[PgAmopId],
            amopfamily = json.\("amopfamily").as[/* oid */ Long],
            amoplefttype = json.\("amoplefttype").as[/* oid */ Long],
            amoprighttype = json.\("amoprighttype").as[/* oid */ Long],
            amopstrategy = json.\("amopstrategy").as[Int],
            amoppurpose = json.\("amoppurpose").as[String],
            amopopr = json.\("amopopr").as[/* oid */ Long],
            amopmethod = json.\("amopmethod").as[/* oid */ Long],
            amopsortfamily = json.\("amopsortfamily").as[/* oid */ Long]
          )
        )
      )
    }
  }
}
