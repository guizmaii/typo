/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgSequencesRow(
  schemaname: Option[String],
  sequencename: Option[String],
  sequenceowner: Option[String],
  dataType: Option[PGobject],
  startValue: Option[Long],
  minValue: Option[Long],
  maxValue: Option[Long],
  incrementBy: Option[Long],
  cycle: Option[Boolean],
  cacheSize: Option[Long],
  lastValue: Option[Long]
)

object PgSequencesRow {
  def rowParser(prefix: String): RowParser[PgSequencesRow] = { row =>
    Success(
      PgSequencesRow(
        schemaname = row[Option[String]](prefix + "schemaname"),
        sequencename = row[Option[String]](prefix + "sequencename"),
        sequenceowner = row[Option[String]](prefix + "sequenceowner"),
        dataType = row[Option[PGobject]](prefix + "data_type"),
        startValue = row[Option[Long]](prefix + "start_value"),
        minValue = row[Option[Long]](prefix + "min_value"),
        maxValue = row[Option[Long]](prefix + "max_value"),
        incrementBy = row[Option[Long]](prefix + "increment_by"),
        cycle = row[Option[Boolean]](prefix + "cycle"),
        cacheSize = row[Option[Long]](prefix + "cache_size"),
        lastValue = row[Option[Long]](prefix + "last_value")
      )
    )
  }

  implicit val oFormat: OFormat[PgSequencesRow] = new OFormat[PgSequencesRow]{
    override def writes(o: PgSequencesRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
      "sequencename" -> o.sequencename,
      "sequenceowner" -> o.sequenceowner,
      "data_type" -> o.dataType,
      "start_value" -> o.startValue,
      "min_value" -> o.minValue,
      "max_value" -> o.maxValue,
      "increment_by" -> o.incrementBy,
      "cycle" -> o.cycle,
      "cache_size" -> o.cacheSize,
      "last_value" -> o.lastValue
      )

    override def reads(json: JsValue): JsResult[PgSequencesRow] = {
      JsResult.fromTry(
        Try(
          PgSequencesRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            sequencename = json.\("sequencename").toOption.map(_.as[String]),
            sequenceowner = json.\("sequenceowner").toOption.map(_.as[String]),
            dataType = json.\("data_type").toOption.map(_.as[PGobject]),
            startValue = json.\("start_value").toOption.map(_.as[Long]),
            minValue = json.\("min_value").toOption.map(_.as[Long]),
            maxValue = json.\("max_value").toOption.map(_.as[Long]),
            incrementBy = json.\("increment_by").toOption.map(_.as[Long]),
            cycle = json.\("cycle").toOption.map(_.as[Boolean]),
            cacheSize = json.\("cache_size").toOption.map(_.as[Long]),
            lastValue = json.\("last_value").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
