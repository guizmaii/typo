/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTablesRow(
  schemaname: Option[String],
  tablename: Option[String],
  tableowner: Option[String],
  tablespace: Option[String],
  hasindexes: Option[Boolean],
  hasrules: Option[Boolean],
  hastriggers: Option[Boolean],
  rowsecurity: Option[Boolean]
)

object PgTablesRow {
  def rowParser(prefix: String): RowParser[PgTablesRow] = { row =>
    Success(
      PgTablesRow(
        schemaname = row[Option[String]](prefix + "schemaname"),
        tablename = row[Option[String]](prefix + "tablename"),
        tableowner = row[Option[String]](prefix + "tableowner"),
        tablespace = row[Option[String]](prefix + "tablespace"),
        hasindexes = row[Option[Boolean]](prefix + "hasindexes"),
        hasrules = row[Option[Boolean]](prefix + "hasrules"),
        hastriggers = row[Option[Boolean]](prefix + "hastriggers"),
        rowsecurity = row[Option[Boolean]](prefix + "rowsecurity")
      )
    )
  }

  implicit val oFormat: OFormat[PgTablesRow] = new OFormat[PgTablesRow]{
    override def writes(o: PgTablesRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
      "tablename" -> o.tablename,
      "tableowner" -> o.tableowner,
      "tablespace" -> o.tablespace,
      "hasindexes" -> o.hasindexes,
      "hasrules" -> o.hasrules,
      "hastriggers" -> o.hastriggers,
      "rowsecurity" -> o.rowsecurity
      )

    override def reads(json: JsValue): JsResult[PgTablesRow] = {
      JsResult.fromTry(
        Try(
          PgTablesRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            tablename = json.\("tablename").toOption.map(_.as[String]),
            tableowner = json.\("tableowner").toOption.map(_.as[String]),
            tablespace = json.\("tablespace").toOption.map(_.as[String]),
            hasindexes = json.\("hasindexes").toOption.map(_.as[Boolean]),
            hasrules = json.\("hasrules").toOption.map(_.as[Boolean]),
            hastriggers = json.\("hastriggers").toOption.map(_.as[Boolean]),
            rowsecurity = json.\("rowsecurity").toOption.map(_.as[Boolean])
          )
        )
      )
    }
  }
}
