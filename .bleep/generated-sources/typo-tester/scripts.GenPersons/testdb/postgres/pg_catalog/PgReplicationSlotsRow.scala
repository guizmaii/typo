/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgReplicationSlotsRow(
  slotName: Option[String],
  plugin: Option[String],
  slotType: Option[String],
  datoid: Option[/* oid */ Long],
  database: Option[String],
  temporary: Option[Boolean],
  active: Option[Boolean],
  activePid: Option[Int],
  xmin: Option[/* xid */ PGobject],
  catalogXmin: Option[/* xid */ PGobject],
  restartLsn: Option[String],
  confirmedFlushLsn: Option[String],
  walStatus: Option[String],
  safeWalSize: Option[Long],
  twoPhase: Option[Boolean]
)

object PgReplicationSlotsRow {
  def rowParser(prefix: String): RowParser[PgReplicationSlotsRow] = { row =>
    Success(
      PgReplicationSlotsRow(
        slotName = row[Option[String]](prefix + "slot_name"),
        plugin = row[Option[String]](prefix + "plugin"),
        slotType = row[Option[String]](prefix + "slot_type"),
        datoid = row[Option[/* oid */ Long]](prefix + "datoid"),
        database = row[Option[String]](prefix + "database"),
        temporary = row[Option[Boolean]](prefix + "temporary"),
        active = row[Option[Boolean]](prefix + "active"),
        activePid = row[Option[Int]](prefix + "active_pid"),
        xmin = row[Option[/* xid */ PGobject]](prefix + "xmin"),
        catalogXmin = row[Option[/* xid */ PGobject]](prefix + "catalog_xmin"),
        restartLsn = row[Option[String]](prefix + "restart_lsn"),
        confirmedFlushLsn = row[Option[String]](prefix + "confirmed_flush_lsn"),
        walStatus = row[Option[String]](prefix + "wal_status"),
        safeWalSize = row[Option[Long]](prefix + "safe_wal_size"),
        twoPhase = row[Option[Boolean]](prefix + "two_phase")
      )
    )
  }

  implicit val oFormat: OFormat[PgReplicationSlotsRow] = new OFormat[PgReplicationSlotsRow]{
    override def writes(o: PgReplicationSlotsRow): JsObject =
      Json.obj(
        "slot_name" -> o.slotName,
      "plugin" -> o.plugin,
      "slot_type" -> o.slotType,
      "datoid" -> o.datoid,
      "database" -> o.database,
      "temporary" -> o.temporary,
      "active" -> o.active,
      "active_pid" -> o.activePid,
      "xmin" -> o.xmin,
      "catalog_xmin" -> o.catalogXmin,
      "restart_lsn" -> o.restartLsn,
      "confirmed_flush_lsn" -> o.confirmedFlushLsn,
      "wal_status" -> o.walStatus,
      "safe_wal_size" -> o.safeWalSize,
      "two_phase" -> o.twoPhase
      )

    override def reads(json: JsValue): JsResult[PgReplicationSlotsRow] = {
      JsResult.fromTry(
        Try(
          PgReplicationSlotsRow(
            slotName = json.\("slot_name").toOption.map(_.as[String]),
            plugin = json.\("plugin").toOption.map(_.as[String]),
            slotType = json.\("slot_type").toOption.map(_.as[String]),
            datoid = json.\("datoid").toOption.map(_.as[/* oid */ Long]),
            database = json.\("database").toOption.map(_.as[String]),
            temporary = json.\("temporary").toOption.map(_.as[Boolean]),
            active = json.\("active").toOption.map(_.as[Boolean]),
            activePid = json.\("active_pid").toOption.map(_.as[Int]),
            xmin = json.\("xmin").toOption.map(_.as[/* xid */ PGobject]),
            catalogXmin = json.\("catalog_xmin").toOption.map(_.as[/* xid */ PGobject]),
            restartLsn = json.\("restart_lsn").toOption.map(_.as[String]),
            confirmedFlushLsn = json.\("confirmed_flush_lsn").toOption.map(_.as[String]),
            walStatus = json.\("wal_status").toOption.map(_.as[String]),
            safeWalSize = json.\("safe_wal_size").toOption.map(_.as[Long]),
            twoPhase = json.\("two_phase").toOption.map(_.as[Boolean])
          )
        )
      )
    }
  }
}
