/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatDatabaseConflictsRow(
  datid: Option[Long],
  datname: Option[String],
  conflTablespace: Option[Long],
  conflLock: Option[Long],
  conflSnapshot: Option[Long],
  conflBufferpin: Option[Long],
  conflDeadlock: Option[Long]
)

object PgStatDatabaseConflictsRow {
  def rowParser(prefix: String): RowParser[PgStatDatabaseConflictsRow] = { row =>
    Success(
      PgStatDatabaseConflictsRow(
        datid = row[Option[Long]](prefix + "datid"),
        datname = row[Option[String]](prefix + "datname"),
        conflTablespace = row[Option[Long]](prefix + "confl_tablespace"),
        conflLock = row[Option[Long]](prefix + "confl_lock"),
        conflSnapshot = row[Option[Long]](prefix + "confl_snapshot"),
        conflBufferpin = row[Option[Long]](prefix + "confl_bufferpin"),
        conflDeadlock = row[Option[Long]](prefix + "confl_deadlock")
      )
    )
  }

  implicit val oFormat: OFormat[PgStatDatabaseConflictsRow] = new OFormat[PgStatDatabaseConflictsRow]{
    override def writes(o: PgStatDatabaseConflictsRow): JsObject =
      Json.obj(
        "datid" -> o.datid,
      "datname" -> o.datname,
      "confl_tablespace" -> o.conflTablespace,
      "confl_lock" -> o.conflLock,
      "confl_snapshot" -> o.conflSnapshot,
      "confl_bufferpin" -> o.conflBufferpin,
      "confl_deadlock" -> o.conflDeadlock
      )

    override def reads(json: JsValue): JsResult[PgStatDatabaseConflictsRow] = {
      JsResult.fromTry(
        Try(
          PgStatDatabaseConflictsRow(
            datid = json.\("datid").toOption.map(_.as[Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            conflTablespace = json.\("confl_tablespace").toOption.map(_.as[Long]),
            conflLock = json.\("confl_lock").toOption.map(_.as[Long]),
            conflSnapshot = json.\("confl_snapshot").toOption.map(_.as[Long]),
            conflBufferpin = json.\("confl_bufferpin").toOption.map(_.as[Long]),
            conflDeadlock = json.\("confl_deadlock").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
