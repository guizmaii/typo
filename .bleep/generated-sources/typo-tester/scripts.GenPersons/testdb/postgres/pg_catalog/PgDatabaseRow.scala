/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgDatabaseRow(
  oid: PgDatabaseId,
  datname: String,
  datdba: /* oid */ Long,
  encoding: Int,
  datcollate: String,
  datctype: String,
  datistemplate: Boolean,
  datallowconn: Boolean,
  datconnlimit: Int,
  datlastsysoid: /* oid */ Long,
  datfrozenxid: /* xid */ PGobject,
  datminmxid: /* xid */ PGobject,
  dattablespace: /* oid */ Long,
  datacl: Option[Array[/* aclitem */ PGobject]]
)

object PgDatabaseRow {
  def rowParser(prefix: String): RowParser[PgDatabaseRow] = { row =>
    Success(
      PgDatabaseRow(
        oid = row[PgDatabaseId](prefix + "oid"),
        datname = row[String](prefix + "datname"),
        datdba = row[/* oid */ Long](prefix + "datdba"),
        encoding = row[Int](prefix + "encoding"),
        datcollate = row[String](prefix + "datcollate"),
        datctype = row[String](prefix + "datctype"),
        datistemplate = row[Boolean](prefix + "datistemplate"),
        datallowconn = row[Boolean](prefix + "datallowconn"),
        datconnlimit = row[Int](prefix + "datconnlimit"),
        datlastsysoid = row[/* oid */ Long](prefix + "datlastsysoid"),
        datfrozenxid = row[/* xid */ PGobject](prefix + "datfrozenxid"),
        datminmxid = row[/* xid */ PGobject](prefix + "datminmxid"),
        dattablespace = row[/* oid */ Long](prefix + "dattablespace"),
        datacl = row[Option[Array[/* aclitem */ PGobject]]](prefix + "datacl")
      )
    )
  }

  implicit val oFormat: OFormat[PgDatabaseRow] = new OFormat[PgDatabaseRow]{
    override def writes(o: PgDatabaseRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "datname" -> o.datname,
      "datdba" -> o.datdba,
      "encoding" -> o.encoding,
      "datcollate" -> o.datcollate,
      "datctype" -> o.datctype,
      "datistemplate" -> o.datistemplate,
      "datallowconn" -> o.datallowconn,
      "datconnlimit" -> o.datconnlimit,
      "datlastsysoid" -> o.datlastsysoid,
      "datfrozenxid" -> o.datfrozenxid,
      "datminmxid" -> o.datminmxid,
      "dattablespace" -> o.dattablespace,
      "datacl" -> o.datacl
      )

    override def reads(json: JsValue): JsResult[PgDatabaseRow] = {
      JsResult.fromTry(
        Try(
          PgDatabaseRow(
            oid = json.\("oid").as[PgDatabaseId],
            datname = json.\("datname").as[String],
            datdba = json.\("datdba").as[/* oid */ Long],
            encoding = json.\("encoding").as[Int],
            datcollate = json.\("datcollate").as[String],
            datctype = json.\("datctype").as[String],
            datistemplate = json.\("datistemplate").as[Boolean],
            datallowconn = json.\("datallowconn").as[Boolean],
            datconnlimit = json.\("datconnlimit").as[Int],
            datlastsysoid = json.\("datlastsysoid").as[/* oid */ Long],
            datfrozenxid = json.\("datfrozenxid").as[/* xid */ PGobject],
            datminmxid = json.\("datminmxid").as[/* xid */ PGobject],
            dattablespace = json.\("dattablespace").as[/* oid */ Long],
            datacl = json.\("datacl").toOption.map(_.as[Array[/* aclitem */ PGobject]])
          )
        )
      )
    }
  }
}
