/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatProgressAnalyzeRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  phase: Option[String],
  sampleBlksTotal: Option[Long],
  sampleBlksScanned: Option[Long],
  extStatsTotal: Option[Long],
  extStatsComputed: Option[Long],
  childTablesTotal: Option[Long],
  childTablesDone: Option[Long],
  currentChildTableRelid: Option[/* oid */ Long]
)

object PgStatProgressAnalyzeRow {
  def rowParser(prefix: String): RowParser[PgStatProgressAnalyzeRow] = { row =>
    Success(
      PgStatProgressAnalyzeRow(
        pid = row[Option[Int]](prefix + "pid"),
        datid = row[Option[/* oid */ Long]](prefix + "datid"),
        datname = row[Option[String]](prefix + "datname"),
        relid = row[Option[/* oid */ Long]](prefix + "relid"),
        phase = row[Option[String]](prefix + "phase"),
        sampleBlksTotal = row[Option[Long]](prefix + "sample_blks_total"),
        sampleBlksScanned = row[Option[Long]](prefix + "sample_blks_scanned"),
        extStatsTotal = row[Option[Long]](prefix + "ext_stats_total"),
        extStatsComputed = row[Option[Long]](prefix + "ext_stats_computed"),
        childTablesTotal = row[Option[Long]](prefix + "child_tables_total"),
        childTablesDone = row[Option[Long]](prefix + "child_tables_done"),
        currentChildTableRelid = row[Option[/* oid */ Long]](prefix + "current_child_table_relid")
      )
    )
  }

  implicit val oFormat: OFormat[PgStatProgressAnalyzeRow] = new OFormat[PgStatProgressAnalyzeRow]{
    override def writes(o: PgStatProgressAnalyzeRow): JsObject =
      Json.obj(
        "pid" -> o.pid,
      "datid" -> o.datid,
      "datname" -> o.datname,
      "relid" -> o.relid,
      "phase" -> o.phase,
      "sample_blks_total" -> o.sampleBlksTotal,
      "sample_blks_scanned" -> o.sampleBlksScanned,
      "ext_stats_total" -> o.extStatsTotal,
      "ext_stats_computed" -> o.extStatsComputed,
      "child_tables_total" -> o.childTablesTotal,
      "child_tables_done" -> o.childTablesDone,
      "current_child_table_relid" -> o.currentChildTableRelid
      )

    override def reads(json: JsValue): JsResult[PgStatProgressAnalyzeRow] = {
      JsResult.fromTry(
        Try(
          PgStatProgressAnalyzeRow(
            pid = json.\("pid").toOption.map(_.as[Int]),
            datid = json.\("datid").toOption.map(_.as[/* oid */ Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            relid = json.\("relid").toOption.map(_.as[/* oid */ Long]),
            phase = json.\("phase").toOption.map(_.as[String]),
            sampleBlksTotal = json.\("sample_blks_total").toOption.map(_.as[Long]),
            sampleBlksScanned = json.\("sample_blks_scanned").toOption.map(_.as[Long]),
            extStatsTotal = json.\("ext_stats_total").toOption.map(_.as[Long]),
            extStatsComputed = json.\("ext_stats_computed").toOption.map(_.as[Long]),
            childTablesTotal = json.\("child_tables_total").toOption.map(_.as[Long]),
            childTablesDone = json.\("child_tables_done").toOption.map(_.as[Long]),
            currentChildTableRelid = json.\("current_child_table_relid").toOption.map(_.as[/* oid */ Long])
          )
        )
      )
    }
  }
}
