/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAmprocRow(
  oid: PgAmprocId,
  amprocfamily: Long,
  amproclefttype: Long,
  amprocrighttype: Long,
  amprocnum: Int,
  amproc: PGobject
)

object PgAmprocRow {
  def rowParser(prefix: String): RowParser[PgAmprocRow] = { row =>
    Success(
      PgAmprocRow(
        oid = row[PgAmprocId](prefix + "oid"),
        amprocfamily = row[Long](prefix + "amprocfamily"),
        amproclefttype = row[Long](prefix + "amproclefttype"),
        amprocrighttype = row[Long](prefix + "amprocrighttype"),
        amprocnum = row[Int](prefix + "amprocnum"),
        amproc = row[PGobject](prefix + "amproc")
      )
    )
  }

  implicit val oFormat: OFormat[PgAmprocRow] = new OFormat[PgAmprocRow]{
    override def writes(o: PgAmprocRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "amprocfamily" -> o.amprocfamily,
      "amproclefttype" -> o.amproclefttype,
      "amprocrighttype" -> o.amprocrighttype,
      "amprocnum" -> o.amprocnum,
      "amproc" -> o.amproc
      )

    override def reads(json: JsValue): JsResult[PgAmprocRow] = {
      JsResult.fromTry(
        Try(
          PgAmprocRow(
            oid = json.\("oid").as[PgAmprocId],
            amprocfamily = json.\("amprocfamily").as[Long],
            amproclefttype = json.\("amproclefttype").as[Long],
            amprocrighttype = json.\("amprocrighttype").as[Long],
            amprocnum = json.\("amprocnum").as[Int],
            amproc = json.\("amproc").as[PGobject]
          )
        )
      )
    }
  }
}
