/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import java.time.ZonedDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgRolesRow(
  rolname: Option[String],
  rolsuper: Option[Boolean],
  rolinherit: Option[Boolean],
  rolcreaterole: Option[Boolean],
  rolcreatedb: Option[Boolean],
  rolcanlogin: Option[Boolean],
  rolreplication: Option[Boolean],
  rolconnlimit: Option[Int],
  rolpassword: Option[String],
  rolvaliduntil: Option[ZonedDateTime],
  rolbypassrls: Option[Boolean],
  rolconfig: Option[Array[String]],
  oid: Option[Long]
)

object PgRolesRow {
  implicit val rowParser: RowParser[PgRolesRow] = { row =>
    Success(
      PgRolesRow(
        rolname = row[Option[String]]("rolname"),
        rolsuper = row[Option[Boolean]]("rolsuper"),
        rolinherit = row[Option[Boolean]]("rolinherit"),
        rolcreaterole = row[Option[Boolean]]("rolcreaterole"),
        rolcreatedb = row[Option[Boolean]]("rolcreatedb"),
        rolcanlogin = row[Option[Boolean]]("rolcanlogin"),
        rolreplication = row[Option[Boolean]]("rolreplication"),
        rolconnlimit = row[Option[Int]]("rolconnlimit"),
        rolpassword = row[Option[String]]("rolpassword"),
        rolvaliduntil = row[Option[ZonedDateTime]]("rolvaliduntil"),
        rolbypassrls = row[Option[Boolean]]("rolbypassrls"),
        rolconfig = row[Option[Array[String]]]("rolconfig"),
        oid = row[Option[Long]]("oid")
      )
    )
  }

  implicit val oFormat: OFormat[PgRolesRow] = new OFormat[PgRolesRow]{
    override def writes(o: PgRolesRow): JsObject =
      Json.obj(
        "rolname" -> o.rolname,
      "rolsuper" -> o.rolsuper,
      "rolinherit" -> o.rolinherit,
      "rolcreaterole" -> o.rolcreaterole,
      "rolcreatedb" -> o.rolcreatedb,
      "rolcanlogin" -> o.rolcanlogin,
      "rolreplication" -> o.rolreplication,
      "rolconnlimit" -> o.rolconnlimit,
      "rolpassword" -> o.rolpassword,
      "rolvaliduntil" -> o.rolvaliduntil,
      "rolbypassrls" -> o.rolbypassrls,
      "rolconfig" -> o.rolconfig,
      "oid" -> o.oid
      )

    override def reads(json: JsValue): JsResult[PgRolesRow] = {
      JsResult.fromTry(
        Try(
          PgRolesRow(
            rolname = json.\("rolname").toOption.map(_.as[String]),
            rolsuper = json.\("rolsuper").toOption.map(_.as[Boolean]),
            rolinherit = json.\("rolinherit").toOption.map(_.as[Boolean]),
            rolcreaterole = json.\("rolcreaterole").toOption.map(_.as[Boolean]),
            rolcreatedb = json.\("rolcreatedb").toOption.map(_.as[Boolean]),
            rolcanlogin = json.\("rolcanlogin").toOption.map(_.as[Boolean]),
            rolreplication = json.\("rolreplication").toOption.map(_.as[Boolean]),
            rolconnlimit = json.\("rolconnlimit").toOption.map(_.as[Int]),
            rolpassword = json.\("rolpassword").toOption.map(_.as[String]),
            rolvaliduntil = json.\("rolvaliduntil").toOption.map(_.as[ZonedDateTime]),
            rolbypassrls = json.\("rolbypassrls").toOption.map(_.as[Boolean]),
            rolconfig = json.\("rolconfig").toOption.map(_.as[Array[String]]),
            oid = json.\("oid").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
