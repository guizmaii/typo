/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgOpclassRow(
  oid: PgOpclassId,
  opcmethod: /* oid */ Long,
  opcname: String,
  opcnamespace: /* oid */ Long,
  opcowner: /* oid */ Long,
  opcfamily: /* oid */ Long,
  opcintype: /* oid */ Long,
  opcdefault: Boolean,
  opckeytype: /* oid */ Long
)

object PgOpclassRow {
  def rowParser(prefix: String): RowParser[PgOpclassRow] = { row =>
    Success(
      PgOpclassRow(
        oid = row[PgOpclassId](prefix + "oid"),
        opcmethod = row[/* oid */ Long](prefix + "opcmethod"),
        opcname = row[String](prefix + "opcname"),
        opcnamespace = row[/* oid */ Long](prefix + "opcnamespace"),
        opcowner = row[/* oid */ Long](prefix + "opcowner"),
        opcfamily = row[/* oid */ Long](prefix + "opcfamily"),
        opcintype = row[/* oid */ Long](prefix + "opcintype"),
        opcdefault = row[Boolean](prefix + "opcdefault"),
        opckeytype = row[/* oid */ Long](prefix + "opckeytype")
      )
    )
  }

  implicit val oFormat: OFormat[PgOpclassRow] = new OFormat[PgOpclassRow]{
    override def writes(o: PgOpclassRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "opcmethod" -> o.opcmethod,
      "opcname" -> o.opcname,
      "opcnamespace" -> o.opcnamespace,
      "opcowner" -> o.opcowner,
      "opcfamily" -> o.opcfamily,
      "opcintype" -> o.opcintype,
      "opcdefault" -> o.opcdefault,
      "opckeytype" -> o.opckeytype
      )

    override def reads(json: JsValue): JsResult[PgOpclassRow] = {
      JsResult.fromTry(
        Try(
          PgOpclassRow(
            oid = json.\("oid").as[PgOpclassId],
            opcmethod = json.\("opcmethod").as[/* oid */ Long],
            opcname = json.\("opcname").as[String],
            opcnamespace = json.\("opcnamespace").as[/* oid */ Long],
            opcowner = json.\("opcowner").as[/* oid */ Long],
            opcfamily = json.\("opcfamily").as[/* oid */ Long],
            opcintype = json.\("opcintype").as[/* oid */ Long],
            opcdefault = json.\("opcdefault").as[Boolean],
            opckeytype = json.\("opckeytype").as[/* oid */ Long]
          )
        )
      )
    }
  }
}
