/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgPoliciesRow(
  schemaname: Option[String],
  tablename: Option[String],
  policyname: Option[String],
  permissive: Option[String],
  roles: Option[Array[String]],
  cmd: Option[String],
  qual: Option[String],
  withCheck: Option[String]
)

object PgPoliciesRow {
  def rowParser(prefix: String): RowParser[PgPoliciesRow] = { row =>
    Success(
      PgPoliciesRow(
        schemaname = row[Option[String]](prefix + "schemaname"),
        tablename = row[Option[String]](prefix + "tablename"),
        policyname = row[Option[String]](prefix + "policyname"),
        permissive = row[Option[String]](prefix + "permissive"),
        roles = row[Option[Array[String]]](prefix + "roles"),
        cmd = row[Option[String]](prefix + "cmd"),
        qual = row[Option[String]](prefix + "qual"),
        withCheck = row[Option[String]](prefix + "with_check")
      )
    )
  }

  implicit val oFormat: OFormat[PgPoliciesRow] = new OFormat[PgPoliciesRow]{
    override def writes(o: PgPoliciesRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
      "tablename" -> o.tablename,
      "policyname" -> o.policyname,
      "permissive" -> o.permissive,
      "roles" -> o.roles,
      "cmd" -> o.cmd,
      "qual" -> o.qual,
      "with_check" -> o.withCheck
      )

    override def reads(json: JsValue): JsResult[PgPoliciesRow] = {
      JsResult.fromTry(
        Try(
          PgPoliciesRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            tablename = json.\("tablename").toOption.map(_.as[String]),
            policyname = json.\("policyname").toOption.map(_.as[String]),
            permissive = json.\("permissive").toOption.map(_.as[String]),
            roles = json.\("roles").toOption.map(_.as[Array[String]]),
            cmd = json.\("cmd").toOption.map(_.as[String]),
            qual = json.\("qual").toOption.map(_.as[String]),
            withCheck = json.\("with_check").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
