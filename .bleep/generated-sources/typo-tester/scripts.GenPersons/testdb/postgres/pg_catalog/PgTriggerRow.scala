/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package postgres
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTriggerRow(
  oid: PgTriggerId,
  tgrelid: /* oid */ Long,
  tgparentid: /* oid */ Long,
  tgname: String,
  tgfoid: /* oid */ Long,
  tgtype: Int,
  tgenabled: String,
  tgisinternal: Boolean,
  tgconstrrelid: /* oid */ Long,
  tgconstrindid: /* oid */ Long,
  tgconstraint: /* oid */ Long,
  tgdeferrable: Boolean,
  tginitdeferred: Boolean,
  tgnargs: Int,
  tgattr: /* int2vector */ PGobject,
  tgargs: Array[Byte],
  tgqual: Option[/* pg_node_tree */ PGobject],
  tgoldtable: Option[String],
  tgnewtable: Option[String]
)

object PgTriggerRow {
  def rowParser(prefix: String): RowParser[PgTriggerRow] = { row =>
    Success(
      PgTriggerRow(
        oid = row[PgTriggerId](prefix + "oid"),
        tgrelid = row[/* oid */ Long](prefix + "tgrelid"),
        tgparentid = row[/* oid */ Long](prefix + "tgparentid"),
        tgname = row[String](prefix + "tgname"),
        tgfoid = row[/* oid */ Long](prefix + "tgfoid"),
        tgtype = row[Int](prefix + "tgtype"),
        tgenabled = row[String](prefix + "tgenabled"),
        tgisinternal = row[Boolean](prefix + "tgisinternal"),
        tgconstrrelid = row[/* oid */ Long](prefix + "tgconstrrelid"),
        tgconstrindid = row[/* oid */ Long](prefix + "tgconstrindid"),
        tgconstraint = row[/* oid */ Long](prefix + "tgconstraint"),
        tgdeferrable = row[Boolean](prefix + "tgdeferrable"),
        tginitdeferred = row[Boolean](prefix + "tginitdeferred"),
        tgnargs = row[Int](prefix + "tgnargs"),
        tgattr = row[/* int2vector */ PGobject](prefix + "tgattr"),
        tgargs = row[Array[Byte]](prefix + "tgargs"),
        tgqual = row[Option[/* pg_node_tree */ PGobject]](prefix + "tgqual"),
        tgoldtable = row[Option[String]](prefix + "tgoldtable"),
        tgnewtable = row[Option[String]](prefix + "tgnewtable")
      )
    )
  }

  implicit val oFormat: OFormat[PgTriggerRow] = new OFormat[PgTriggerRow]{
    override def writes(o: PgTriggerRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "tgrelid" -> o.tgrelid,
      "tgparentid" -> o.tgparentid,
      "tgname" -> o.tgname,
      "tgfoid" -> o.tgfoid,
      "tgtype" -> o.tgtype,
      "tgenabled" -> o.tgenabled,
      "tgisinternal" -> o.tgisinternal,
      "tgconstrrelid" -> o.tgconstrrelid,
      "tgconstrindid" -> o.tgconstrindid,
      "tgconstraint" -> o.tgconstraint,
      "tgdeferrable" -> o.tgdeferrable,
      "tginitdeferred" -> o.tginitdeferred,
      "tgnargs" -> o.tgnargs,
      "tgattr" -> o.tgattr,
      "tgargs" -> o.tgargs,
      "tgqual" -> o.tgqual,
      "tgoldtable" -> o.tgoldtable,
      "tgnewtable" -> o.tgnewtable
      )

    override def reads(json: JsValue): JsResult[PgTriggerRow] = {
      JsResult.fromTry(
        Try(
          PgTriggerRow(
            oid = json.\("oid").as[PgTriggerId],
            tgrelid = json.\("tgrelid").as[/* oid */ Long],
            tgparentid = json.\("tgparentid").as[/* oid */ Long],
            tgname = json.\("tgname").as[String],
            tgfoid = json.\("tgfoid").as[/* oid */ Long],
            tgtype = json.\("tgtype").as[Int],
            tgenabled = json.\("tgenabled").as[String],
            tgisinternal = json.\("tgisinternal").as[Boolean],
            tgconstrrelid = json.\("tgconstrrelid").as[/* oid */ Long],
            tgconstrindid = json.\("tgconstrindid").as[/* oid */ Long],
            tgconstraint = json.\("tgconstraint").as[/* oid */ Long],
            tgdeferrable = json.\("tgdeferrable").as[Boolean],
            tginitdeferred = json.\("tginitdeferred").as[Boolean],
            tgnargs = json.\("tgnargs").as[Int],
            tgattr = json.\("tgattr").as[/* int2vector */ PGobject],
            tgargs = json.\("tgargs").as[Array[Byte]],
            tgqual = json.\("tgqual").toOption.map(_.as[/* pg_node_tree */ PGobject]),
            tgoldtable = json.\("tgoldtable").toOption.map(_.as[String]),
            tgnewtable = json.\("tgnewtable").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
