/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package custom
package view_find_all

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try
import typo.generated.pg_catalog.pg_namespace.PgNamespaceId

case class ViewFindAllRow(
  /** Points to [[pg_catalog.pg_namespace.PgNamespaceRow.oid]]
      debug: {"baseColumnName":"oid","baseRelationName":"pg_catalog.pg_namespace","columnClassName":"java.lang.Long","columnDisplaySize":10,"columnLabel":"table_oid","columnName":"table_oid","columnType":"BigInt","columnTypeName":"oid","format":0,"isAutoIncrement":false,"isCaseSensitive":false,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":10,"scale":0,"tableName":"pg_namespace"} */
  tableOid: PgNamespaceId,
  /** debug: {"columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"table_schema","columnName":"table_schema","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NullableUnknown","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0} */
  tableSchema: /* nullability unknown */ Option[String],
  /** debug: {"columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"table_name","columnName":"table_name","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NullableUnknown","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0} */
  tableName: /* nullability unknown */ Option[String],
  /** Points to [[pg_catalog.pg_class.PgClassRow.relkind]]
      debug: {"baseColumnName":"relkind","baseRelationName":"pg_catalog.pg_class","columnClassName":"java.lang.String","columnDisplaySize":1,"columnLabel":"relkind","columnName":"relkind","columnType":"Char","columnTypeName":"char","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":1,"scale":0,"tableName":"pg_class"} */
  relkind: String,
  /** debug: {"columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"view_definition","columnName":"view_definition","columnType":"VarChar","columnTypeName":"varchar","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NullableUnknown","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0} */
  viewDefinition: /* nullability unknown */ Option[String]
)

object ViewFindAllRow {
  def rowParser(prefix: String): RowParser[ViewFindAllRow] = { row =>
    Success(
      ViewFindAllRow(
        tableOid = row[PgNamespaceId](prefix + "table_oid"),
        tableSchema = row[/* nullability unknown */ Option[String]](prefix + "table_schema"),
        tableName = row[/* nullability unknown */ Option[String]](prefix + "table_name"),
        relkind = row[String](prefix + "relkind"),
        viewDefinition = row[/* nullability unknown */ Option[String]](prefix + "view_definition")
      )
    )
  }

  implicit val oFormat: OFormat[ViewFindAllRow] = new OFormat[ViewFindAllRow]{
    override def writes(o: ViewFindAllRow): JsObject =
      Json.obj(
        "table_oid" -> o.tableOid,
        "table_schema" -> o.tableSchema,
        "table_name" -> o.tableName,
        "relkind" -> o.relkind,
        "view_definition" -> o.viewDefinition
      )
  
    override def reads(json: JsValue): JsResult[ViewFindAllRow] = {
      JsResult.fromTry(
        Try(
          ViewFindAllRow(
            tableOid = json.\("table_oid").as[PgNamespaceId],
            tableSchema = json.\("table_schema").toOption.map(_.as[String]),
            tableName = json.\("table_name").toOption.map(_.as[String]),
            relkind = json.\("relkind").as[String],
            viewDefinition = json.\("view_definition").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
