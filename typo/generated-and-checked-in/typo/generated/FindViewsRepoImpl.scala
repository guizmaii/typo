/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SQL
import anorm.SqlStringInterpolation
import java.sql.Connection

object FindViewsRepoImpl extends FindViewsRepo {
  override def selectAll(implicit c: Connection): List[FindViewsRow] = {
    SQL"""select table_schema, table_name, relkind, view_definition from find_views""".as(FindViewsRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[FindViewsFieldValue[_]])(implicit c: Connection): List[FindViewsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case FindViewsFieldValue.tableSchema(value) => NamedParameter("table_schema", ParameterValue.from(value))
          case FindViewsFieldValue.tableName(value) => NamedParameter("table_name", ParameterValue.from(value))
          case FindViewsFieldValue.relkind(value) => NamedParameter("relkind", ParameterValue.from(value))
          case FindViewsFieldValue.viewDefinition(value) => NamedParameter("view_definition", ParameterValue.from(value))
        }
        val q = s"""select * from find_views where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        SQL(q)
          .on(namedParams: _*)
          .as(FindViewsRow.rowParser("").*)
    }

  }
}
