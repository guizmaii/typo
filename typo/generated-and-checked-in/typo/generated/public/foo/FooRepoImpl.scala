/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package public
package foo

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection

object FooRepoImpl extends FooRepo {
  override def selectAll(implicit c: Connection): List[FooRow] = {
    SQL"select array_agg from public.foo".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[FooFieldOrIdValue[_]])(implicit c: Connection): List[FooRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case FooFieldValue.arrayAgg(value) => NamedParameter("array_agg", ParameterValue.from(value))
        }
        val q = s"""select * from public.foo where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[FooRow] =
    RowParser[FooRow] { row =>
      Success(
        FooRow(
          arrayAgg = row[Option[Array[String]]]("array_agg")
        )
      )
    }
}
