/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SequencesRow(
  sequenceCatalog: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"sequence_catalog","ordinal_position":1,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  sequenceSchema: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"sequence_schema","ordinal_position":2,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  sequenceName: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"sequence_name","ordinal_position":3,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  dataType: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"data_type","ordinal_position":4,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  numericPrecision: Option[Int] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"numeric_precision","ordinal_position":5,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"cardinal_number","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  numericPrecisionRadix: Option[Int] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"numeric_precision_radix","ordinal_position":6,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"cardinal_number","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  numericScale: Option[Int] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"numeric_scale","ordinal_position":7,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"cardinal_number","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  startValue: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"start_value","ordinal_position":8,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  minimumValue: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"minimum_value","ordinal_position":9,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  maximumValue: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"maximum_value","ordinal_position":10,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  increment: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"increment","ordinal_position":11,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  cycleOption: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sequences","column_name":"cycle_option","ordinal_position":12,"is_nullable":"YES","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"yes_or_no","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object SequencesRow {
  implicit val rowParser: RowParser[SequencesRow] = { row =>
    Success(
      SequencesRow(
        sequenceCatalog = row[Option[String]]("sequence_catalog"),
        sequenceSchema = row[Option[String]]("sequence_schema"),
        sequenceName = row[Option[String]]("sequence_name"),
        dataType = row[Option[String]]("data_type"),
        numericPrecision = row[Option[Int]]("numeric_precision"),
        numericPrecisionRadix = row[Option[Int]]("numeric_precision_radix"),
        numericScale = row[Option[Int]]("numeric_scale"),
        startValue = row[Option[String]]("start_value"),
        minimumValue = row[Option[String]]("minimum_value"),
        maximumValue = row[Option[String]]("maximum_value"),
        increment = row[Option[String]]("increment"),
        cycleOption = row[Option[String]]("cycle_option")
      )
    )
  }

  implicit val oFormat: OFormat[SequencesRow] = new OFormat[SequencesRow]{
    override def writes(o: SequencesRow): JsObject =
      Json.obj(
        "sequence_catalog" -> o.sequenceCatalog,
      "sequence_schema" -> o.sequenceSchema,
      "sequence_name" -> o.sequenceName,
      "data_type" -> o.dataType,
      "numeric_precision" -> o.numericPrecision,
      "numeric_precision_radix" -> o.numericPrecisionRadix,
      "numeric_scale" -> o.numericScale,
      "start_value" -> o.startValue,
      "minimum_value" -> o.minimumValue,
      "maximum_value" -> o.maximumValue,
      "increment" -> o.increment,
      "cycle_option" -> o.cycleOption
      )

    override def reads(json: JsValue): JsResult[SequencesRow] = {
      JsResult.fromTry(
        Try(
          SequencesRow(
            sequenceCatalog = json.\("sequence_catalog").toOption.map(_.as[String]),
            sequenceSchema = json.\("sequence_schema").toOption.map(_.as[String]),
            sequenceName = json.\("sequence_name").toOption.map(_.as[String]),
            dataType = json.\("data_type").toOption.map(_.as[String]),
            numericPrecision = json.\("numeric_precision").toOption.map(_.as[Int]),
            numericPrecisionRadix = json.\("numeric_precision_radix").toOption.map(_.as[Int]),
            numericScale = json.\("numeric_scale").toOption.map(_.as[Int]),
            startValue = json.\("start_value").toOption.map(_.as[String]),
            minimumValue = json.\("minimum_value").toOption.map(_.as[String]),
            maximumValue = json.\("maximum_value").toOption.map(_.as[String]),
            increment = json.\("increment").toOption.map(_.as[String]),
            cycleOption = json.\("cycle_option").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
