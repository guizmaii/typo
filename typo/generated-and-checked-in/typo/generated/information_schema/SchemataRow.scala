/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SchemataRow(
  catalogName: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"schemata","column_name":"catalog_name","ordinal_position":1,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  schemaName: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"schemata","column_name":"schema_name","ordinal_position":2,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  schemaOwner: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"schemata","column_name":"schema_owner","ordinal_position":3,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  defaultCharacterSetCatalog: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"schemata","column_name":"default_character_set_catalog","ordinal_position":4,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  defaultCharacterSetSchema: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"schemata","column_name":"default_character_set_schema","ordinal_position":5,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  defaultCharacterSetName: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"schemata","column_name":"default_character_set_name","ordinal_position":6,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  sqlPath: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"schemata","column_name":"sql_path","ordinal_position":7,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object SchemataRow {
  implicit val rowParser: RowParser[SchemataRow] = { row =>
    Success(
      SchemataRow(
        catalogName = row[Option[String]]("catalog_name"),
        schemaName = row[Option[String]]("schema_name"),
        schemaOwner = row[Option[String]]("schema_owner"),
        defaultCharacterSetCatalog = row[Option[String]]("default_character_set_catalog"),
        defaultCharacterSetSchema = row[Option[String]]("default_character_set_schema"),
        defaultCharacterSetName = row[Option[String]]("default_character_set_name"),
        sqlPath = row[Option[String]]("sql_path")
      )
    )
  }

  implicit val oFormat: OFormat[SchemataRow] = new OFormat[SchemataRow]{
    override def writes(o: SchemataRow): JsObject =
      Json.obj(
        "catalog_name" -> o.catalogName,
      "schema_name" -> o.schemaName,
      "schema_owner" -> o.schemaOwner,
      "default_character_set_catalog" -> o.defaultCharacterSetCatalog,
      "default_character_set_schema" -> o.defaultCharacterSetSchema,
      "default_character_set_name" -> o.defaultCharacterSetName,
      "sql_path" -> o.sqlPath
      )

    override def reads(json: JsValue): JsResult[SchemataRow] = {
      JsResult.fromTry(
        Try(
          SchemataRow(
            catalogName = json.\("catalog_name").toOption.map(_.as[String]),
            schemaName = json.\("schema_name").toOption.map(_.as[String]),
            schemaOwner = json.\("schema_owner").toOption.map(_.as[String]),
            defaultCharacterSetCatalog = json.\("default_character_set_catalog").toOption.map(_.as[String]),
            defaultCharacterSetSchema = json.\("default_character_set_schema").toOption.map(_.as[String]),
            defaultCharacterSetName = json.\("default_character_set_name").toOption.map(_.as[String]),
            sqlPath = json.\("sql_path").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
