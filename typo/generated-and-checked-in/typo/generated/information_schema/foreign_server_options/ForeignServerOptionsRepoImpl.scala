/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package foreign_server_options

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object ForeignServerOptionsRepoImpl extends ForeignServerOptionsRepo {
  override def selectAll(implicit c: Connection): List[ForeignServerOptionsRow] = {
    SQL"""select foreign_server_catalog, foreign_server_name, option_name, option_value from information_schema.foreign_server_options""".as(ForeignServerOptionsRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[ForeignServerOptionsFieldValue[_]])(implicit c: Connection): List[ForeignServerOptionsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ForeignServerOptionsFieldValue.foreignServerCatalog(value) => NamedParameter("foreign_server_catalog", ParameterValue.from(value))
          case ForeignServerOptionsFieldValue.foreignServerName(value) => NamedParameter("foreign_server_name", ParameterValue.from(value))
          case ForeignServerOptionsFieldValue.optionName(value) => NamedParameter("option_name", ParameterValue.from(value))
          case ForeignServerOptionsFieldValue.optionValue(value) => NamedParameter("option_value", ParameterValue.from(value))
        }
        val q = s"""select * from information_schema.foreign_server_options where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(ForeignServerOptionsRow.rowParser("").*)
    }

  }
}
