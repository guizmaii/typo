/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package views

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ViewsRow(
  tableCatalog: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"table_catalog","ordinal_position":1,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  tableSchema: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"table_schema","ordinal_position":2,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  tableName: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"table_name","ordinal_position":3,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  viewDefinition: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"view_definition","ordinal_position":4,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  checkOption: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"check_option","ordinal_position":5,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isUpdatable: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"is_updatable","ordinal_position":6,"is_nullable":"YES","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"yes_or_no","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isInsertableInto: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"is_insertable_into","ordinal_position":7,"is_nullable":"YES","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"yes_or_no","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isTriggerUpdatable: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"is_trigger_updatable","ordinal_position":8,"is_nullable":"YES","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"yes_or_no","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isTriggerDeletable: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"is_trigger_deletable","ordinal_position":9,"is_nullable":"YES","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"yes_or_no","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isTriggerInsertableInto: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"views","column_name":"is_trigger_insertable_into","ordinal_position":10,"is_nullable":"YES","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"yes_or_no","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object ViewsRow {
  def rowParser(prefix: String): RowParser[ViewsRow] = { row =>
    Success(
      ViewsRow(
        tableCatalog = row[Option[String]](prefix + "table_catalog"),
        tableSchema = row[Option[String]](prefix + "table_schema"),
        tableName = row[Option[String]](prefix + "table_name"),
        viewDefinition = row[Option[String]](prefix + "view_definition"),
        checkOption = row[Option[String]](prefix + "check_option"),
        isUpdatable = row[Option[String]](prefix + "is_updatable"),
        isInsertableInto = row[Option[String]](prefix + "is_insertable_into"),
        isTriggerUpdatable = row[Option[String]](prefix + "is_trigger_updatable"),
        isTriggerDeletable = row[Option[String]](prefix + "is_trigger_deletable"),
        isTriggerInsertableInto = row[Option[String]](prefix + "is_trigger_insertable_into")
      )
    )
  }

  implicit val oFormat: OFormat[ViewsRow] = new OFormat[ViewsRow]{
    override def writes(o: ViewsRow): JsObject =
      Json.obj(
        "table_catalog" -> o.tableCatalog,
      "table_schema" -> o.tableSchema,
      "table_name" -> o.tableName,
      "view_definition" -> o.viewDefinition,
      "check_option" -> o.checkOption,
      "is_updatable" -> o.isUpdatable,
      "is_insertable_into" -> o.isInsertableInto,
      "is_trigger_updatable" -> o.isTriggerUpdatable,
      "is_trigger_deletable" -> o.isTriggerDeletable,
      "is_trigger_insertable_into" -> o.isTriggerInsertableInto
      )

    override def reads(json: JsValue): JsResult[ViewsRow] = {
      JsResult.fromTry(
        Try(
          ViewsRow(
            tableCatalog = json.\("table_catalog").toOption.map(_.as[String]),
            tableSchema = json.\("table_schema").toOption.map(_.as[String]),
            tableName = json.\("table_name").toOption.map(_.as[String]),
            viewDefinition = json.\("view_definition").toOption.map(_.as[String]),
            checkOption = json.\("check_option").toOption.map(_.as[String]),
            isUpdatable = json.\("is_updatable").toOption.map(_.as[String]),
            isInsertableInto = json.\("is_insertable_into").toOption.map(_.as[String]),
            isTriggerUpdatable = json.\("is_trigger_updatable").toOption.map(_.as[String]),
            isTriggerDeletable = json.\("is_trigger_deletable").toOption.map(_.as[String]),
            isTriggerInsertableInto = json.\("is_trigger_insertable_into").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
