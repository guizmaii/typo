/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package information_schema_catalog_name

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class InformationSchemaCatalogNameRow(
  catalogName: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"information_schema_catalog_name","column_name":"catalog_name","ordinal_position":1,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object InformationSchemaCatalogNameRow {
  def rowParser(prefix: String): RowParser[InformationSchemaCatalogNameRow] = { row =>
    Success(
      InformationSchemaCatalogNameRow(
        catalogName = row[Option[String]](prefix + "catalog_name")
      )
    )
  }

  implicit val oFormat: OFormat[InformationSchemaCatalogNameRow] = new OFormat[InformationSchemaCatalogNameRow]{
    override def writes(o: InformationSchemaCatalogNameRow): JsObject =
      Json.obj(
        "catalog_name" -> o.catalogName
      )

    override def reads(json: JsValue): JsResult[InformationSchemaCatalogNameRow] = {
      JsResult.fromTry(
        Try(
          InformationSchemaCatalogNameRow(
            catalogName = json.\("catalog_name").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
