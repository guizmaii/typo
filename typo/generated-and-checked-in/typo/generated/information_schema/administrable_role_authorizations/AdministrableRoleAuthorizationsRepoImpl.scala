/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package administrable_role_authorizations

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object AdministrableRoleAuthorizationsRepoImpl extends AdministrableRoleAuthorizationsRepo {
  override def selectAll(implicit c: Connection): List[AdministrableRoleAuthorizationsRow] = {
    SQL"""select grantee, role_name, is_grantable from information_schema.administrable_role_authorizations""".as(AdministrableRoleAuthorizationsRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[AdministrableRoleAuthorizationsFieldValue[_]])(implicit c: Connection): List[AdministrableRoleAuthorizationsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case AdministrableRoleAuthorizationsFieldValue.grantee(value) => NamedParameter("grantee", ParameterValue.from(value))
          case AdministrableRoleAuthorizationsFieldValue.roleName(value) => NamedParameter("role_name", ParameterValue.from(value))
          case AdministrableRoleAuthorizationsFieldValue.isGrantable(value) => NamedParameter("is_grantable", ParameterValue.from(value))
        }
        val q = s"""select * from information_schema.administrable_role_authorizations where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(AdministrableRoleAuthorizationsRow.rowParser("").*)
    }

  }
}
