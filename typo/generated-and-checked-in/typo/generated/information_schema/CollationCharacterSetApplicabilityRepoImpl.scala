/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SQL
import anorm.SqlStringInterpolation
import java.sql.Connection

object CollationCharacterSetApplicabilityRepoImpl extends CollationCharacterSetApplicabilityRepo {
  override def selectAll(implicit c: Connection): List[CollationCharacterSetApplicabilityRow] = {
    SQL"""select collation_catalog, collation_schema, collation_name, character_set_catalog, character_set_schema, character_set_name from information_schema.collation_character_set_applicability""".as(CollationCharacterSetApplicabilityRow.rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[CollationCharacterSetApplicabilityFieldValue[_]])(implicit c: Connection): List[CollationCharacterSetApplicabilityRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CollationCharacterSetApplicabilityFieldValue.collationCatalog(value) => NamedParameter("collation_catalog", ParameterValue.from(value))
          case CollationCharacterSetApplicabilityFieldValue.collationSchema(value) => NamedParameter("collation_schema", ParameterValue.from(value))
          case CollationCharacterSetApplicabilityFieldValue.collationName(value) => NamedParameter("collation_name", ParameterValue.from(value))
          case CollationCharacterSetApplicabilityFieldValue.characterSetCatalog(value) => NamedParameter("character_set_catalog", ParameterValue.from(value))
          case CollationCharacterSetApplicabilityFieldValue.characterSetSchema(value) => NamedParameter("character_set_schema", ParameterValue.from(value))
          case CollationCharacterSetApplicabilityFieldValue.characterSetName(value) => NamedParameter("character_set_name", ParameterValue.from(value))
        }
        val q = s"""select * from information_schema.collation_character_set_applicability where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        SQL(q)
          .on(namedParams: _*)
          .as(CollationCharacterSetApplicabilityRow.rowParser.*)
    }

  }
}
