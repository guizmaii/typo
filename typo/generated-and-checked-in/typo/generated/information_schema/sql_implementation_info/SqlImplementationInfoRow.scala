/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package sql_implementation_info

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SqlImplementationInfoRow(
  implementationInfoId: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sql_implementation_info","column_name":"implementation_info_id","ordinal_position":1,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  implementationInfoName: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sql_implementation_info","column_name":"implementation_info_name","ordinal_position":2,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  integerValue: Option[Int] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sql_implementation_info","column_name":"integer_value","ordinal_position":3,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"cardinal_number","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  characterValue: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sql_implementation_info","column_name":"character_value","ordinal_position":4,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  comments: Option[String] /* {"table_catalog":"postgres","table_schema":"information_schema","table_name":"sql_implementation_info","column_name":"comments","ordinal_position":5,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object SqlImplementationInfoRow {
  def rowParser(prefix: String): RowParser[SqlImplementationInfoRow] = { row =>
    Success(
      SqlImplementationInfoRow(
        implementationInfoId = row[Option[String]](prefix + "implementation_info_id"),
        implementationInfoName = row[Option[String]](prefix + "implementation_info_name"),
        integerValue = row[Option[Int]](prefix + "integer_value"),
        characterValue = row[Option[String]](prefix + "character_value"),
        comments = row[Option[String]](prefix + "comments")
      )
    )
  }

  implicit val oFormat: OFormat[SqlImplementationInfoRow] = new OFormat[SqlImplementationInfoRow]{
    override def writes(o: SqlImplementationInfoRow): JsObject =
      Json.obj(
        "implementation_info_id" -> o.implementationInfoId,
      "implementation_info_name" -> o.implementationInfoName,
      "integer_value" -> o.integerValue,
      "character_value" -> o.characterValue,
      "comments" -> o.comments
      )

    override def reads(json: JsValue): JsResult[SqlImplementationInfoRow] = {
      JsResult.fromTry(
        Try(
          SqlImplementationInfoRow(
            implementationInfoId = json.\("implementation_info_id").toOption.map(_.as[String]),
            implementationInfoName = json.\("implementation_info_name").toOption.map(_.as[String]),
            integerValue = json.\("integer_value").toOption.map(_.as[Int]),
            characterValue = json.\("character_value").toOption.map(_.as[String]),
            comments = json.\("comments").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
