/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package routine_sequence_usage

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object RoutineSequenceUsageRepoImpl extends RoutineSequenceUsageRepo {
  override def selectAll(implicit c: Connection): List[RoutineSequenceUsageRow] = {
    SQL"""select specific_catalog, specific_schema, specific_name, routine_catalog, routine_schema, routine_name, sequence_catalog, sequence_schema, sequence_name from information_schema.routine_sequence_usage""".as(RoutineSequenceUsageRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[RoutineSequenceUsageFieldValue[_]])(implicit c: Connection): List[RoutineSequenceUsageRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case RoutineSequenceUsageFieldValue.specificCatalog(value) => NamedParameter("specific_catalog", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.specificSchema(value) => NamedParameter("specific_schema", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.specificName(value) => NamedParameter("specific_name", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.routineCatalog(value) => NamedParameter("routine_catalog", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.routineSchema(value) => NamedParameter("routine_schema", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.routineName(value) => NamedParameter("routine_name", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.sequenceCatalog(value) => NamedParameter("sequence_catalog", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.sequenceSchema(value) => NamedParameter("sequence_schema", ParameterValue.from(value))
          case RoutineSequenceUsageFieldValue.sequenceName(value) => NamedParameter("sequence_name", ParameterValue.from(value))
        }
        val q = s"""select * from information_schema.routine_sequence_usage where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(RoutineSequenceUsageRow.rowParser("").*)
    }

  }
}
