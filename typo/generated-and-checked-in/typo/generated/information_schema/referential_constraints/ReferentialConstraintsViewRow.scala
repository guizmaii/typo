/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package referential_constraints

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class ReferentialConstraintsViewRow(
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"constraint_catalog","ordinal_position":1,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  constraintCatalog: Option[SqlIdentifier],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"constraint_schema","ordinal_position":2,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  constraintSchema: Option[SqlIdentifier],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"constraint_name","ordinal_position":3,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  constraintName: Option[SqlIdentifier],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"unique_constraint_catalog","ordinal_position":4,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  uniqueConstraintCatalog: Option[SqlIdentifier],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"unique_constraint_schema","ordinal_position":5,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  uniqueConstraintSchema: Option[SqlIdentifier],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"unique_constraint_name","ordinal_position":6,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"sql_identifier","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  uniqueConstraintName: Option[SqlIdentifier],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"match_option","ordinal_position":7,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  matchOption: Option[CharacterData],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"update_rule","ordinal_position":8,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  updateRule: Option[CharacterData],
  /** debug: {"table_catalog":"postgres","table_schema":"information_schema","table_name":"referential_constraints","column_name":"delete_rule","ordinal_position":9,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","domain_catalog":"postgres","domain_schema":"information_schema","domain_name":"character_data","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  deleteRule: Option[CharacterData]
)

object ReferentialConstraintsViewRow {
  implicit lazy val reads: Reads[ReferentialConstraintsViewRow] = Reads[ReferentialConstraintsViewRow](json => JsResult.fromTry(
      Try(
        ReferentialConstraintsViewRow(
          constraintCatalog = json.\("constraint_catalog").toOption.map(_.as(SqlIdentifier.reads)),
          constraintSchema = json.\("constraint_schema").toOption.map(_.as(SqlIdentifier.reads)),
          constraintName = json.\("constraint_name").toOption.map(_.as(SqlIdentifier.reads)),
          uniqueConstraintCatalog = json.\("unique_constraint_catalog").toOption.map(_.as(SqlIdentifier.reads)),
          uniqueConstraintSchema = json.\("unique_constraint_schema").toOption.map(_.as(SqlIdentifier.reads)),
          uniqueConstraintName = json.\("unique_constraint_name").toOption.map(_.as(SqlIdentifier.reads)),
          matchOption = json.\("match_option").toOption.map(_.as(CharacterData.reads)),
          updateRule = json.\("update_rule").toOption.map(_.as(CharacterData.reads)),
          deleteRule = json.\("delete_rule").toOption.map(_.as(CharacterData.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ReferentialConstraintsViewRow] = RowParser[ReferentialConstraintsViewRow] { row =>
    Success(
      ReferentialConstraintsViewRow(
        constraintCatalog = row(idx + 0)(Column.columnToOption(SqlIdentifier.column)),
        constraintSchema = row(idx + 1)(Column.columnToOption(SqlIdentifier.column)),
        constraintName = row(idx + 2)(Column.columnToOption(SqlIdentifier.column)),
        uniqueConstraintCatalog = row(idx + 3)(Column.columnToOption(SqlIdentifier.column)),
        uniqueConstraintSchema = row(idx + 4)(Column.columnToOption(SqlIdentifier.column)),
        uniqueConstraintName = row(idx + 5)(Column.columnToOption(SqlIdentifier.column)),
        matchOption = row(idx + 6)(Column.columnToOption(CharacterData.column)),
        updateRule = row(idx + 7)(Column.columnToOption(CharacterData.column)),
        deleteRule = row(idx + 8)(Column.columnToOption(CharacterData.column))
      )
    )
  }
  implicit lazy val writes: OWrites[ReferentialConstraintsViewRow] = OWrites[ReferentialConstraintsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "constraint_catalog" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.constraintCatalog),
      "constraint_schema" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.constraintSchema),
      "constraint_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.constraintName),
      "unique_constraint_catalog" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.uniqueConstraintCatalog),
      "unique_constraint_schema" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.uniqueConstraintSchema),
      "unique_constraint_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.uniqueConstraintName),
      "match_option" -> Writes.OptionWrites(CharacterData.writes).writes(o.matchOption),
      "update_rule" -> Writes.OptionWrites(CharacterData.writes).writes(o.updateRule),
      "delete_rule" -> Writes.OptionWrites(CharacterData.writes).writes(o.deleteRule)
    ))
  )
}
