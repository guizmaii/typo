/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package referential_constraints

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import typo.generated.information_schema.CharacterData
import typo.generated.information_schema.SqlIdentifier

object ReferentialConstraintsRepoImpl extends ReferentialConstraintsRepo {
  override def selectAll(implicit c: Connection): List[ReferentialConstraintsRow] = {
    SQL"""select "constraint_catalog", "constraint_schema", "constraint_name", unique_constraint_catalog, unique_constraint_schema, unique_constraint_name, match_option, update_rule, delete_rule
          from information_schema.referential_constraints
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[ReferentialConstraintsFieldOrIdValue[_]])(implicit c: Connection): List[ReferentialConstraintsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ReferentialConstraintsFieldValue.constraintCatalog(value) => NamedParameter("constraint_catalog", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.constraintSchema(value) => NamedParameter("constraint_schema", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.constraintName(value) => NamedParameter("constraint_name", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.uniqueConstraintCatalog(value) => NamedParameter("unique_constraint_catalog", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.uniqueConstraintSchema(value) => NamedParameter("unique_constraint_schema", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.uniqueConstraintName(value) => NamedParameter("unique_constraint_name", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.matchOption(value) => NamedParameter("match_option", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.updateRule(value) => NamedParameter("update_rule", ParameterValue.from(value))
          case ReferentialConstraintsFieldValue.deleteRule(value) => NamedParameter("delete_rule", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select "constraint_catalog", "constraint_schema", "constraint_name", unique_constraint_catalog, unique_constraint_schema, unique_constraint_name, match_option, update_rule, delete_rule
                    from information_schema.referential_constraints
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[ReferentialConstraintsRow] =
    RowParser[ReferentialConstraintsRow] { row =>
      Success(
        ReferentialConstraintsRow(
          constraintCatalog = row[Option[SqlIdentifier]]("constraint_catalog"),
          constraintSchema = row[Option[SqlIdentifier]]("constraint_schema"),
          constraintName = row[Option[SqlIdentifier]]("constraint_name"),
          uniqueConstraintCatalog = row[Option[SqlIdentifier]]("unique_constraint_catalog"),
          uniqueConstraintSchema = row[Option[SqlIdentifier]]("unique_constraint_schema"),
          uniqueConstraintName = row[Option[SqlIdentifier]]("unique_constraint_name"),
          matchOption = row[Option[CharacterData]]("match_option"),
          updateRule = row[Option[CharacterData]]("update_rule"),
          deleteRule = row[Option[CharacterData]]("delete_rule")
        )
      )
    }
}
