/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package views

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try
import typo.generated.pg_catalog.PgAttributeRow
import typo.generated.pg_catalog.PgClassRow

case class ViewColumnDependenciesRow(
  viewSchema: /* nullability unknown */ Option[/* regnamespace */ PGobject] /* {"columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"view_schema","columnName":"view_schema","columnType":"Other","columnTypeName":"regnamespace","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NullableUnknown","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0} */,
  /** Points to [[PgClassRow.relname]] */
  viewName: String /* {"baseColumnName":"relname","baseRelationName":"pg_catalog.pg_class","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"view_name","columnName":"view_name","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_class"} */,
  tableSchema: /* nullability unknown */ Option[/* regnamespace */ PGobject] /* {"columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"table_schema","columnName":"table_schema","columnType":"Other","columnTypeName":"regnamespace","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NullableUnknown","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0} */,
  /** Points to [[PgClassRow.relname]] */
  tableName: String /* {"baseColumnName":"relname","baseRelationName":"pg_catalog.pg_class","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"table_name","columnName":"table_name","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_class"} */,
  /** Points to [[PgAttributeRow.attname]] */
  columnName: String /* {"baseColumnName":"attname","baseRelationName":"pg_catalog.pg_attribute","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"column_name","columnName":"column_name","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_attribute"} */
)

object ViewColumnDependenciesRow {
  def rowParser(prefix: String): RowParser[ViewColumnDependenciesRow] = { row =>
    Success(
      ViewColumnDependenciesRow(
        viewSchema = row[/* nullability unknown */ Option[/* regnamespace */ PGobject]](prefix + "view_schema"),
        viewName = row[String](prefix + "view_name"),
        tableSchema = row[/* nullability unknown */ Option[/* regnamespace */ PGobject]](prefix + "table_schema"),
        tableName = row[String](prefix + "table_name"),
        columnName = row[String](prefix + "column_name")
      )
    )
  }

  implicit val oFormat: OFormat[ViewColumnDependenciesRow] = new OFormat[ViewColumnDependenciesRow]{
    override def writes(o: ViewColumnDependenciesRow): JsObject =
      Json.obj(
        "view_schema" -> o.viewSchema,
      "view_name" -> o.viewName,
      "table_schema" -> o.tableSchema,
      "table_name" -> o.tableName,
      "column_name" -> o.columnName
      )

    override def reads(json: JsValue): JsResult[ViewColumnDependenciesRow] = {
      JsResult.fromTry(
        Try(
          ViewColumnDependenciesRow(
            viewSchema = json.\("view_schema").toOption.map(_.as[/* regnamespace */ PGobject]),
            viewName = json.\("view_name").as[String],
            tableSchema = json.\("table_schema").toOption.map(_.as[/* regnamespace */ PGobject]),
            tableName = json.\("table_name").as[String],
            columnName = json.\("column_name").as[String]
          )
        )
      )
    }
  }
}
