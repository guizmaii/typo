/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_range

import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgRangeRowUnsaved(
  rngsubtype: /* oid */ Long,
  rngmultitypid: /* oid */ Long,
  rngcollation: /* oid */ Long,
  rngsubopc: /* oid */ Long,
  rngcanonical: /* regproc */ PGobject,
  rngsubdiff: /* regproc */ PGobject
)
object PgRangeRowUnsaved {
  implicit val oFormat: OFormat[PgRangeRowUnsaved] = new OFormat[PgRangeRowUnsaved]{
    override def writes(o: PgRangeRowUnsaved): JsObject =
      Json.obj(
        "rngsubtype" -> o.rngsubtype,
      "rngmultitypid" -> o.rngmultitypid,
      "rngcollation" -> o.rngcollation,
      "rngsubopc" -> o.rngsubopc,
      "rngcanonical" -> o.rngcanonical,
      "rngsubdiff" -> o.rngsubdiff
      )

    override def reads(json: JsValue): JsResult[PgRangeRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PgRangeRowUnsaved(
            rngsubtype = json.\("rngsubtype").as[/* oid */ Long],
            rngmultitypid = json.\("rngmultitypid").as[/* oid */ Long],
            rngcollation = json.\("rngcollation").as[/* oid */ Long],
            rngsubopc = json.\("rngsubopc").as[/* oid */ Long],
            rngcanonical = json.\("rngcanonical").as[/* regproc */ PGobject],
            rngsubdiff = json.\("rngsubdiff").as[/* regproc */ PGobject]
          )
        )
      )
    }
  }
}
