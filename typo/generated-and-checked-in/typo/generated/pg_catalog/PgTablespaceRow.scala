/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTablespaceRow(
  oid: PgTablespaceId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_tablespace","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  spcname: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_tablespace","column_name":"spcname","ordinal_position":2,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  spcowner: Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_tablespace","column_name":"spcowner","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  spcacl: Option[Array[PGobject]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_tablespace","column_name":"spcacl","ordinal_position":4,"is_nullable":"YES","data_type":"ARRAY","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_aclitem","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  spcoptions: Option[Array[String]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_tablespace","column_name":"spcoptions","ordinal_position":5,"is_nullable":"YES","data_type":"ARRAY","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_text","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgTablespaceRow {
  def rowParser(prefix: String): RowParser[PgTablespaceRow] = { row =>
    Success(
      PgTablespaceRow(
        oid = row[PgTablespaceId](prefix + "oid"),
        spcname = row[String](prefix + "spcname"),
        spcowner = row[Long](prefix + "spcowner"),
        spcacl = row[Option[Array[PGobject]]](prefix + "spcacl"),
        spcoptions = row[Option[Array[String]]](prefix + "spcoptions")
      )
    )
  }

  implicit val oFormat: OFormat[PgTablespaceRow] = new OFormat[PgTablespaceRow]{
    override def writes(o: PgTablespaceRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "spcname" -> o.spcname,
      "spcowner" -> o.spcowner,
      "spcacl" -> o.spcacl,
      "spcoptions" -> o.spcoptions
      )

    override def reads(json: JsValue): JsResult[PgTablespaceRow] = {
      JsResult.fromTry(
        Try(
          PgTablespaceRow(
            oid = json.\("oid").as[PgTablespaceId],
            spcname = json.\("spcname").as[String],
            spcowner = json.\("spcowner").as[Long],
            spcacl = json.\("spcacl").toOption.map(_.as[Array[PGobject]]),
            spcoptions = json.\("spcoptions").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
