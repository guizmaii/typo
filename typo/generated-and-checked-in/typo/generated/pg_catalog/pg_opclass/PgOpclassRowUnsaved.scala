/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_opclass

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgOpclassRowUnsaved(
  opcmethod: /* oid */ Long,
  opcname: String,
  opcnamespace: /* oid */ Long,
  opcowner: /* oid */ Long,
  opcfamily: /* oid */ Long,
  opcintype: /* oid */ Long,
  opcdefault: Boolean,
  opckeytype: /* oid */ Long
)
object PgOpclassRowUnsaved {
  implicit val oFormat: OFormat[PgOpclassRowUnsaved] = new OFormat[PgOpclassRowUnsaved]{
    override def writes(o: PgOpclassRowUnsaved): JsObject =
      Json.obj(
        "opcmethod" -> o.opcmethod,
      "opcname" -> o.opcname,
      "opcnamespace" -> o.opcnamespace,
      "opcowner" -> o.opcowner,
      "opcfamily" -> o.opcfamily,
      "opcintype" -> o.opcintype,
      "opcdefault" -> o.opcdefault,
      "opckeytype" -> o.opckeytype
      )

    override def reads(json: JsValue): JsResult[PgOpclassRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PgOpclassRowUnsaved(
            opcmethod = json.\("opcmethod").as[/* oid */ Long],
            opcname = json.\("opcname").as[String],
            opcnamespace = json.\("opcnamespace").as[/* oid */ Long],
            opcowner = json.\("opcowner").as[/* oid */ Long],
            opcfamily = json.\("opcfamily").as[/* oid */ Long],
            opcintype = json.\("opcintype").as[/* oid */ Long],
            opcdefault = json.\("opcdefault").as[Boolean],
            opckeytype = json.\("opckeytype").as[/* oid */ Long]
          )
        )
      )
    }
  }
}
