/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_collation

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import anorm.ToSql
import anorm.ToStatement
import java.sql.Connection
import java.sql.PreparedStatement

object PgCollationRepoImpl extends PgCollationRepo {
  override def delete(oid: PgCollationId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_collation where oid = $oid".executeUpdate() > 0
  }
  override def insert(oid: PgCollationId, unsaved: PgCollationRowUnsaved)(implicit c: Connection): Boolean = {
    SQL"""insert into pg_catalog.pg_collation(oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion)
          values (${oid}, ${unsaved.collname}, ${unsaved.collnamespace}, ${unsaved.collowner}, ${unsaved.collprovider}, ${unsaved.collisdeterministic}, ${unsaved.collencoding}, ${unsaved.collcollate}, ${unsaved.collctype}, ${unsaved.collversion})
       """.execute()
  
  }
  override def selectAll(implicit c: Connection): List[PgCollationRow] = {
    SQL"""select oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
          from pg_catalog.pg_collation
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PgCollationFieldOrIdValue[_]])(implicit c: Connection): List[PgCollationRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgCollationFieldValue.oid(value) => NamedParameter("oid", ParameterValue.from(value))
          case PgCollationFieldValue.collname(value) => NamedParameter("collname", ParameterValue.from(value))
          case PgCollationFieldValue.collnamespace(value) => NamedParameter("collnamespace", ParameterValue.from(value))
          case PgCollationFieldValue.collowner(value) => NamedParameter("collowner", ParameterValue.from(value))
          case PgCollationFieldValue.collprovider(value) => NamedParameter("collprovider", ParameterValue.from(value))
          case PgCollationFieldValue.collisdeterministic(value) => NamedParameter("collisdeterministic", ParameterValue.from(value))
          case PgCollationFieldValue.collencoding(value) => NamedParameter("collencoding", ParameterValue.from(value))
          case PgCollationFieldValue.collcollate(value) => NamedParameter("collcollate", ParameterValue.from(value))
          case PgCollationFieldValue.collctype(value) => NamedParameter("collctype", ParameterValue.from(value))
          case PgCollationFieldValue.collversion(value) => NamedParameter("collversion", ParameterValue.from(value))
        }
        val q = s"""select *
                    from pg_catalog.pg_collation
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(oid: PgCollationId)(implicit c: Connection): Option[PgCollationRow] = {
    SQL"""select oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
          from pg_catalog.pg_collation
          where oid = $oid
       """.as(rowParser.singleOpt)
  }
  override def selectByIds(oids: Array[PgCollationId])(implicit c: Connection): List[PgCollationRow] = {
    implicit val arrayToSql: ToSql[Array[PgCollationId]] = _ => ("?", 1) // fix wrong instance from anorm
    implicit val toStatement: ToStatement[Array[PgCollationId]] =
      (s: PreparedStatement, index: Int, v: Array[PgCollationId]) =>
        s.setArray(index, s.getConnection.createArrayOf("oid", v.map(x => x.value: java.lang.Long)))
    
    SQL"""select oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
          from pg_catalog.pg_collation
          where oid = ANY($oids)
       """.as(rowParser.*)
  
  }
  override def selectByUnique(collname: String, collencoding: Int, collnamespace: /* oid */ Long)(implicit c: Connection): Option[PgCollationRow] = {
    selectByFieldValues(List(PgCollationFieldValue.collname(collname), PgCollationFieldValue.collencoding(collencoding), PgCollationFieldValue.collnamespace(collnamespace))).headOption
  }
  override def update(row: PgCollationRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_collation
          set collname = ${row.collname},
              collnamespace = ${row.collnamespace},
              collowner = ${row.collowner},
              collprovider = ${row.collprovider},
              collisdeterministic = ${row.collisdeterministic},
              collencoding = ${row.collencoding},
              collcollate = ${row.collcollate},
              collctype = ${row.collctype},
              collversion = ${row.collversion}
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def updateFieldValues(oid: PgCollationId, fieldValues: List[PgCollationFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgCollationFieldValue.collname(value) => NamedParameter("collname", ParameterValue.from(value))
          case PgCollationFieldValue.collnamespace(value) => NamedParameter("collnamespace", ParameterValue.from(value))
          case PgCollationFieldValue.collowner(value) => NamedParameter("collowner", ParameterValue.from(value))
          case PgCollationFieldValue.collprovider(value) => NamedParameter("collprovider", ParameterValue.from(value))
          case PgCollationFieldValue.collisdeterministic(value) => NamedParameter("collisdeterministic", ParameterValue.from(value))
          case PgCollationFieldValue.collencoding(value) => NamedParameter("collencoding", ParameterValue.from(value))
          case PgCollationFieldValue.collcollate(value) => NamedParameter("collcollate", ParameterValue.from(value))
          case PgCollationFieldValue.collctype(value) => NamedParameter("collctype", ParameterValue.from(value))
          case PgCollationFieldValue.collversion(value) => NamedParameter("collversion", ParameterValue.from(value))
        }
        val q = s"""update pg_catalog.pg_collation
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where oid = $oid
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[PgCollationRow] =
    RowParser[PgCollationRow] { row =>
      Success(
        PgCollationRow(
          oid = row[PgCollationId]("oid"),
          collname = row[String]("collname"),
          collnamespace = row[/* oid */ Long]("collnamespace"),
          collowner = row[/* oid */ Long]("collowner"),
          collprovider = row[String]("collprovider"),
          collisdeterministic = row[Boolean]("collisdeterministic"),
          collencoding = row[Int]("collencoding"),
          collcollate = row[String]("collcollate"),
          collctype = row[String]("collctype"),
          collversion = row[Option[String]]("collversion")
        )
      )
    }
  val idRowParser: RowParser[PgCollationId] =
    SqlParser.get[PgCollationId]("oid")
}
