/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_cursors

import anorm.RowParser
import anorm.Success
import java.time.ZonedDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgCursorsRow(
  name: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_cursors","column_name":"name","ordinal_position":1,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  statement: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_cursors","column_name":"statement","ordinal_position":2,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isHoldable: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_cursors","column_name":"is_holdable","ordinal_position":3,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isBinary: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_cursors","column_name":"is_binary","ordinal_position":4,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isScrollable: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_cursors","column_name":"is_scrollable","ordinal_position":5,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  creationTime: Option[ZonedDateTime] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_cursors","column_name":"creation_time","ordinal_position":6,"is_nullable":"YES","data_type":"timestamp with time zone","datetime_precision":6,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"timestamptz","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object PgCursorsRow {
  def rowParser(prefix: String): RowParser[PgCursorsRow] = { row =>
    Success(
      PgCursorsRow(
        name = row[Option[String]](prefix + "name"),
        statement = row[Option[String]](prefix + "statement"),
        isHoldable = row[Option[Boolean]](prefix + "is_holdable"),
        isBinary = row[Option[Boolean]](prefix + "is_binary"),
        isScrollable = row[Option[Boolean]](prefix + "is_scrollable"),
        creationTime = row[Option[ZonedDateTime]](prefix + "creation_time")
      )
    )
  }

  implicit val oFormat: OFormat[PgCursorsRow] = new OFormat[PgCursorsRow]{
    override def writes(o: PgCursorsRow): JsObject =
      Json.obj(
        "name" -> o.name,
      "statement" -> o.statement,
      "is_holdable" -> o.isHoldable,
      "is_binary" -> o.isBinary,
      "is_scrollable" -> o.isScrollable,
      "creation_time" -> o.creationTime
      )

    override def reads(json: JsValue): JsResult[PgCursorsRow] = {
      JsResult.fromTry(
        Try(
          PgCursorsRow(
            name = json.\("name").toOption.map(_.as[String]),
            statement = json.\("statement").toOption.map(_.as[String]),
            isHoldable = json.\("is_holdable").toOption.map(_.as[Boolean]),
            isBinary = json.\("is_binary").toOption.map(_.as[Boolean]),
            isScrollable = json.\("is_scrollable").toOption.map(_.as[Boolean]),
            creationTime = json.\("creation_time").toOption.map(_.as[ZonedDateTime])
          )
        )
      )
    }
  }
}
