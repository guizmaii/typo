/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgDatabaseRow(
  oid: PgDatabaseId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datname: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datname","ordinal_position":2,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datdba: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datdba","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  encoding: Int /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"encoding","ordinal_position":4,"is_nullable":"NO","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datcollate: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datcollate","ordinal_position":5,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datctype: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datctype","ordinal_position":6,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datistemplate: Boolean /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datistemplate","ordinal_position":7,"is_nullable":"NO","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datallowconn: Boolean /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datallowconn","ordinal_position":8,"is_nullable":"NO","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datconnlimit: Int /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datconnlimit","ordinal_position":9,"is_nullable":"NO","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datlastsysoid: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datlastsysoid","ordinal_position":10,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datfrozenxid: /* xid */ PGobject /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datfrozenxid","ordinal_position":11,"is_nullable":"NO","data_type":"xid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"xid","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datminmxid: /* xid */ PGobject /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datminmxid","ordinal_position":12,"is_nullable":"NO","data_type":"xid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"xid","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  dattablespace: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"dattablespace","ordinal_position":13,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"13","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  datacl: Option[Array[/* aclitem */ PGobject]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_database","column_name":"datacl","ordinal_position":14,"is_nullable":"YES","data_type":"ARRAY","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_aclitem","dtd_identifier":"14","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgDatabaseRow {
  def rowParser(prefix: String): RowParser[PgDatabaseRow] = { row =>
    Success(
      PgDatabaseRow(
        oid = row[PgDatabaseId](prefix + "oid"),
        datname = row[String](prefix + "datname"),
        datdba = row[/* oid */ Long](prefix + "datdba"),
        encoding = row[Int](prefix + "encoding"),
        datcollate = row[String](prefix + "datcollate"),
        datctype = row[String](prefix + "datctype"),
        datistemplate = row[Boolean](prefix + "datistemplate"),
        datallowconn = row[Boolean](prefix + "datallowconn"),
        datconnlimit = row[Int](prefix + "datconnlimit"),
        datlastsysoid = row[/* oid */ Long](prefix + "datlastsysoid"),
        datfrozenxid = row[/* xid */ PGobject](prefix + "datfrozenxid"),
        datminmxid = row[/* xid */ PGobject](prefix + "datminmxid"),
        dattablespace = row[/* oid */ Long](prefix + "dattablespace"),
        datacl = row[Option[Array[/* aclitem */ PGobject]]](prefix + "datacl")
      )
    )
  }

  implicit val oFormat: OFormat[PgDatabaseRow] = new OFormat[PgDatabaseRow]{
    override def writes(o: PgDatabaseRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "datname" -> o.datname,
      "datdba" -> o.datdba,
      "encoding" -> o.encoding,
      "datcollate" -> o.datcollate,
      "datctype" -> o.datctype,
      "datistemplate" -> o.datistemplate,
      "datallowconn" -> o.datallowconn,
      "datconnlimit" -> o.datconnlimit,
      "datlastsysoid" -> o.datlastsysoid,
      "datfrozenxid" -> o.datfrozenxid,
      "datminmxid" -> o.datminmxid,
      "dattablespace" -> o.dattablespace,
      "datacl" -> o.datacl
      )

    override def reads(json: JsValue): JsResult[PgDatabaseRow] = {
      JsResult.fromTry(
        Try(
          PgDatabaseRow(
            oid = json.\("oid").as[PgDatabaseId],
            datname = json.\("datname").as[String],
            datdba = json.\("datdba").as[/* oid */ Long],
            encoding = json.\("encoding").as[Int],
            datcollate = json.\("datcollate").as[String],
            datctype = json.\("datctype").as[String],
            datistemplate = json.\("datistemplate").as[Boolean],
            datallowconn = json.\("datallowconn").as[Boolean],
            datconnlimit = json.\("datconnlimit").as[Int],
            datlastsysoid = json.\("datlastsysoid").as[/* oid */ Long],
            datfrozenxid = json.\("datfrozenxid").as[/* xid */ PGobject],
            datminmxid = json.\("datminmxid").as[/* xid */ PGobject],
            dattablespace = json.\("dattablespace").as[/* oid */ Long],
            datacl = json.\("datacl").toOption.map(_.as[Array[/* aclitem */ PGobject]])
          )
        )
      )
    }
  }
}
