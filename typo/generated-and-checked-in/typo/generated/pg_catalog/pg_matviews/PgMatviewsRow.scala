/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_matviews

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgMatviewsRow(
  schemaname: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_matviews","column_name":"schemaname","ordinal_position":1,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  matviewname: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_matviews","column_name":"matviewname","ordinal_position":2,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  matviewowner: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_matviews","column_name":"matviewowner","ordinal_position":3,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  tablespace: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_matviews","column_name":"tablespace","ordinal_position":4,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  hasindexes: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_matviews","column_name":"hasindexes","ordinal_position":5,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  ispopulated: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_matviews","column_name":"ispopulated","ordinal_position":6,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  definition: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_matviews","column_name":"definition","ordinal_position":7,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object PgMatviewsRow {
  def rowParser(prefix: String): RowParser[PgMatviewsRow] = { row =>
    Success(
      PgMatviewsRow(
        schemaname = row[Option[String]](prefix + "schemaname"),
        matviewname = row[Option[String]](prefix + "matviewname"),
        matviewowner = row[Option[String]](prefix + "matviewowner"),
        tablespace = row[Option[String]](prefix + "tablespace"),
        hasindexes = row[Option[Boolean]](prefix + "hasindexes"),
        ispopulated = row[Option[Boolean]](prefix + "ispopulated"),
        definition = row[Option[String]](prefix + "definition")
      )
    )
  }

  implicit val oFormat: OFormat[PgMatviewsRow] = new OFormat[PgMatviewsRow]{
    override def writes(o: PgMatviewsRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
      "matviewname" -> o.matviewname,
      "matviewowner" -> o.matviewowner,
      "tablespace" -> o.tablespace,
      "hasindexes" -> o.hasindexes,
      "ispopulated" -> o.ispopulated,
      "definition" -> o.definition
      )

    override def reads(json: JsValue): JsResult[PgMatviewsRow] = {
      JsResult.fromTry(
        Try(
          PgMatviewsRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            matviewname = json.\("matviewname").toOption.map(_.as[String]),
            matviewowner = json.\("matviewowner").toOption.map(_.as[String]),
            tablespace = json.\("tablespace").toOption.map(_.as[String]),
            hasindexes = json.\("hasindexes").toOption.map(_.as[Boolean]),
            ispopulated = json.\("ispopulated").toOption.map(_.as[Boolean]),
            definition = json.\("definition").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
