/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_foreign_server

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgForeignServerRow(
  oid: PgForeignServerId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  srvname: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"srvname","ordinal_position":2,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  srvowner: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"srvowner","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  srvfdw: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"srvfdw","ordinal_position":4,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  srvtype: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"srvtype","ordinal_position":5,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  srvversion: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"srvversion","ordinal_position":6,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  srvacl: Option[Array[/* aclitem */ PGobject]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"srvacl","ordinal_position":7,"is_nullable":"YES","data_type":"ARRAY","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_aclitem","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  srvoptions: Option[Array[String]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_server","column_name":"srvoptions","ordinal_position":8,"is_nullable":"YES","data_type":"ARRAY","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_text","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgForeignServerRow {
  def rowParser(prefix: String): RowParser[PgForeignServerRow] = { row =>
    Success(
      PgForeignServerRow(
        oid = row[PgForeignServerId](prefix + "oid"),
        srvname = row[String](prefix + "srvname"),
        srvowner = row[/* oid */ Long](prefix + "srvowner"),
        srvfdw = row[/* oid */ Long](prefix + "srvfdw"),
        srvtype = row[Option[String]](prefix + "srvtype"),
        srvversion = row[Option[String]](prefix + "srvversion"),
        srvacl = row[Option[Array[/* aclitem */ PGobject]]](prefix + "srvacl"),
        srvoptions = row[Option[Array[String]]](prefix + "srvoptions")
      )
    )
  }

  implicit val oFormat: OFormat[PgForeignServerRow] = new OFormat[PgForeignServerRow]{
    override def writes(o: PgForeignServerRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "srvname" -> o.srvname,
      "srvowner" -> o.srvowner,
      "srvfdw" -> o.srvfdw,
      "srvtype" -> o.srvtype,
      "srvversion" -> o.srvversion,
      "srvacl" -> o.srvacl,
      "srvoptions" -> o.srvoptions
      )

    override def reads(json: JsValue): JsResult[PgForeignServerRow] = {
      JsResult.fromTry(
        Try(
          PgForeignServerRow(
            oid = json.\("oid").as[PgForeignServerId],
            srvname = json.\("srvname").as[String],
            srvowner = json.\("srvowner").as[/* oid */ Long],
            srvfdw = json.\("srvfdw").as[/* oid */ Long],
            srvtype = json.\("srvtype").toOption.map(_.as[String]),
            srvversion = json.\("srvversion").toOption.map(_.as[String]),
            srvacl = json.\("srvacl").toOption.map(_.as[Array[/* aclitem */ PGobject]]),
            srvoptions = json.\("srvoptions").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
