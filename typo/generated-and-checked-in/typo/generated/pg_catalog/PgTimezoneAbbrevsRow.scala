/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGInterval
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTimezoneAbbrevsRow(
  abbrev: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_timezone_abbrevs","column_name":"abbrev","ordinal_position":1,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  utcOffset: Option[PGInterval] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_timezone_abbrevs","column_name":"utc_offset","ordinal_position":2,"is_nullable":"YES","data_type":"interval","datetime_precision":6,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"interval","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  isDst: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_timezone_abbrevs","column_name":"is_dst","ordinal_position":3,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object PgTimezoneAbbrevsRow {
  def rowParser(prefix: String): RowParser[PgTimezoneAbbrevsRow] = { row =>
    Success(
      PgTimezoneAbbrevsRow(
        abbrev = row[Option[String]](prefix + "abbrev"),
        utcOffset = row[Option[PGInterval]](prefix + "utc_offset"),
        isDst = row[Option[Boolean]](prefix + "is_dst")
      )
    )
  }

  implicit val oFormat: OFormat[PgTimezoneAbbrevsRow] = new OFormat[PgTimezoneAbbrevsRow]{
    override def writes(o: PgTimezoneAbbrevsRow): JsObject =
      Json.obj(
        "abbrev" -> o.abbrev,
      "utc_offset" -> o.utcOffset,
      "is_dst" -> o.isDst
      )

    override def reads(json: JsValue): JsResult[PgTimezoneAbbrevsRow] = {
      JsResult.fromTry(
        Try(
          PgTimezoneAbbrevsRow(
            abbrev = json.\("abbrev").toOption.map(_.as[String]),
            utcOffset = json.\("utc_offset").toOption.map(_.as[PGInterval]),
            isDst = json.\("is_dst").toOption.map(_.as[Boolean])
          )
        )
      )
    }
  }
}
