/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_transform

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTransformRow(
  oid: PgTransformId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_transform","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  trftype: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_transform","column_name":"trftype","ordinal_position":2,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  trflang: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_transform","column_name":"trflang","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  trffromsql: /* regproc */ PGobject /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_transform","column_name":"trffromsql","ordinal_position":4,"is_nullable":"NO","data_type":"regproc","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"regproc","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  trftosql: /* regproc */ PGobject /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_transform","column_name":"trftosql","ordinal_position":5,"is_nullable":"NO","data_type":"regproc","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"regproc","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgTransformRow {
  def rowParser(prefix: String): RowParser[PgTransformRow] = { row =>
    Success(
      PgTransformRow(
        oid = row[PgTransformId](prefix + "oid"),
        trftype = row[/* oid */ Long](prefix + "trftype"),
        trflang = row[/* oid */ Long](prefix + "trflang"),
        trffromsql = row[/* regproc */ PGobject](prefix + "trffromsql"),
        trftosql = row[/* regproc */ PGobject](prefix + "trftosql")
      )
    )
  }

  implicit val oFormat: OFormat[PgTransformRow] = new OFormat[PgTransformRow]{
    override def writes(o: PgTransformRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "trftype" -> o.trftype,
      "trflang" -> o.trflang,
      "trffromsql" -> o.trffromsql,
      "trftosql" -> o.trftosql
      )

    override def reads(json: JsValue): JsResult[PgTransformRow] = {
      JsResult.fromTry(
        Try(
          PgTransformRow(
            oid = json.\("oid").as[PgTransformId],
            trftype = json.\("trftype").as[/* oid */ Long],
            trflang = json.\("trflang").as[/* oid */ Long],
            trffromsql = json.\("trffromsql").as[/* regproc */ PGobject],
            trftosql = json.\("trftosql").as[/* regproc */ PGobject]
          )
        )
      )
    }
  }
}
