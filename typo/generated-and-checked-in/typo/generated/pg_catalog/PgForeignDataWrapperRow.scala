/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgForeignDataWrapperRow(
  oid: PgForeignDataWrapperId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_data_wrapper","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  fdwname: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_data_wrapper","column_name":"fdwname","ordinal_position":2,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  fdwowner: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_data_wrapper","column_name":"fdwowner","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  fdwhandler: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_data_wrapper","column_name":"fdwhandler","ordinal_position":4,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  fdwvalidator: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_data_wrapper","column_name":"fdwvalidator","ordinal_position":5,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  fdwacl: Option[Array[/* aclitem */ PGobject]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_data_wrapper","column_name":"fdwacl","ordinal_position":6,"is_nullable":"YES","data_type":"ARRAY","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_aclitem","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  fdwoptions: Option[Array[String]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_foreign_data_wrapper","column_name":"fdwoptions","ordinal_position":7,"is_nullable":"YES","data_type":"ARRAY","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_text","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgForeignDataWrapperRow {
  def rowParser(prefix: String): RowParser[PgForeignDataWrapperRow] = { row =>
    Success(
      PgForeignDataWrapperRow(
        oid = row[PgForeignDataWrapperId](prefix + "oid"),
        fdwname = row[String](prefix + "fdwname"),
        fdwowner = row[/* oid */ Long](prefix + "fdwowner"),
        fdwhandler = row[/* oid */ Long](prefix + "fdwhandler"),
        fdwvalidator = row[/* oid */ Long](prefix + "fdwvalidator"),
        fdwacl = row[Option[Array[/* aclitem */ PGobject]]](prefix + "fdwacl"),
        fdwoptions = row[Option[Array[String]]](prefix + "fdwoptions")
      )
    )
  }

  implicit val oFormat: OFormat[PgForeignDataWrapperRow] = new OFormat[PgForeignDataWrapperRow]{
    override def writes(o: PgForeignDataWrapperRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "fdwname" -> o.fdwname,
      "fdwowner" -> o.fdwowner,
      "fdwhandler" -> o.fdwhandler,
      "fdwvalidator" -> o.fdwvalidator,
      "fdwacl" -> o.fdwacl,
      "fdwoptions" -> o.fdwoptions
      )

    override def reads(json: JsValue): JsResult[PgForeignDataWrapperRow] = {
      JsResult.fromTry(
        Try(
          PgForeignDataWrapperRow(
            oid = json.\("oid").as[PgForeignDataWrapperId],
            fdwname = json.\("fdwname").as[String],
            fdwowner = json.\("fdwowner").as[/* oid */ Long],
            fdwhandler = json.\("fdwhandler").as[/* oid */ Long],
            fdwvalidator = json.\("fdwvalidator").as[/* oid */ Long],
            fdwacl = json.\("fdwacl").toOption.map(_.as[Array[/* aclitem */ PGobject]]),
            fdwoptions = json.\("fdwoptions").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
