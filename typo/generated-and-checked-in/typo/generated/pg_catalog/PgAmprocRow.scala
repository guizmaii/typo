/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAmprocRow(
  oid: PgAmprocId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_amproc","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  amprocfamily: Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_amproc","column_name":"amprocfamily","ordinal_position":2,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  amproclefttype: Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_amproc","column_name":"amproclefttype","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  amprocrighttype: Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_amproc","column_name":"amprocrighttype","ordinal_position":4,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  amprocnum: Int /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_amproc","column_name":"amprocnum","ordinal_position":5,"is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  amproc: PGobject /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_amproc","column_name":"amproc","ordinal_position":6,"is_nullable":"NO","data_type":"regproc","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"regproc","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgAmprocRow {
  implicit val rowParser: RowParser[PgAmprocRow] = { row =>
    Success(
      PgAmprocRow(
        oid = row[PgAmprocId]("oid"),
        amprocfamily = row[Long]("amprocfamily"),
        amproclefttype = row[Long]("amproclefttype"),
        amprocrighttype = row[Long]("amprocrighttype"),
        amprocnum = row[Int]("amprocnum"),
        amproc = row[PGobject]("amproc")
      )
    )
  }

  implicit val oFormat: OFormat[PgAmprocRow] = new OFormat[PgAmprocRow]{
    override def writes(o: PgAmprocRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "amprocfamily" -> o.amprocfamily,
      "amproclefttype" -> o.amproclefttype,
      "amprocrighttype" -> o.amprocrighttype,
      "amprocnum" -> o.amprocnum,
      "amproc" -> o.amproc
      )

    override def reads(json: JsValue): JsResult[PgAmprocRow] = {
      JsResult.fromTry(
        Try(
          PgAmprocRow(
            oid = json.\("oid").as[PgAmprocId],
            amprocfamily = json.\("amprocfamily").as[Long],
            amproclefttype = json.\("amproclefttype").as[Long],
            amprocrighttype = json.\("amprocrighttype").as[Long],
            amprocnum = json.\("amprocnum").as[Int],
            amproc = json.\("amproc").as[PGobject]
          )
        )
      )
    }
  }
}
