/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_operator

import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgOperatorRowUnsaved(
  oprname: String,
  oprnamespace: /* oid */ Long,
  oprowner: /* oid */ Long,
  oprkind: String,
  oprcanmerge: Boolean,
  oprcanhash: Boolean,
  oprleft: /* oid */ Long,
  oprright: /* oid */ Long,
  oprresult: /* oid */ Long,
  oprcom: /* oid */ Long,
  oprnegate: /* oid */ Long,
  oprcode: /* regproc */ PGobject,
  oprrest: /* regproc */ PGobject,
  oprjoin: /* regproc */ PGobject
)
object PgOperatorRowUnsaved {
  implicit val oFormat: OFormat[PgOperatorRowUnsaved] = new OFormat[PgOperatorRowUnsaved]{
    override def writes(o: PgOperatorRowUnsaved): JsObject =
      Json.obj(
        "oprname" -> o.oprname,
      "oprnamespace" -> o.oprnamespace,
      "oprowner" -> o.oprowner,
      "oprkind" -> o.oprkind,
      "oprcanmerge" -> o.oprcanmerge,
      "oprcanhash" -> o.oprcanhash,
      "oprleft" -> o.oprleft,
      "oprright" -> o.oprright,
      "oprresult" -> o.oprresult,
      "oprcom" -> o.oprcom,
      "oprnegate" -> o.oprnegate,
      "oprcode" -> o.oprcode,
      "oprrest" -> o.oprrest,
      "oprjoin" -> o.oprjoin
      )

    override def reads(json: JsValue): JsResult[PgOperatorRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PgOperatorRowUnsaved(
            oprname = json.\("oprname").as[String],
            oprnamespace = json.\("oprnamespace").as[/* oid */ Long],
            oprowner = json.\("oprowner").as[/* oid */ Long],
            oprkind = json.\("oprkind").as[String],
            oprcanmerge = json.\("oprcanmerge").as[Boolean],
            oprcanhash = json.\("oprcanhash").as[Boolean],
            oprleft = json.\("oprleft").as[/* oid */ Long],
            oprright = json.\("oprright").as[/* oid */ Long],
            oprresult = json.\("oprresult").as[/* oid */ Long],
            oprcom = json.\("oprcom").as[/* oid */ Long],
            oprnegate = json.\("oprnegate").as[/* oid */ Long],
            oprcode = json.\("oprcode").as[/* regproc */ PGobject],
            oprrest = json.\("oprrest").as[/* regproc */ PGobject],
            oprjoin = json.\("oprjoin").as[/* regproc */ PGobject]
          )
        )
      )
    }
  }
}
