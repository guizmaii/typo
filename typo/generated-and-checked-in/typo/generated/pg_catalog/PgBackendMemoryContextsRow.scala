/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgBackendMemoryContextsRow(
  name: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"name","ordinal_position":1,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  ident: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"ident","ordinal_position":2,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  parent: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"parent","ordinal_position":3,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  level: Option[Int] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"level","ordinal_position":4,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  totalBytes: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"total_bytes","ordinal_position":5,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  totalNblocks: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"total_nblocks","ordinal_position":6,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  freeBytes: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"free_bytes","ordinal_position":7,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  freeChunks: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"free_chunks","ordinal_position":8,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  usedBytes: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_backend_memory_contexts","column_name":"used_bytes","ordinal_position":9,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object PgBackendMemoryContextsRow {
  def rowParser(prefix: String): RowParser[PgBackendMemoryContextsRow] = { row =>
    Success(
      PgBackendMemoryContextsRow(
        name = row[Option[String]](prefix + "name"),
        ident = row[Option[String]](prefix + "ident"),
        parent = row[Option[String]](prefix + "parent"),
        level = row[Option[Int]](prefix + "level"),
        totalBytes = row[Option[Long]](prefix + "total_bytes"),
        totalNblocks = row[Option[Long]](prefix + "total_nblocks"),
        freeBytes = row[Option[Long]](prefix + "free_bytes"),
        freeChunks = row[Option[Long]](prefix + "free_chunks"),
        usedBytes = row[Option[Long]](prefix + "used_bytes")
      )
    )
  }

  implicit val oFormat: OFormat[PgBackendMemoryContextsRow] = new OFormat[PgBackendMemoryContextsRow]{
    override def writes(o: PgBackendMemoryContextsRow): JsObject =
      Json.obj(
        "name" -> o.name,
      "ident" -> o.ident,
      "parent" -> o.parent,
      "level" -> o.level,
      "total_bytes" -> o.totalBytes,
      "total_nblocks" -> o.totalNblocks,
      "free_bytes" -> o.freeBytes,
      "free_chunks" -> o.freeChunks,
      "used_bytes" -> o.usedBytes
      )

    override def reads(json: JsValue): JsResult[PgBackendMemoryContextsRow] = {
      JsResult.fromTry(
        Try(
          PgBackendMemoryContextsRow(
            name = json.\("name").toOption.map(_.as[String]),
            ident = json.\("ident").toOption.map(_.as[String]),
            parent = json.\("parent").toOption.map(_.as[String]),
            level = json.\("level").toOption.map(_.as[Int]),
            totalBytes = json.\("total_bytes").toOption.map(_.as[Long]),
            totalNblocks = json.\("total_nblocks").toOption.map(_.as[Long]),
            freeBytes = json.\("free_bytes").toOption.map(_.as[Long]),
            freeChunks = json.\("free_chunks").toOption.map(_.as[Long]),
            usedBytes = json.\("used_bytes").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
