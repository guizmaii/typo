/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_namespace

import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgNamespaceRowUnsaved(
  nspname: String,
  nspowner: /* oid */ Long,
  nspacl: Option[Array[/* aclitem */ PGobject]]
)
object PgNamespaceRowUnsaved {
  implicit val oFormat: OFormat[PgNamespaceRowUnsaved] = new OFormat[PgNamespaceRowUnsaved]{
    override def writes(o: PgNamespaceRowUnsaved): JsObject =
      Json.obj(
        "nspname" -> o.nspname,
        "nspowner" -> o.nspowner,
        "nspacl" -> o.nspacl
      )
  
    override def reads(json: JsValue): JsResult[PgNamespaceRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PgNamespaceRowUnsaved(
            nspname = json.\("nspname").as[String],
            nspowner = json.\("nspowner").as[/* oid */ Long],
            nspacl = json.\("nspacl").toOption.map(_.as[Array[/* aclitem */ PGobject]])
          )
        )
      )
    }
  }
}
