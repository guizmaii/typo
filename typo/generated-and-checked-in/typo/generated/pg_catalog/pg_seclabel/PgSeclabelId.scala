/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_seclabel

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgSeclabelId(objoid: /* oid */ Long, classoid: /* oid */ Long, objsubid: Int, provider: String)
object PgSeclabelId {
  implicit def ordering: Ordering[PgSeclabelId] = Ordering.by(x => (x.objoid, x.classoid, x.objsubid, x.provider))
  implicit val oFormat: OFormat[PgSeclabelId] = new OFormat[PgSeclabelId]{
    override def writes(o: PgSeclabelId): JsObject =
      Json.obj(
        "objoid" -> o.objoid,
      "classoid" -> o.classoid,
      "objsubid" -> o.objsubid,
      "provider" -> o.provider
      )

    override def reads(json: JsValue): JsResult[PgSeclabelId] = {
      JsResult.fromTry(
        Try(
          PgSeclabelId(
            objoid = json.\("objoid").as[/* oid */ Long],
            classoid = json.\("classoid").as[/* oid */ Long],
            objsubid = json.\("objsubid").as[Int],
            provider = json.\("provider").as[String]
          )
        )
      )
    }
  }
  def rowParser(prefix: String): RowParser[PgSeclabelId] = { row =>
    Success(
      PgSeclabelId(
        objoid = row[/* oid */ Long](prefix + "objoid"),
        classoid = row[/* oid */ Long](prefix + "classoid"),
        objsubid = row[Int](prefix + "objsubid"),
        provider = row[String](prefix + "provider")
      )
    )
  }

}
