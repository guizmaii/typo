/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgSequencesRow(
  schemaname: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"schemaname","ordinal_position":1,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  sequencename: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"sequencename","ordinal_position":2,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  sequenceowner: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"sequenceowner","ordinal_position":3,"is_nullable":"YES","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  dataType: Option[PGobject] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"data_type","ordinal_position":4,"is_nullable":"YES","data_type":"regtype","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"regtype","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  startValue: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"start_value","ordinal_position":5,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  minValue: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"min_value","ordinal_position":6,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  maxValue: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"max_value","ordinal_position":7,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  incrementBy: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"increment_by","ordinal_position":8,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  cycle: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"cycle","ordinal_position":9,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  cacheSize: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"cache_size","ordinal_position":10,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  lastValue: Option[Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_sequences","column_name":"last_value","ordinal_position":11,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object PgSequencesRow {
  implicit val rowParser: RowParser[PgSequencesRow] = { row =>
    Success(
      PgSequencesRow(
        schemaname = row[Option[String]]("schemaname"),
        sequencename = row[Option[String]]("sequencename"),
        sequenceowner = row[Option[String]]("sequenceowner"),
        dataType = row[Option[PGobject]]("data_type"),
        startValue = row[Option[Long]]("start_value"),
        minValue = row[Option[Long]]("min_value"),
        maxValue = row[Option[Long]]("max_value"),
        incrementBy = row[Option[Long]]("increment_by"),
        cycle = row[Option[Boolean]]("cycle"),
        cacheSize = row[Option[Long]]("cache_size"),
        lastValue = row[Option[Long]]("last_value")
      )
    )
  }

  implicit val oFormat: OFormat[PgSequencesRow] = new OFormat[PgSequencesRow]{
    override def writes(o: PgSequencesRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
      "sequencename" -> o.sequencename,
      "sequenceowner" -> o.sequenceowner,
      "data_type" -> o.dataType,
      "start_value" -> o.startValue,
      "min_value" -> o.minValue,
      "max_value" -> o.maxValue,
      "increment_by" -> o.incrementBy,
      "cycle" -> o.cycle,
      "cache_size" -> o.cacheSize,
      "last_value" -> o.lastValue
      )

    override def reads(json: JsValue): JsResult[PgSequencesRow] = {
      JsResult.fromTry(
        Try(
          PgSequencesRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            sequencename = json.\("sequencename").toOption.map(_.as[String]),
            sequenceowner = json.\("sequenceowner").toOption.map(_.as[String]),
            dataType = json.\("data_type").toOption.map(_.as[PGobject]),
            startValue = json.\("start_value").toOption.map(_.as[Long]),
            minValue = json.\("min_value").toOption.map(_.as[Long]),
            maxValue = json.\("max_value").toOption.map(_.as[Long]),
            incrementBy = json.\("increment_by").toOption.map(_.as[Long]),
            cycle = json.\("cycle").toOption.map(_.as[Boolean]),
            cacheSize = json.\("cache_size").toOption.map(_.as[Long]),
            lastValue = json.\("last_value").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
