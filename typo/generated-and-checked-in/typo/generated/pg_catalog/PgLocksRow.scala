/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import java.time.ZonedDateTime
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgLocksRow(
  locktype: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"locktype","ordinal_position":1,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  database: Option[/* oid */ Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"database","ordinal_position":2,"is_nullable":"YES","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  relation: Option[/* oid */ Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"relation","ordinal_position":3,"is_nullable":"YES","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  page: Option[Int] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"page","ordinal_position":4,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  tuple: Option[Int] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"tuple","ordinal_position":5,"is_nullable":"YES","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  virtualxid: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"virtualxid","ordinal_position":6,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  transactionid: Option[/* xid */ PGobject] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"transactionid","ordinal_position":7,"is_nullable":"YES","data_type":"xid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"xid","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  classid: Option[/* oid */ Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"classid","ordinal_position":8,"is_nullable":"YES","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  objid: Option[/* oid */ Long] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"objid","ordinal_position":9,"is_nullable":"YES","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  objsubid: Option[Int] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"objsubid","ordinal_position":10,"is_nullable":"YES","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  virtualtransaction: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"virtualtransaction","ordinal_position":11,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  pid: Option[Int] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"pid","ordinal_position":12,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  mode: Option[String] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"mode","ordinal_position":13,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"13","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  granted: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"granted","ordinal_position":14,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"14","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  fastpath: Option[Boolean] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"fastpath","ordinal_position":15,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"15","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  waitstart: Option[ZonedDateTime] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_locks","column_name":"waitstart","ordinal_position":16,"is_nullable":"YES","data_type":"timestamp with time zone","datetime_precision":6,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"timestamptz","dtd_identifier":"16","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object PgLocksRow {
  def rowParser(prefix: String): RowParser[PgLocksRow] = { row =>
    Success(
      PgLocksRow(
        locktype = row[Option[String]](prefix + "locktype"),
        database = row[Option[/* oid */ Long]](prefix + "database"),
        relation = row[Option[/* oid */ Long]](prefix + "relation"),
        page = row[Option[Int]](prefix + "page"),
        tuple = row[Option[Int]](prefix + "tuple"),
        virtualxid = row[Option[String]](prefix + "virtualxid"),
        transactionid = row[Option[/* xid */ PGobject]](prefix + "transactionid"),
        classid = row[Option[/* oid */ Long]](prefix + "classid"),
        objid = row[Option[/* oid */ Long]](prefix + "objid"),
        objsubid = row[Option[Int]](prefix + "objsubid"),
        virtualtransaction = row[Option[String]](prefix + "virtualtransaction"),
        pid = row[Option[Int]](prefix + "pid"),
        mode = row[Option[String]](prefix + "mode"),
        granted = row[Option[Boolean]](prefix + "granted"),
        fastpath = row[Option[Boolean]](prefix + "fastpath"),
        waitstart = row[Option[ZonedDateTime]](prefix + "waitstart")
      )
    )
  }

  implicit val oFormat: OFormat[PgLocksRow] = new OFormat[PgLocksRow]{
    override def writes(o: PgLocksRow): JsObject =
      Json.obj(
        "locktype" -> o.locktype,
      "database" -> o.database,
      "relation" -> o.relation,
      "page" -> o.page,
      "tuple" -> o.tuple,
      "virtualxid" -> o.virtualxid,
      "transactionid" -> o.transactionid,
      "classid" -> o.classid,
      "objid" -> o.objid,
      "objsubid" -> o.objsubid,
      "virtualtransaction" -> o.virtualtransaction,
      "pid" -> o.pid,
      "mode" -> o.mode,
      "granted" -> o.granted,
      "fastpath" -> o.fastpath,
      "waitstart" -> o.waitstart
      )

    override def reads(json: JsValue): JsResult[PgLocksRow] = {
      JsResult.fromTry(
        Try(
          PgLocksRow(
            locktype = json.\("locktype").toOption.map(_.as[String]),
            database = json.\("database").toOption.map(_.as[/* oid */ Long]),
            relation = json.\("relation").toOption.map(_.as[/* oid */ Long]),
            page = json.\("page").toOption.map(_.as[Int]),
            tuple = json.\("tuple").toOption.map(_.as[Int]),
            virtualxid = json.\("virtualxid").toOption.map(_.as[String]),
            transactionid = json.\("transactionid").toOption.map(_.as[/* xid */ PGobject]),
            classid = json.\("classid").toOption.map(_.as[/* oid */ Long]),
            objid = json.\("objid").toOption.map(_.as[/* oid */ Long]),
            objsubid = json.\("objsubid").toOption.map(_.as[Int]),
            virtualtransaction = json.\("virtualtransaction").toOption.map(_.as[String]),
            pid = json.\("pid").toOption.map(_.as[Int]),
            mode = json.\("mode").toOption.map(_.as[String]),
            granted = json.\("granted").toOption.map(_.as[Boolean]),
            fastpath = json.\("fastpath").toOption.map(_.as[Boolean]),
            waitstart = json.\("waitstart").toOption.map(_.as[ZonedDateTime])
          )
        )
      )
    }
  }
}
