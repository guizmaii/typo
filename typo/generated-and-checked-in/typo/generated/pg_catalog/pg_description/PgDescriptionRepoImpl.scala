/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_description

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection

object PgDescriptionRepoImpl extends PgDescriptionRepo {
  override def delete(compositeId: PgDescriptionId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_description where objoid = ${compositeId.objoid} AND classoid = ${compositeId.classoid} AND objsubid = ${compositeId.objsubid}".executeUpdate() > 0
  }
  override def insert(compositeId: PgDescriptionId, unsaved: PgDescriptionRowUnsaved)(implicit c: Connection): PgDescriptionRow = {
    SQL"""insert into pg_catalog.pg_description(objoid, classoid, objsubid, description)
          values (${compositeId.objoid}::oid, ${compositeId.classoid}::oid, ${compositeId.objsubid}::int4, ${unsaved.description})
          returning objoid, classoid, objsubid, description
       """
      .executeInsert(rowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[PgDescriptionRow] = {
    SQL"""select objoid, classoid, objsubid, description
          from pg_catalog.pg_description
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PgDescriptionFieldOrIdValue[_]])(implicit c: Connection): List[PgDescriptionRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgDescriptionFieldValue.objoid(value) => NamedParameter("objoid", ParameterValue.from(value))
          case PgDescriptionFieldValue.classoid(value) => NamedParameter("classoid", ParameterValue.from(value))
          case PgDescriptionFieldValue.objsubid(value) => NamedParameter("objsubid", ParameterValue.from(value))
          case PgDescriptionFieldValue.description(value) => NamedParameter("description", ParameterValue.from(value))
        }
        val q = s"""select objoid, classoid, objsubid, description
                    from pg_catalog.pg_description
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: PgDescriptionId)(implicit c: Connection): Option[PgDescriptionRow] = {
    SQL"""select objoid, classoid, objsubid, description
          from pg_catalog.pg_description
          where objoid = ${compositeId.objoid} AND classoid = ${compositeId.classoid} AND objsubid = ${compositeId.objsubid}
       """.as(rowParser.singleOpt)
  }
  override def update(row: PgDescriptionRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update pg_catalog.pg_description
          set description = ${row.description}
          where objoid = ${compositeId.objoid} AND classoid = ${compositeId.classoid} AND objsubid = ${compositeId.objsubid}
       """.executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: PgDescriptionId, fieldValues: List[PgDescriptionFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgDescriptionFieldValue.description(value) => NamedParameter("description", ParameterValue.from(value))
        }
        val q = s"""update pg_catalog.pg_description
                    set ${namedParams.map(x => s"\"${x.name}\" = {${x.name}}").mkString(", ")}
                    where objoid = {objoid} AND classoid = {classoid} AND objsubid = {objsubid}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("objoid", ParameterValue.from(compositeId.objoid)), NamedParameter("classoid", ParameterValue.from(compositeId.classoid)), NamedParameter("objsubid", ParameterValue.from(compositeId.objsubid)))
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[PgDescriptionRow] =
    RowParser[PgDescriptionRow] { row =>
      Success(
        PgDescriptionRow(
          objoid = row[/* oid */ Long]("objoid"),
          classoid = row[/* oid */ Long]("classoid"),
          objsubid = row[Int]("objsubid"),
          description = row[String]("description")
        )
      )
    }
}
