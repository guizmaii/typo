/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object PgShdependRepoImpl extends PgShdependRepo {
  override def selectAll(implicit c: Connection): List[PgShdependRow] = {
    SQL"""select dbid, classid, objid, objsubid, refclassid, refobjid, deptype from pg_catalog.pg_shdepend""".as(PgShdependRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[PgShdependFieldValue[_]])(implicit c: Connection): List[PgShdependRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgShdependFieldValue.dbid(value) => NamedParameter("dbid", ParameterValue.from(value))
          case PgShdependFieldValue.classid(value) => NamedParameter("classid", ParameterValue.from(value))
          case PgShdependFieldValue.objid(value) => NamedParameter("objid", ParameterValue.from(value))
          case PgShdependFieldValue.objsubid(value) => NamedParameter("objsubid", ParameterValue.from(value))
          case PgShdependFieldValue.refclassid(value) => NamedParameter("refclassid", ParameterValue.from(value))
          case PgShdependFieldValue.refobjid(value) => NamedParameter("refobjid", ParameterValue.from(value))
          case PgShdependFieldValue.deptype(value) => NamedParameter("deptype", ParameterValue.from(value))
        }
        val q = s"""select * from pg_catalog.pg_shdepend where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(PgShdependRow.rowParser("").*)
    }

  }
}
