/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_stat_user_functions

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object PgStatUserFunctionsRepoImpl extends PgStatUserFunctionsRepo {
  override def selectAll(implicit c: Connection): List[PgStatUserFunctionsRow] = {
    SQL"""select funcid, schemaname, funcname, calls, total_time, self_time from pg_catalog.pg_stat_user_functions""".as(PgStatUserFunctionsRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[PgStatUserFunctionsFieldValue[_]])(implicit c: Connection): List[PgStatUserFunctionsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgStatUserFunctionsFieldValue.funcid(value) => NamedParameter("funcid", ParameterValue.from(value))
          case PgStatUserFunctionsFieldValue.schemaname(value) => NamedParameter("schemaname", ParameterValue.from(value))
          case PgStatUserFunctionsFieldValue.funcname(value) => NamedParameter("funcname", ParameterValue.from(value))
          case PgStatUserFunctionsFieldValue.calls(value) => NamedParameter("calls", ParameterValue.from(value))
          case PgStatUserFunctionsFieldValue.totalTime(value) => NamedParameter("total_time", ParameterValue.from(value))
          case PgStatUserFunctionsFieldValue.selfTime(value) => NamedParameter("self_time", ParameterValue.from(value))
        }
        val q = s"""select * from pg_catalog.pg_stat_user_functions where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(PgStatUserFunctionsRow.rowParser("").*)
    }

  }
}
