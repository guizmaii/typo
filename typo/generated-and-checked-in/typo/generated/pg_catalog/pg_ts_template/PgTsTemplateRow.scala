/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_ts_template

import anorm.RowParser
import anorm.Success
import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTsTemplateRow(
  oid: PgTsTemplateId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_ts_template","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  tmplname: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_ts_template","column_name":"tmplname","ordinal_position":2,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  tmplnamespace: /* oid */ Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_ts_template","column_name":"tmplnamespace","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  tmplinit: /* regproc */ PGobject /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_ts_template","column_name":"tmplinit","ordinal_position":4,"is_nullable":"NO","data_type":"regproc","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"regproc","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  tmpllexize: /* regproc */ PGobject /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_ts_template","column_name":"tmpllexize","ordinal_position":5,"is_nullable":"NO","data_type":"regproc","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"regproc","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgTsTemplateRow {
  def rowParser(prefix: String): RowParser[PgTsTemplateRow] = { row =>
    Success(
      PgTsTemplateRow(
        oid = row[PgTsTemplateId](prefix + "oid"),
        tmplname = row[String](prefix + "tmplname"),
        tmplnamespace = row[/* oid */ Long](prefix + "tmplnamespace"),
        tmplinit = row[/* regproc */ PGobject](prefix + "tmplinit"),
        tmpllexize = row[/* regproc */ PGobject](prefix + "tmpllexize")
      )
    )
  }

  implicit val oFormat: OFormat[PgTsTemplateRow] = new OFormat[PgTsTemplateRow]{
    override def writes(o: PgTsTemplateRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "tmplname" -> o.tmplname,
      "tmplnamespace" -> o.tmplnamespace,
      "tmplinit" -> o.tmplinit,
      "tmpllexize" -> o.tmpllexize
      )

    override def reads(json: JsValue): JsResult[PgTsTemplateRow] = {
      JsResult.fromTry(
        Try(
          PgTsTemplateRow(
            oid = json.\("oid").as[PgTsTemplateId],
            tmplname = json.\("tmplname").as[String],
            tmplnamespace = json.\("tmplnamespace").as[/* oid */ Long],
            tmplinit = json.\("tmplinit").as[/* regproc */ PGobject],
            tmpllexize = json.\("tmpllexize").as[/* regproc */ PGobject]
          )
        )
      )
    }
  }
}
