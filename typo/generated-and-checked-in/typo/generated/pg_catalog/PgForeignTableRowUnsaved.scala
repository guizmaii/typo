/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgForeignTableRowUnsaved(
  ftserver: /* oid */ Long,
  ftoptions: Option[Array[String]]
)
object PgForeignTableRowUnsaved {
  implicit val oFormat: OFormat[PgForeignTableRowUnsaved] = new OFormat[PgForeignTableRowUnsaved]{
    override def writes(o: PgForeignTableRowUnsaved): JsObject =
      Json.obj(
        "ftserver" -> o.ftserver,
      "ftoptions" -> o.ftoptions
      )

    override def reads(json: JsValue): JsResult[PgForeignTableRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PgForeignTableRowUnsaved(
            ftserver = json.\("ftserver").as[/* oid */ Long],
            ftoptions = json.\("ftoptions").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
