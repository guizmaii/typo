/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import org.postgresql.util.PGobject
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTablespaceRowUnsaved(
  spcname: String,
  spcowner: Long,
  spcacl: Option[Array[PGobject]],
  spcoptions: Option[Array[String]]
)
object PgTablespaceRowUnsaved {
  implicit val oFormat: OFormat[PgTablespaceRowUnsaved] = new OFormat[PgTablespaceRowUnsaved]{
    override def writes(o: PgTablespaceRowUnsaved): JsObject =
      Json.obj(
        "spcname" -> o.spcname,
      "spcowner" -> o.spcowner,
      "spcacl" -> o.spcacl,
      "spcoptions" -> o.spcoptions
      )

    override def reads(json: JsValue): JsResult[PgTablespaceRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PgTablespaceRowUnsaved(
            spcname = json.\("spcname").as[String],
            spcowner = json.\("spcowner").as[Long],
            spcacl = json.\("spcacl").toOption.map(_.as[Array[PGobject]]),
            spcoptions = json.\("spcoptions").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
