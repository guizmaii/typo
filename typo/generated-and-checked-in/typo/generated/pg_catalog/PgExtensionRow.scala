/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgExtensionRow(
  oid: PgExtensionId /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  extname: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"extname","ordinal_position":2,"is_nullable":"NO","data_type":"name","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  extowner: Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"extowner","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  extnamespace: Long /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"extnamespace","ordinal_position":4,"is_nullable":"NO","data_type":"oid","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  extrelocatable: Boolean /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"extrelocatable","ordinal_position":5,"is_nullable":"NO","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  extversion: String /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"extversion","ordinal_position":6,"is_nullable":"NO","data_type":"text","character_octet_length":1073741824,"collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  extconfig: Option[Array[Long]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"extconfig","ordinal_position":7,"is_nullable":"YES","data_type":"ARRAY","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_oid","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  extcondition: Option[Array[String]] /* {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_extension","column_name":"extcondition","ordinal_position":8,"is_nullable":"YES","data_type":"ARRAY","collation_catalog":"postgres","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_text","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object PgExtensionRow {
  implicit val rowParser: RowParser[PgExtensionRow] = { row =>
    Success(
      PgExtensionRow(
        oid = row[PgExtensionId]("oid"),
        extname = row[String]("extname"),
        extowner = row[Long]("extowner"),
        extnamespace = row[Long]("extnamespace"),
        extrelocatable = row[Boolean]("extrelocatable"),
        extversion = row[String]("extversion"),
        extconfig = row[Option[Array[Long]]]("extconfig"),
        extcondition = row[Option[Array[String]]]("extcondition")
      )
    )
  }

  implicit val oFormat: OFormat[PgExtensionRow] = new OFormat[PgExtensionRow]{
    override def writes(o: PgExtensionRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
      "extname" -> o.extname,
      "extowner" -> o.extowner,
      "extnamespace" -> o.extnamespace,
      "extrelocatable" -> o.extrelocatable,
      "extversion" -> o.extversion,
      "extconfig" -> o.extconfig,
      "extcondition" -> o.extcondition
      )

    override def reads(json: JsValue): JsResult[PgExtensionRow] = {
      JsResult.fromTry(
        Try(
          PgExtensionRow(
            oid = json.\("oid").as[PgExtensionId],
            extname = json.\("extname").as[String],
            extowner = json.\("extowner").as[Long],
            extnamespace = json.\("extnamespace").as[Long],
            extrelocatable = json.\("extrelocatable").as[Boolean],
            extversion = json.\("extversion").as[String],
            extconfig = json.\("extconfig").toOption.map(_.as[Array[Long]]),
            extcondition = json.\("extcondition").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
