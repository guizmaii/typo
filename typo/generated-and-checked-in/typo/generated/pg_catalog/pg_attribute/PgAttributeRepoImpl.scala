/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_attribute

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import org.postgresql.util.PGobject

object PgAttributeRepoImpl extends PgAttributeRepo {
  override def delete(compositeId: PgAttributeId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_attribute where attrelid = ${compositeId.attrelid} AND attnum = ${compositeId.attnum}".executeUpdate() > 0
  }
  override def insert(compositeId: PgAttributeId, unsaved: PgAttributeRowUnsaved)(implicit c: Connection): PgAttributeRow = {
    SQL"""insert into pg_catalog.pg_attribute(attrelid, attnum, attname, atttypid, attstattarget, attlen, attndims, attcacheoff, atttypmod, attbyval, attalign, attstorage, attcompression, attnotnull, atthasdef, atthasmissing, attidentity, attgenerated, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions, attmissingval)
          values (${compositeId.attrelid}::oid, ${compositeId.attnum}::int2, ${unsaved.attname}::name, ${unsaved.atttypid}::oid, ${unsaved.attstattarget}::int4, ${unsaved.attlen}::int2, ${unsaved.attndims}::int4, ${unsaved.attcacheoff}::int4, ${unsaved.atttypmod}::int4, ${unsaved.attbyval}, ${unsaved.attalign}::char, ${unsaved.attstorage}::char, ${unsaved.attcompression}::char, ${unsaved.attnotnull}, ${unsaved.atthasdef}, ${unsaved.atthasmissing}, ${unsaved.attidentity}::char, ${unsaved.attgenerated}::char, ${unsaved.attisdropped}, ${unsaved.attislocal}, ${unsaved.attinhcount}::int4, ${unsaved.attcollation}::oid, ${unsaved.attacl}::_aclitem, ${unsaved.attoptions}::_text, ${unsaved.attfdwoptions}::_text, ${unsaved.attmissingval}::anyarray)
          returning attrelid, attname, atttypid, attstattarget, attlen, attnum, attndims, attcacheoff, atttypmod, attbyval, attalign, attstorage, attcompression, attnotnull, atthasdef, atthasmissing, attidentity, attgenerated, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions, attmissingval
       """
      .executeInsert(rowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[PgAttributeRow] = {
    SQL"""select attrelid, attname, atttypid, attstattarget, attlen, attnum, attndims, attcacheoff, atttypmod, attbyval, attalign, attstorage, attcompression, attnotnull, atthasdef, atthasmissing, attidentity, attgenerated, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions, attmissingval
          from pg_catalog.pg_attribute
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PgAttributeFieldOrIdValue[_]])(implicit c: Connection): List[PgAttributeRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgAttributeFieldValue.attrelid(value) => NamedParameter("attrelid", ParameterValue.from(value))
          case PgAttributeFieldValue.attname(value) => NamedParameter("attname", ParameterValue.from(value))
          case PgAttributeFieldValue.atttypid(value) => NamedParameter("atttypid", ParameterValue.from(value))
          case PgAttributeFieldValue.attstattarget(value) => NamedParameter("attstattarget", ParameterValue.from(value))
          case PgAttributeFieldValue.attlen(value) => NamedParameter("attlen", ParameterValue.from(value))
          case PgAttributeFieldValue.attnum(value) => NamedParameter("attnum", ParameterValue.from(value))
          case PgAttributeFieldValue.attndims(value) => NamedParameter("attndims", ParameterValue.from(value))
          case PgAttributeFieldValue.attcacheoff(value) => NamedParameter("attcacheoff", ParameterValue.from(value))
          case PgAttributeFieldValue.atttypmod(value) => NamedParameter("atttypmod", ParameterValue.from(value))
          case PgAttributeFieldValue.attbyval(value) => NamedParameter("attbyval", ParameterValue.from(value))
          case PgAttributeFieldValue.attalign(value) => NamedParameter("attalign", ParameterValue.from(value))
          case PgAttributeFieldValue.attstorage(value) => NamedParameter("attstorage", ParameterValue.from(value))
          case PgAttributeFieldValue.attcompression(value) => NamedParameter("attcompression", ParameterValue.from(value))
          case PgAttributeFieldValue.attnotnull(value) => NamedParameter("attnotnull", ParameterValue.from(value))
          case PgAttributeFieldValue.atthasdef(value) => NamedParameter("atthasdef", ParameterValue.from(value))
          case PgAttributeFieldValue.atthasmissing(value) => NamedParameter("atthasmissing", ParameterValue.from(value))
          case PgAttributeFieldValue.attidentity(value) => NamedParameter("attidentity", ParameterValue.from(value))
          case PgAttributeFieldValue.attgenerated(value) => NamedParameter("attgenerated", ParameterValue.from(value))
          case PgAttributeFieldValue.attisdropped(value) => NamedParameter("attisdropped", ParameterValue.from(value))
          case PgAttributeFieldValue.attislocal(value) => NamedParameter("attislocal", ParameterValue.from(value))
          case PgAttributeFieldValue.attinhcount(value) => NamedParameter("attinhcount", ParameterValue.from(value))
          case PgAttributeFieldValue.attcollation(value) => NamedParameter("attcollation", ParameterValue.from(value))
          case PgAttributeFieldValue.attacl(value) => NamedParameter("attacl", ParameterValue.from(value))
          case PgAttributeFieldValue.attoptions(value) => NamedParameter("attoptions", ParameterValue.from(value))
          case PgAttributeFieldValue.attfdwoptions(value) => NamedParameter("attfdwoptions", ParameterValue.from(value))
          case PgAttributeFieldValue.attmissingval(value) => NamedParameter("attmissingval", ParameterValue.from(value))
        }
        val q = s"""select attrelid, attname, atttypid, attstattarget, attlen, attnum, attndims, attcacheoff, atttypmod, attbyval, attalign, attstorage, attcompression, attnotnull, atthasdef, atthasmissing, attidentity, attgenerated, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions, attmissingval
                    from pg_catalog.pg_attribute
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: PgAttributeId)(implicit c: Connection): Option[PgAttributeRow] = {
    SQL"""select attrelid, attname, atttypid, attstattarget, attlen, attnum, attndims, attcacheoff, atttypmod, attbyval, attalign, attstorage, attcompression, attnotnull, atthasdef, atthasmissing, attidentity, attgenerated, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions, attmissingval
          from pg_catalog.pg_attribute
          where attrelid = ${compositeId.attrelid} AND attnum = ${compositeId.attnum}
       """.as(rowParser.singleOpt)
  }
  override def selectByUnique(attrelid: /* oid */ Long, attname: String)(implicit c: Connection): Option[PgAttributeRow] = {
    selectByFieldValues(List(PgAttributeFieldValue.attrelid(attrelid), PgAttributeFieldValue.attname(attname))).headOption
  }
  override def update(row: PgAttributeRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update pg_catalog.pg_attribute
          set attname = ${row.attname}::name,
              atttypid = ${row.atttypid}::oid,
              attstattarget = ${row.attstattarget}::int4,
              attlen = ${row.attlen}::int2,
              attndims = ${row.attndims}::int4,
              attcacheoff = ${row.attcacheoff}::int4,
              atttypmod = ${row.atttypmod}::int4,
              attbyval = ${row.attbyval},
              attalign = ${row.attalign}::char,
              attstorage = ${row.attstorage}::char,
              attcompression = ${row.attcompression}::char,
              attnotnull = ${row.attnotnull},
              atthasdef = ${row.atthasdef},
              atthasmissing = ${row.atthasmissing},
              attidentity = ${row.attidentity}::char,
              attgenerated = ${row.attgenerated}::char,
              attisdropped = ${row.attisdropped},
              attislocal = ${row.attislocal},
              attinhcount = ${row.attinhcount}::int4,
              attcollation = ${row.attcollation}::oid,
              attacl = ${row.attacl}::_aclitem,
              attoptions = ${row.attoptions}::_text,
              attfdwoptions = ${row.attfdwoptions}::_text,
              attmissingval = ${row.attmissingval}::anyarray
          where attrelid = ${compositeId.attrelid} AND attnum = ${compositeId.attnum}
       """.executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: PgAttributeId, fieldValues: List[PgAttributeFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgAttributeFieldValue.attname(value) => NamedParameter("attname", ParameterValue.from(value))
          case PgAttributeFieldValue.atttypid(value) => NamedParameter("atttypid", ParameterValue.from(value))
          case PgAttributeFieldValue.attstattarget(value) => NamedParameter("attstattarget", ParameterValue.from(value))
          case PgAttributeFieldValue.attlen(value) => NamedParameter("attlen", ParameterValue.from(value))
          case PgAttributeFieldValue.attndims(value) => NamedParameter("attndims", ParameterValue.from(value))
          case PgAttributeFieldValue.attcacheoff(value) => NamedParameter("attcacheoff", ParameterValue.from(value))
          case PgAttributeFieldValue.atttypmod(value) => NamedParameter("atttypmod", ParameterValue.from(value))
          case PgAttributeFieldValue.attbyval(value) => NamedParameter("attbyval", ParameterValue.from(value))
          case PgAttributeFieldValue.attalign(value) => NamedParameter("attalign", ParameterValue.from(value))
          case PgAttributeFieldValue.attstorage(value) => NamedParameter("attstorage", ParameterValue.from(value))
          case PgAttributeFieldValue.attcompression(value) => NamedParameter("attcompression", ParameterValue.from(value))
          case PgAttributeFieldValue.attnotnull(value) => NamedParameter("attnotnull", ParameterValue.from(value))
          case PgAttributeFieldValue.atthasdef(value) => NamedParameter("atthasdef", ParameterValue.from(value))
          case PgAttributeFieldValue.atthasmissing(value) => NamedParameter("atthasmissing", ParameterValue.from(value))
          case PgAttributeFieldValue.attidentity(value) => NamedParameter("attidentity", ParameterValue.from(value))
          case PgAttributeFieldValue.attgenerated(value) => NamedParameter("attgenerated", ParameterValue.from(value))
          case PgAttributeFieldValue.attisdropped(value) => NamedParameter("attisdropped", ParameterValue.from(value))
          case PgAttributeFieldValue.attislocal(value) => NamedParameter("attislocal", ParameterValue.from(value))
          case PgAttributeFieldValue.attinhcount(value) => NamedParameter("attinhcount", ParameterValue.from(value))
          case PgAttributeFieldValue.attcollation(value) => NamedParameter("attcollation", ParameterValue.from(value))
          case PgAttributeFieldValue.attacl(value) => NamedParameter("attacl", ParameterValue.from(value))
          case PgAttributeFieldValue.attoptions(value) => NamedParameter("attoptions", ParameterValue.from(value))
          case PgAttributeFieldValue.attfdwoptions(value) => NamedParameter("attfdwoptions", ParameterValue.from(value))
          case PgAttributeFieldValue.attmissingval(value) => NamedParameter("attmissingval", ParameterValue.from(value))
        }
        val q = s"""update pg_catalog.pg_attribute
                    set ${namedParams.map(x => s"\"${x.name}\" = {${x.name}}").mkString(", ")}
                    where attrelid = {attrelid} AND attnum = {attnum}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("attrelid", ParameterValue.from(compositeId.attrelid)), NamedParameter("attnum", ParameterValue.from(compositeId.attnum)))
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[PgAttributeRow] =
    RowParser[PgAttributeRow] { row =>
      Success(
        PgAttributeRow(
          attrelid = row[/* oid */ Long]("attrelid"),
          attname = row[String]("attname"),
          atttypid = row[/* oid */ Long]("atttypid"),
          attstattarget = row[Int]("attstattarget"),
          attlen = row[Int]("attlen"),
          attnum = row[Int]("attnum"),
          attndims = row[Int]("attndims"),
          attcacheoff = row[Int]("attcacheoff"),
          atttypmod = row[Int]("atttypmod"),
          attbyval = row[Boolean]("attbyval"),
          attalign = row[String]("attalign"),
          attstorage = row[String]("attstorage"),
          attcompression = row[String]("attcompression"),
          attnotnull = row[Boolean]("attnotnull"),
          atthasdef = row[Boolean]("atthasdef"),
          atthasmissing = row[Boolean]("atthasmissing"),
          attidentity = row[String]("attidentity"),
          attgenerated = row[String]("attgenerated"),
          attisdropped = row[Boolean]("attisdropped"),
          attislocal = row[Boolean]("attislocal"),
          attinhcount = row[Int]("attinhcount"),
          attcollation = row[/* oid */ Long]("attcollation"),
          attacl = row[Option[Array[/* aclitem */ PGobject]]]("attacl"),
          attoptions = row[Option[Array[String]]]("attoptions"),
          attfdwoptions = row[Option[Array[String]]]("attfdwoptions"),
          attmissingval = row[Option[/* anyarray */ PGobject]]("attmissingval")
        )
      )
    }
}
