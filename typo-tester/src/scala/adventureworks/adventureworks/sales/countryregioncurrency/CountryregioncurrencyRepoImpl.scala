/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package countryregioncurrency

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime

object CountryregioncurrencyRepoImpl extends CountryregioncurrencyRepo {
  override def delete(compositeId: CountryregioncurrencyId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.countryregioncurrency where countryregioncode = ${compositeId.countryregioncode}, currencycode = ${compositeId.currencycode}""".executeUpdate() > 0
  }
  override def insert(compositeId: CountryregioncurrencyId, unsaved: CountryregioncurrencyRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.countryregioncurrency(countryregioncode, currencycode, ${namedParameters.map(_.name).mkString(", ")})
          values (${compositeId.countryregioncode}, ${compositeId.currencycode}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[CountryregioncurrencyRow] = {
    SQL"""select countryregioncode, currencycode, modifieddate from sales.countryregioncurrency""".as(CountryregioncurrencyRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[CountryregioncurrencyFieldOrIdValue[_]])(implicit c: Connection): List[CountryregioncurrencyRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CountryregioncurrencyFieldValue.countryregioncode(value) => NamedParameter("countryregioncode", ParameterValue.from(value))
          case CountryregioncurrencyFieldValue.currencycode(value) => NamedParameter("currencycode", ParameterValue.from(value))
          case CountryregioncurrencyFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.countryregioncurrency where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(CountryregioncurrencyRow.rowParser("").*)
    }
  
  }
  override def selectById(compositeId: CountryregioncurrencyId)(implicit c: Connection): Option[CountryregioncurrencyRow] = {
    SQL"""select countryregioncode, currencycode, modifieddate from sales.countryregioncurrency where countryregioncode = ${compositeId.countryregioncode}, currencycode = ${compositeId.currencycode}""".as(CountryregioncurrencyRow.rowParser("").singleOpt)
  }
  override def update(compositeId: CountryregioncurrencyId, row: CountryregioncurrencyRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.countryregioncurrency
          set modifieddate = ${row.modifieddate}
          where countryregioncode = ${compositeId.countryregioncode}, currencycode = ${compositeId.currencycode}""".executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: CountryregioncurrencyId, fieldValues: List[CountryregioncurrencyFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CountryregioncurrencyFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.countryregioncurrency
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where countryregioncode = ${compositeId.countryregioncode}, currencycode = ${compositeId.currencycode}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
