/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salestaxrate

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlParser
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SalestaxrateRepoImpl extends SalestaxrateRepo {
  override def delete(salestaxrateid: SalestaxrateId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.salestaxrate where salestaxrateid = $salestaxrateid""".executeUpdate() > 0
  }
  override def insert(unsaved: SalestaxrateRowUnsaved)(implicit c: Connection): SalestaxrateId = {
    val namedParameters = List(
      Some(NamedParameter("stateprovinceid", ParameterValue.from(unsaved.stateprovinceid))),
      Some(NamedParameter("taxtype", ParameterValue.from(unsaved.taxtype))),
      unsaved.taxrate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("taxrate", ParameterValue.from[BigDecimal](value)))
      },
      Some(NamedParameter("name", ParameterValue.from(unsaved.name))),
      unsaved.rowguid match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.salestaxrate(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning salestaxrateid
    """
      .on(namedParameters :_*)
      .executeInsert(SqlParser.get[SalestaxrateId]("salestaxrateid").single)
  
  }
  override def selectAll(implicit c: Connection): List[SalestaxrateRow] = {
    SQL"""select salestaxrateid, stateprovinceid, taxtype, taxrate, name, rowguid, modifieddate from sales.salestaxrate""".as(SalestaxrateRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[SalestaxrateFieldOrIdValue[_]])(implicit c: Connection): List[SalestaxrateRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalestaxrateFieldValue.salestaxrateid(value) => NamedParameter("salestaxrateid", ParameterValue.from(value))
          case SalestaxrateFieldValue.stateprovinceid(value) => NamedParameter("stateprovinceid", ParameterValue.from(value))
          case SalestaxrateFieldValue.taxtype(value) => NamedParameter("taxtype", ParameterValue.from(value))
          case SalestaxrateFieldValue.taxrate(value) => NamedParameter("taxrate", ParameterValue.from(value))
          case SalestaxrateFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case SalestaxrateFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalestaxrateFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.salestaxrate where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(SalestaxrateRow.rowParser("").*)
    }
  
  }
  override def selectById(salestaxrateid: SalestaxrateId)(implicit c: Connection): Option[SalestaxrateRow] = {
    SQL"""select salestaxrateid, stateprovinceid, taxtype, taxrate, name, rowguid, modifieddate from sales.salestaxrate where salestaxrateid = $salestaxrateid""".as(SalestaxrateRow.rowParser("").singleOpt)
  }
  override def selectByIds(salestaxrateids: List[SalestaxrateId])(implicit c: Connection): List[SalestaxrateRow] = {
    SQL"""select salestaxrateid, stateprovinceid, taxtype, taxrate, name, rowguid, modifieddate from sales.salestaxrate where salestaxrateid in $salestaxrateids""".as(SalestaxrateRow.rowParser("").*)
  }
  override def update(salestaxrateid: SalestaxrateId, row: SalestaxrateRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.salestaxrate
          set stateprovinceid = ${row.stateprovinceid},
              taxtype = ${row.taxtype},
              taxrate = ${row.taxrate},
              name = ${row.name},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where salestaxrateid = $salestaxrateid""".executeUpdate() > 0
  }
  override def updateFieldValues(salestaxrateid: SalestaxrateId, fieldValues: List[SalestaxrateFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalestaxrateFieldValue.stateprovinceid(value) => NamedParameter("stateprovinceid", ParameterValue.from(value))
          case SalestaxrateFieldValue.taxtype(value) => NamedParameter("taxtype", ParameterValue.from(value))
          case SalestaxrateFieldValue.taxrate(value) => NamedParameter("taxrate", ParameterValue.from(value))
          case SalestaxrateFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case SalestaxrateFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalestaxrateFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.salestaxrate
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where salestaxrateid = $salestaxrateid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
