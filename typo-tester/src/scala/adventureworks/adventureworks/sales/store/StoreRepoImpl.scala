/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package store

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object StoreRepoImpl extends StoreRepo {
  override def delete(businessentityid: BusinessentityId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.store where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def insert(businessentityid: BusinessentityId, unsaved: StoreRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("name", ParameterValue.from(unsaved.name))),
      Some(NamedParameter("salespersonid", ParameterValue.from(unsaved.salespersonid))),
      Some(NamedParameter("demographics", ParameterValue.from(unsaved.demographics))),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.store(businessentityid, ${namedParameters.map(_.name).mkString(", ")})
          values (${businessentityid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[StoreRow] = {
    SQL"""select businessentityid, name, salespersonid, demographics, rowguid, modifieddate from sales.store""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[StoreFieldOrIdValue[_]])(implicit c: Connection): List[StoreRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case StoreFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case StoreFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case StoreFieldValue.salespersonid(value) => NamedParameter("salespersonid", ParameterValue.from(value))
          case StoreFieldValue.demographics(value) => NamedParameter("demographics", ParameterValue.from(value))
          case StoreFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case StoreFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.store where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(businessentityid: BusinessentityId)(implicit c: Connection): Option[StoreRow] = {
    SQL"""select businessentityid, name, salespersonid, demographics, rowguid, modifieddate from sales.store where businessentityid = $businessentityid""".as(rowParser.singleOpt)
  }
  override def selectByIds(businessentityids: List[BusinessentityId])(implicit c: Connection): List[StoreRow] = {
    SQL"""select businessentityid, name, salespersonid, demographics, rowguid, modifieddate from sales.store where businessentityid in $businessentityids""".as(rowParser.*)
  }
  override def update(businessentityid: BusinessentityId, row: StoreRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.store
          set name = ${row.name},
              salespersonid = ${row.salespersonid},
              demographics = ${row.demographics},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def updateFieldValues(businessentityid: BusinessentityId, fieldValues: List[StoreFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case StoreFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case StoreFieldValue.salespersonid(value) => NamedParameter("salespersonid", ParameterValue.from(value))
          case StoreFieldValue.demographics(value) => NamedParameter("demographics", ParameterValue.from(value))
          case StoreFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case StoreFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.store
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where businessentityid = $businessentityid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[StoreRow] =
    RowParser[StoreRow] { row =>
      Success(
        StoreRow(
          businessentityid = row[BusinessentityId]("businessentityid"),
          name = row[Name]("name"),
          salespersonid = row[Option[BusinessentityId]]("salespersonid"),
          demographics = row[Option[/* xml */ String]]("demographics"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[BusinessentityId] =
    SqlParser.get[BusinessentityId]("businessentityid")
}
