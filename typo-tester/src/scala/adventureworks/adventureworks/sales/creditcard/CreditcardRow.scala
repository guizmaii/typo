/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package creditcard

import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class CreditcardRow(
  creditcardid: CreditcardId /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"creditcard","column_name":"creditcardid","ordinal_position":1,"column_default":"nextval('sales.creditcard_creditcardid_seq'::regclass)","is_nullable":"NO","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  cardtype: String /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"creditcard","column_name":"cardtype","ordinal_position":2,"is_nullable":"NO","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  cardnumber: String /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"creditcard","column_name":"cardnumber","ordinal_position":3,"is_nullable":"NO","data_type":"character varying","character_maximum_length":25,"character_octet_length":100,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  expmonth: Int /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"creditcard","column_name":"expmonth","ordinal_position":4,"is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  expyear: Int /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"creditcard","column_name":"expyear","ordinal_position":5,"is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  modifieddate: LocalDateTime /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"creditcard","column_name":"modifieddate","ordinal_position":6,"column_default":"now()","is_nullable":"NO","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object CreditcardRow {
  def rowParser(prefix: String): RowParser[CreditcardRow] = { row =>
    Success(
      CreditcardRow(
        creditcardid = row[CreditcardId](prefix + "creditcardid"),
        cardtype = row[String](prefix + "cardtype"),
        cardnumber = row[String](prefix + "cardnumber"),
        expmonth = row[Int](prefix + "expmonth"),
        expyear = row[Int](prefix + "expyear"),
        modifieddate = row[LocalDateTime](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[CreditcardRow] = new OFormat[CreditcardRow]{
    override def writes(o: CreditcardRow): JsObject =
      Json.obj(
        "creditcardid" -> o.creditcardid,
        "cardtype" -> o.cardtype,
        "cardnumber" -> o.cardnumber,
        "expmonth" -> o.expmonth,
        "expyear" -> o.expyear,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[CreditcardRow] = {
      JsResult.fromTry(
        Try(
          CreditcardRow(
            creditcardid = json.\("creditcardid").as[CreditcardId],
            cardtype = json.\("cardtype").as[String],
            cardnumber = json.\("cardnumber").as[String],
            expmonth = json.\("expmonth").as[Int],
            expyear = json.\("expyear").as[Int],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
