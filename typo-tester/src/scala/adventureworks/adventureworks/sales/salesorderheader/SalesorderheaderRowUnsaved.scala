/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheader

import adventureworks.Defaulted
import adventureworks.person.address.AddressId
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumberDomain
import adventureworks.public.FlagDomain
import adventureworks.public.OrderNumberDomain
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.sales.creditcard.CreditcardId
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.salesterritory.SalesterritoryId
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `sales.salesorderheader` which has not been persisted yet */
case class SalesorderheaderRowUnsaved(
  revisionnumber: Defaulted[Int],
  orderdate: Defaulted[LocalDateTime],
  duedate: LocalDateTime,
  shipdate: Option[LocalDateTime],
  status: Defaulted[Int],
  onlineorderflag: Defaulted[FlagDomain],
  purchaseordernumber: Option[OrderNumberDomain],
  accountnumber: Option[AccountNumberDomain],
  customerid: CustomerId,
  salespersonid: Option[BusinessentityId],
  territoryid: Option[SalesterritoryId],
  billtoaddressid: AddressId,
  shiptoaddressid: AddressId,
  shipmethodid: ShipmethodId,
  creditcardid: Option[CreditcardId],
  creditcardapprovalcode: Option[String],
  currencyrateid: Option[CurrencyrateId],
  subtotal: Defaulted[BigDecimal],
  taxamt: Defaulted[BigDecimal],
  freight: Defaulted[BigDecimal],
  totaldue: Option[BigDecimal],
  comment: Option[String],
  rowguid: Defaulted[UUID],
  modifieddate: Defaulted[LocalDateTime]
)
object SalesorderheaderRowUnsaved {
  implicit val oFormat: OFormat[SalesorderheaderRowUnsaved] = new OFormat[SalesorderheaderRowUnsaved]{
    override def writes(o: SalesorderheaderRowUnsaved): JsObject =
      Json.obj(
        "revisionnumber" -> o.revisionnumber,
        "orderdate" -> o.orderdate,
        "duedate" -> o.duedate,
        "shipdate" -> o.shipdate,
        "status" -> o.status,
        "onlineorderflag" -> o.onlineorderflag,
        "purchaseordernumber" -> o.purchaseordernumber,
        "accountnumber" -> o.accountnumber,
        "customerid" -> o.customerid,
        "salespersonid" -> o.salespersonid,
        "territoryid" -> o.territoryid,
        "billtoaddressid" -> o.billtoaddressid,
        "shiptoaddressid" -> o.shiptoaddressid,
        "shipmethodid" -> o.shipmethodid,
        "creditcardid" -> o.creditcardid,
        "creditcardapprovalcode" -> o.creditcardapprovalcode,
        "currencyrateid" -> o.currencyrateid,
        "subtotal" -> o.subtotal,
        "taxamt" -> o.taxamt,
        "freight" -> o.freight,
        "totaldue" -> o.totaldue,
        "comment" -> o.comment,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[SalesorderheaderRowUnsaved] = {
      JsResult.fromTry(
        Try(
          SalesorderheaderRowUnsaved(
            revisionnumber = json.\("revisionnumber").as[Defaulted[Int]],
            orderdate = json.\("orderdate").as[Defaulted[LocalDateTime]],
            duedate = json.\("duedate").as[LocalDateTime],
            shipdate = json.\("shipdate").toOption.map(_.as[LocalDateTime]),
            status = json.\("status").as[Defaulted[Int]],
            onlineorderflag = json.\("onlineorderflag").as[Defaulted[FlagDomain]],
            purchaseordernumber = json.\("purchaseordernumber").toOption.map(_.as[OrderNumberDomain]),
            accountnumber = json.\("accountnumber").toOption.map(_.as[AccountNumberDomain]),
            customerid = json.\("customerid").as[CustomerId],
            salespersonid = json.\("salespersonid").toOption.map(_.as[BusinessentityId]),
            territoryid = json.\("territoryid").toOption.map(_.as[SalesterritoryId]),
            billtoaddressid = json.\("billtoaddressid").as[AddressId],
            shiptoaddressid = json.\("shiptoaddressid").as[AddressId],
            shipmethodid = json.\("shipmethodid").as[ShipmethodId],
            creditcardid = json.\("creditcardid").toOption.map(_.as[CreditcardId]),
            creditcardapprovalcode = json.\("creditcardapprovalcode").toOption.map(_.as[String]),
            currencyrateid = json.\("currencyrateid").toOption.map(_.as[CurrencyrateId]),
            subtotal = json.\("subtotal").as[Defaulted[BigDecimal]],
            taxamt = json.\("taxamt").as[Defaulted[BigDecimal]],
            freight = json.\("freight").as[Defaulted[BigDecimal]],
            totaldue = json.\("totaldue").toOption.map(_.as[BigDecimal]),
            comment = json.\("comment").toOption.map(_.as[String]),
            rowguid = json.\("rowguid").as[Defaulted[UUID]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
