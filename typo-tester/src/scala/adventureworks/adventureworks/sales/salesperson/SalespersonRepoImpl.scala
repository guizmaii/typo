/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesperson

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SalespersonRepoImpl extends SalespersonRepo {
  override def delete(businessentityid: SalespersonId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.salesperson where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def insert(businessentityid: SalespersonId, unsaved: SalespersonRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("territoryid", ParameterValue.from(unsaved.territoryid))),
      Some(NamedParameter("salesquota", ParameterValue.from(unsaved.salesquota))),
      unsaved.bonus match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("bonus", ParameterValue.from[BigDecimal](value)))
      },
      unsaved.commissionpct match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("commissionpct", ParameterValue.from[BigDecimal](value)))
      },
      unsaved.salesytd match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("salesytd", ParameterValue.from[BigDecimal](value)))
      },
      unsaved.saleslastyear match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("saleslastyear", ParameterValue.from[BigDecimal](value)))
      },
      unsaved.rowguid match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.salesperson(businessentityid, ${namedParameters.map(_.name).mkString(", ")})
          values (${businessentityid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[SalespersonRow] = {
    SQL"""select businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate from sales.salesperson""".as(SalespersonRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[SalespersonFieldOrIdValue[_]])(implicit c: Connection): List[SalespersonRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalespersonFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case SalespersonFieldValue.territoryid(value) => NamedParameter("territoryid", ParameterValue.from(value))
          case SalespersonFieldValue.salesquota(value) => NamedParameter("salesquota", ParameterValue.from(value))
          case SalespersonFieldValue.bonus(value) => NamedParameter("bonus", ParameterValue.from(value))
          case SalespersonFieldValue.commissionpct(value) => NamedParameter("commissionpct", ParameterValue.from(value))
          case SalespersonFieldValue.salesytd(value) => NamedParameter("salesytd", ParameterValue.from(value))
          case SalespersonFieldValue.saleslastyear(value) => NamedParameter("saleslastyear", ParameterValue.from(value))
          case SalespersonFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalespersonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.salesperson where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(SalespersonRow.rowParser("").*)
    }
  
  }
  override def selectById(businessentityid: SalespersonId)(implicit c: Connection): Option[SalespersonRow] = {
    SQL"""select businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate from sales.salesperson where businessentityid = $businessentityid""".as(SalespersonRow.rowParser("").singleOpt)
  }
  override def selectByIds(businessentityids: List[SalespersonId])(implicit c: Connection): List[SalespersonRow] = {
    SQL"""select businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate from sales.salesperson where businessentityid in $businessentityids""".as(SalespersonRow.rowParser("").*)
  }
  override def update(businessentityid: SalespersonId, row: SalespersonRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.salesperson
          set territoryid = ${row.territoryid},
              salesquota = ${row.salesquota},
              bonus = ${row.bonus},
              commissionpct = ${row.commissionpct},
              salesytd = ${row.salesytd},
              saleslastyear = ${row.saleslastyear},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def updateFieldValues(businessentityid: SalespersonId, fieldValues: List[SalespersonFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalespersonFieldValue.territoryid(value) => NamedParameter("territoryid", ParameterValue.from(value))
          case SalespersonFieldValue.salesquota(value) => NamedParameter("salesquota", ParameterValue.from(value))
          case SalespersonFieldValue.bonus(value) => NamedParameter("bonus", ParameterValue.from(value))
          case SalespersonFieldValue.commissionpct(value) => NamedParameter("commissionpct", ParameterValue.from(value))
          case SalespersonFieldValue.salesytd(value) => NamedParameter("salesytd", ParameterValue.from(value))
          case SalespersonFieldValue.saleslastyear(value) => NamedParameter("saleslastyear", ParameterValue.from(value))
          case SalespersonFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalespersonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.salesperson
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where businessentityid = $businessentityid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
