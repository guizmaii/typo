/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vsalespersonsalesbyfiscalyearsdata

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VsalespersonsalesbyfiscalyearsdataRepoImpl extends VsalespersonsalesbyfiscalyearsdataRepo {
  override def selectAll(implicit c: Connection): List[VsalespersonsalesbyfiscalyearsdataRow] = {
    SQL"""select salespersonid, fullname, jobtitle, salesterritory, salestotal, fiscalyear from sales.vsalespersonsalesbyfiscalyearsdata""".as(VsalespersonsalesbyfiscalyearsdataRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VsalespersonsalesbyfiscalyearsdataFieldOrIdValue[_]])(implicit c: Connection): List[VsalespersonsalesbyfiscalyearsdataRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VsalespersonsalesbyfiscalyearsdataFieldValue.salespersonid(value) => NamedParameter("salespersonid", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsdataFieldValue.fullname(value) => NamedParameter("fullname", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsdataFieldValue.jobtitle(value) => NamedParameter("jobtitle", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsdataFieldValue.salesterritory(value) => NamedParameter("salesterritory", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsdataFieldValue.salestotal(value) => NamedParameter("salestotal", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsdataFieldValue.fiscalyear(value) => NamedParameter("fiscalyear", ParameterValue.from(value))
        }
        val q = s"""select * from sales.vsalespersonsalesbyfiscalyearsdata where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VsalespersonsalesbyfiscalyearsdataRow.rowParser("").*)
    }
  
  }
}
