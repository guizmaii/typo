/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vsalespersonsalesbyfiscalyearsdata

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class VsalespersonsalesbyfiscalyearsdataRow(
  /** Points to [[salesorderheader.SalesorderheaderRow.salespersonid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyearsdata","column_name":"salespersonid","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  salespersonid: Option[BusinessentityId],
  /** debug: {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyearsdata","column_name":"fullname","ordinal_position":2,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  fullname: Option[String],
  /** Points to [[humanresources.employee.EmployeeRow.jobtitle]]
      debug: {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyearsdata","column_name":"jobtitle","ordinal_position":3,"is_nullable":"YES","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  jobtitle: Option[String],
  /** debug: {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyearsdata","column_name":"salesterritory","ordinal_position":4,"is_nullable":"YES","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Name","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  salesterritory: Option[Name],
  /** debug: {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyearsdata","column_name":"salestotal","ordinal_position":5,"is_nullable":"YES","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  salestotal: Option[BigDecimal],
  /** debug: {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyearsdata","column_name":"fiscalyear","ordinal_position":6,"is_nullable":"YES","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  fiscalyear: Option[BigDecimal]
)

object VsalespersonsalesbyfiscalyearsdataRow {
  def rowParser(prefix: String): RowParser[VsalespersonsalesbyfiscalyearsdataRow] = { row =>
    Success(
      VsalespersonsalesbyfiscalyearsdataRow(
        salespersonid = row[Option[BusinessentityId]](prefix + "salespersonid"),
        fullname = row[Option[String]](prefix + "fullname"),
        jobtitle = row[Option[String]](prefix + "jobtitle"),
        salesterritory = row[Option[Name]](prefix + "salesterritory"),
        salestotal = row[Option[BigDecimal]](prefix + "salestotal"),
        fiscalyear = row[Option[BigDecimal]](prefix + "fiscalyear")
      )
    )
  }

  implicit val oFormat: OFormat[VsalespersonsalesbyfiscalyearsdataRow] = new OFormat[VsalespersonsalesbyfiscalyearsdataRow]{
    override def writes(o: VsalespersonsalesbyfiscalyearsdataRow): JsObject =
      Json.obj(
        "salespersonid" -> o.salespersonid,
        "fullname" -> o.fullname,
        "jobtitle" -> o.jobtitle,
        "salesterritory" -> o.salesterritory,
        "salestotal" -> o.salestotal,
        "fiscalyear" -> o.fiscalyear
      )
  
    override def reads(json: JsValue): JsResult[VsalespersonsalesbyfiscalyearsdataRow] = {
      JsResult.fromTry(
        Try(
          VsalespersonsalesbyfiscalyearsdataRow(
            salespersonid = json.\("salespersonid").toOption.map(_.as[BusinessentityId]),
            fullname = json.\("fullname").toOption.map(_.as[String]),
            jobtitle = json.\("jobtitle").toOption.map(_.as[String]),
            salesterritory = json.\("salesterritory").toOption.map(_.as[Name]),
            salestotal = json.\("salestotal").toOption.map(_.as[BigDecimal]),
            fiscalyear = json.\("fiscalyear").toOption.map(_.as[BigDecimal])
          )
        )
      )
    }
  }
}
