/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesterritory

import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.NameDomain
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SalesterritoryRow(
  territoryid: SalesterritoryId /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"territoryid","ordinal_position":1,"column_default":"nextval('sales.salesterritory_territoryid_seq'::regclass)","is_nullable":"NO","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  name: NameDomain /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"name","ordinal_position":2,"is_nullable":"NO","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Name","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  /** Points to [[person.countryregion.CountryregionRow.countryregioncode]] */
  countryregioncode: CountryregionId /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"countryregioncode","ordinal_position":3,"is_nullable":"NO","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  group: String /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"group","ordinal_position":4,"is_nullable":"NO","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  salesytd: BigDecimal /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"salesytd","ordinal_position":5,"column_default":"0.00","is_nullable":"NO","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  saleslastyear: BigDecimal /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"saleslastyear","ordinal_position":6,"column_default":"0.00","is_nullable":"NO","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  costytd: BigDecimal /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"costytd","ordinal_position":7,"column_default":"0.00","is_nullable":"NO","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  costlastyear: BigDecimal /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"costlastyear","ordinal_position":8,"column_default":"0.00","is_nullable":"NO","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  rowguid: UUID /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"rowguid","ordinal_position":9,"column_default":"uuid_generate_v1()","is_nullable":"NO","data_type":"uuid","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"uuid","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  modifieddate: LocalDateTime /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"salesterritory","column_name":"modifieddate","ordinal_position":10,"column_default":"now()","is_nullable":"NO","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object SalesterritoryRow {
  def rowParser(prefix: String): RowParser[SalesterritoryRow] = { row =>
    Success(
      SalesterritoryRow(
        territoryid = row[SalesterritoryId](prefix + "territoryid"),
        name = row[NameDomain](prefix + "name"),
        countryregioncode = row[CountryregionId](prefix + "countryregioncode"),
        group = row[String](prefix + "group"),
        salesytd = row[BigDecimal](prefix + "salesytd"),
        saleslastyear = row[BigDecimal](prefix + "saleslastyear"),
        costytd = row[BigDecimal](prefix + "costytd"),
        costlastyear = row[BigDecimal](prefix + "costlastyear"),
        rowguid = row[UUID](prefix + "rowguid"),
        modifieddate = row[LocalDateTime](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[SalesterritoryRow] = new OFormat[SalesterritoryRow]{
    override def writes(o: SalesterritoryRow): JsObject =
      Json.obj(
        "territoryid" -> o.territoryid,
        "name" -> o.name,
        "countryregioncode" -> o.countryregioncode,
        "group" -> o.group,
        "salesytd" -> o.salesytd,
        "saleslastyear" -> o.saleslastyear,
        "costytd" -> o.costytd,
        "costlastyear" -> o.costlastyear,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[SalesterritoryRow] = {
      JsResult.fromTry(
        Try(
          SalesterritoryRow(
            territoryid = json.\("territoryid").as[SalesterritoryId],
            name = json.\("name").as[NameDomain],
            countryregioncode = json.\("countryregioncode").as[CountryregionId],
            group = json.\("group").as[String],
            salesytd = json.\("salesytd").as[BigDecimal],
            saleslastyear = json.\("saleslastyear").as[BigDecimal],
            costytd = json.\("costytd").as[BigDecimal],
            costlastyear = json.\("costlastyear").as[BigDecimal],
            rowguid = json.\("rowguid").as[UUID],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
