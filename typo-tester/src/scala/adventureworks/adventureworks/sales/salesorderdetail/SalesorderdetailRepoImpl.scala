/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderdetail

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.specialoffer.SpecialofferId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SalesorderdetailRepoImpl extends SalesorderdetailRepo {
  override def delete(compositeId: SalesorderdetailId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.salesorderdetail where salesorderid = ${compositeId.salesorderid}, salesorderdetailid = ${compositeId.salesorderdetailid}""".executeUpdate() > 0
  }
  override def insert(compositeId: SalesorderdetailId, unsaved: SalesorderdetailRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("carriertrackingnumber", ParameterValue.from(unsaved.carriertrackingnumber))),
      Some(NamedParameter("orderqty", ParameterValue.from(unsaved.orderqty))),
      Some(NamedParameter("productid", ParameterValue.from(unsaved.productid))),
      Some(NamedParameter("specialofferid", ParameterValue.from(unsaved.specialofferid))),
      Some(NamedParameter("unitprice", ParameterValue.from(unsaved.unitprice))),
      unsaved.unitpricediscount match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("unitpricediscount", ParameterValue.from[BigDecimal](value)))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.salesorderdetail(salesorderid, salesorderdetailid, ${namedParameters.map(_.name).mkString(", ")})
          values (${compositeId.salesorderid}, ${compositeId.salesorderdetailid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[SalesorderdetailRow] = {
    SQL"""select salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate from sales.salesorderdetail""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SalesorderdetailFieldOrIdValue[_]])(implicit c: Connection): List[SalesorderdetailRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesorderdetailFieldValue.salesorderid(value) => NamedParameter("salesorderid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.salesorderdetailid(value) => NamedParameter("salesorderdetailid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.carriertrackingnumber(value) => NamedParameter("carriertrackingnumber", ParameterValue.from(value))
          case SalesorderdetailFieldValue.orderqty(value) => NamedParameter("orderqty", ParameterValue.from(value))
          case SalesorderdetailFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.specialofferid(value) => NamedParameter("specialofferid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitprice(value) => NamedParameter("unitprice", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitpricediscount(value) => NamedParameter("unitpricediscount", ParameterValue.from(value))
          case SalesorderdetailFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.salesorderdetail where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: SalesorderdetailId)(implicit c: Connection): Option[SalesorderdetailRow] = {
    SQL"""select salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate from sales.salesorderdetail where salesorderid = ${compositeId.salesorderid}, salesorderdetailid = ${compositeId.salesorderdetailid}""".as(rowParser.singleOpt)
  }
  override def update(compositeId: SalesorderdetailId, row: SalesorderdetailRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.salesorderdetail
          set carriertrackingnumber = ${row.carriertrackingnumber},
              orderqty = ${row.orderqty},
              productid = ${row.productid},
              specialofferid = ${row.specialofferid},
              unitprice = ${row.unitprice},
              unitpricediscount = ${row.unitpricediscount},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where salesorderid = ${compositeId.salesorderid}, salesorderdetailid = ${compositeId.salesorderdetailid}""".executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: SalesorderdetailId, fieldValues: List[SalesorderdetailFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesorderdetailFieldValue.carriertrackingnumber(value) => NamedParameter("carriertrackingnumber", ParameterValue.from(value))
          case SalesorderdetailFieldValue.orderqty(value) => NamedParameter("orderqty", ParameterValue.from(value))
          case SalesorderdetailFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.specialofferid(value) => NamedParameter("specialofferid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitprice(value) => NamedParameter("unitprice", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitpricediscount(value) => NamedParameter("unitpricediscount", ParameterValue.from(value))
          case SalesorderdetailFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.salesorderdetail
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where salesorderid = ${compositeId.salesorderid}, salesorderdetailid = ${compositeId.salesorderdetailid}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[SalesorderdetailRow] =
    RowParser[SalesorderdetailRow] { row =>
      Success(
        SalesorderdetailRow(
          salesorderid = row[SalesorderheaderId]("salesorderid"),
          salesorderdetailid = row[Int]("salesorderdetailid"),
          carriertrackingnumber = row[Option[String]]("carriertrackingnumber"),
          orderqty = row[Int]("orderqty"),
          productid = row[ProductId]("productid"),
          specialofferid = row[SpecialofferId]("specialofferid"),
          unitprice = row[BigDecimal]("unitprice"),
          unitpricediscount = row[BigDecimal]("unitpricediscount"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[SalesorderdetailId] =
    RowParser[SalesorderdetailId] { row =>
      Success(
        SalesorderdetailId(
          salesorderid = row[SalesorderheaderId]("salesorderid"),
          salesorderdetailid = row[Int]("salesorderdetailid")
        )
      )
    }
}
