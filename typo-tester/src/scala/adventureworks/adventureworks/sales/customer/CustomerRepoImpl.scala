/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package customer

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object CustomerRepoImpl extends CustomerRepo {
  override def delete(customerid: CustomerId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.customer where customerid = $customerid""".executeUpdate() > 0
  }
  override def insert(unsaved: CustomerRowUnsaved)(implicit c: Connection): CustomerId = {
    val namedParameters = List(
      Some(NamedParameter("personid", ParameterValue.from(unsaved.personid))),
      Some(NamedParameter("storeid", ParameterValue.from(unsaved.storeid))),
      Some(NamedParameter("territoryid", ParameterValue.from(unsaved.territoryid))),
      unsaved.rowguid match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.customer(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning customerid
    """
      .on(namedParameters :_*)
      .executeInsert(idRowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[CustomerRow] = {
    SQL"""select customerid, personid, storeid, territoryid, rowguid, modifieddate from sales.customer""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[CustomerFieldOrIdValue[_]])(implicit c: Connection): List[CustomerRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CustomerFieldValue.customerid(value) => NamedParameter("customerid", ParameterValue.from(value))
          case CustomerFieldValue.personid(value) => NamedParameter("personid", ParameterValue.from(value))
          case CustomerFieldValue.storeid(value) => NamedParameter("storeid", ParameterValue.from(value))
          case CustomerFieldValue.territoryid(value) => NamedParameter("territoryid", ParameterValue.from(value))
          case CustomerFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case CustomerFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.customer where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(customerid: CustomerId)(implicit c: Connection): Option[CustomerRow] = {
    SQL"""select customerid, personid, storeid, territoryid, rowguid, modifieddate from sales.customer where customerid = $customerid""".as(rowParser.singleOpt)
  }
  override def selectByIds(customerids: List[CustomerId])(implicit c: Connection): List[CustomerRow] = {
    SQL"""select customerid, personid, storeid, territoryid, rowguid, modifieddate from sales.customer where customerid in $customerids""".as(rowParser.*)
  }
  override def update(customerid: CustomerId, row: CustomerRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.customer
          set personid = ${row.personid},
              storeid = ${row.storeid},
              territoryid = ${row.territoryid},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where customerid = $customerid""".executeUpdate() > 0
  }
  override def updateFieldValues(customerid: CustomerId, fieldValues: List[CustomerFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CustomerFieldValue.personid(value) => NamedParameter("personid", ParameterValue.from(value))
          case CustomerFieldValue.storeid(value) => NamedParameter("storeid", ParameterValue.from(value))
          case CustomerFieldValue.territoryid(value) => NamedParameter("territoryid", ParameterValue.from(value))
          case CustomerFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case CustomerFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.customer
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where customerid = $customerid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[CustomerRow] =
    RowParser[CustomerRow] { row =>
      Success(
        CustomerRow(
          customerid = row[CustomerId]("customerid"),
          personid = row[Option[BusinessentityId]]("personid"),
          storeid = row[Option[BusinessentityId]]("storeid"),
          territoryid = row[Option[SalesterritoryId]]("territoryid"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[CustomerId] =
    SqlParser.get[CustomerId]("customerid")
}
