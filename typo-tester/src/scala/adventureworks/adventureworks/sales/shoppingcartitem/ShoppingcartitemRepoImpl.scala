/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package shoppingcartitem

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import adventureworks.production.product.ProductId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object ShoppingcartitemRepoImpl extends ShoppingcartitemRepo {
  override def delete(shoppingcartitemid: ShoppingcartitemId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.shoppingcartitem where shoppingcartitemid = $shoppingcartitemid""".executeUpdate() > 0
  }
  override def insert(unsaved: ShoppingcartitemRowUnsaved)(implicit c: Connection): ShoppingcartitemId = {
    val namedParameters = List(
      Some(NamedParameter("shoppingcartid", ParameterValue.from(unsaved.shoppingcartid))),
      unsaved.quantity match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("quantity", ParameterValue.from[Int](value)))
      },
      Some(NamedParameter("productid", ParameterValue.from(unsaved.productid))),
      unsaved.datecreated match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("datecreated", ParameterValue.from[LocalDateTime](value)))
      },
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.shoppingcartitem(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning shoppingcartitemid
    """
      .on(namedParameters :_*)
      .executeInsert(idRowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[ShoppingcartitemRow] = {
    SQL"""select shoppingcartitemid, shoppingcartid, quantity, productid, datecreated, modifieddate from sales.shoppingcartitem""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[ShoppingcartitemFieldOrIdValue[_]])(implicit c: Connection): List[ShoppingcartitemRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ShoppingcartitemFieldValue.shoppingcartitemid(value) => NamedParameter("shoppingcartitemid", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.shoppingcartid(value) => NamedParameter("shoppingcartid", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.quantity(value) => NamedParameter("quantity", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.datecreated(value) => NamedParameter("datecreated", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.shoppingcartitem where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(shoppingcartitemid: ShoppingcartitemId)(implicit c: Connection): Option[ShoppingcartitemRow] = {
    SQL"""select shoppingcartitemid, shoppingcartid, quantity, productid, datecreated, modifieddate from sales.shoppingcartitem where shoppingcartitemid = $shoppingcartitemid""".as(rowParser.singleOpt)
  }
  override def selectByIds(shoppingcartitemids: List[ShoppingcartitemId])(implicit c: Connection): List[ShoppingcartitemRow] = {
    SQL"""select shoppingcartitemid, shoppingcartid, quantity, productid, datecreated, modifieddate from sales.shoppingcartitem where shoppingcartitemid in $shoppingcartitemids""".as(rowParser.*)
  }
  override def update(shoppingcartitemid: ShoppingcartitemId, row: ShoppingcartitemRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.shoppingcartitem
          set shoppingcartid = ${row.shoppingcartid},
              quantity = ${row.quantity},
              productid = ${row.productid},
              datecreated = ${row.datecreated},
              modifieddate = ${row.modifieddate}
          where shoppingcartitemid = $shoppingcartitemid""".executeUpdate() > 0
  }
  override def updateFieldValues(shoppingcartitemid: ShoppingcartitemId, fieldValues: List[ShoppingcartitemFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ShoppingcartitemFieldValue.shoppingcartid(value) => NamedParameter("shoppingcartid", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.quantity(value) => NamedParameter("quantity", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.datecreated(value) => NamedParameter("datecreated", ParameterValue.from(value))
          case ShoppingcartitemFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.shoppingcartitem
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where shoppingcartitemid = $shoppingcartitemid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[ShoppingcartitemRow] =
    RowParser[ShoppingcartitemRow] { row =>
      Success(
        ShoppingcartitemRow(
          shoppingcartitemid = row[ShoppingcartitemId]("shoppingcartitemid"),
          shoppingcartid = row[String]("shoppingcartid"),
          quantity = row[Int]("quantity"),
          productid = row[ProductId]("productid"),
          datecreated = row[LocalDateTime]("datecreated"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[ShoppingcartitemId] =
    SqlParser.get[ShoppingcartitemId]("shoppingcartitemid")
}
