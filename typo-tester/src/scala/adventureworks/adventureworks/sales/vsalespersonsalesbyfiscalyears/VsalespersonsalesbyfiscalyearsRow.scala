/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vsalespersonsalesbyfiscalyears

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class VsalespersonsalesbyfiscalyearsRow(
  SalesPersonID: Option[Int] /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyears","column_name":"SalesPersonID","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  FullName: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyears","column_name":"FullName","ordinal_position":2,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  JobTitle: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyears","column_name":"JobTitle","ordinal_position":3,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  SalesTerritory: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyears","column_name":"SalesTerritory","ordinal_position":4,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `2012`: Option[BigDecimal] /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyears","column_name":"2012","ordinal_position":5,"is_nullable":"YES","data_type":"numeric","numeric_precision":12,"numeric_precision_radix":10,"numeric_scale":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `2013`: Option[BigDecimal] /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyears","column_name":"2013","ordinal_position":6,"is_nullable":"YES","data_type":"numeric","numeric_precision":12,"numeric_precision_radix":10,"numeric_scale":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `2014`: Option[BigDecimal] /* {"table_catalog":"Adventureworks","table_schema":"sales","table_name":"vsalespersonsalesbyfiscalyears","column_name":"2014","ordinal_position":7,"is_nullable":"YES","data_type":"numeric","numeric_precision":12,"numeric_precision_radix":10,"numeric_scale":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object VsalespersonsalesbyfiscalyearsRow {
  def rowParser(prefix: String): RowParser[VsalespersonsalesbyfiscalyearsRow] = { row =>
    Success(
      VsalespersonsalesbyfiscalyearsRow(
        SalesPersonID = row[Option[Int]](prefix + "SalesPersonID"),
        FullName = row[Option[String]](prefix + "FullName"),
        JobTitle = row[Option[String]](prefix + "JobTitle"),
        SalesTerritory = row[Option[String]](prefix + "SalesTerritory"),
        `2012` = row[Option[BigDecimal]](prefix + "2012"),
        `2013` = row[Option[BigDecimal]](prefix + "2013"),
        `2014` = row[Option[BigDecimal]](prefix + "2014")
      )
    )
  }

  implicit val oFormat: OFormat[VsalespersonsalesbyfiscalyearsRow] = new OFormat[VsalespersonsalesbyfiscalyearsRow]{
    override def writes(o: VsalespersonsalesbyfiscalyearsRow): JsObject =
      Json.obj(
        "SalesPersonID" -> o.SalesPersonID,
        "FullName" -> o.FullName,
        "JobTitle" -> o.JobTitle,
        "SalesTerritory" -> o.SalesTerritory,
        "2012" -> o.`2012`,
        "2013" -> o.`2013`,
        "2014" -> o.`2014`
      )
  
    override def reads(json: JsValue): JsResult[VsalespersonsalesbyfiscalyearsRow] = {
      JsResult.fromTry(
        Try(
          VsalespersonsalesbyfiscalyearsRow(
            SalesPersonID = json.\("SalesPersonID").toOption.map(_.as[Int]),
            FullName = json.\("FullName").toOption.map(_.as[String]),
            JobTitle = json.\("JobTitle").toOption.map(_.as[String]),
            SalesTerritory = json.\("SalesTerritory").toOption.map(_.as[String]),
            `2012` = json.\("2012").toOption.map(_.as[BigDecimal]),
            `2013` = json.\("2013").toOption.map(_.as[BigDecimal]),
            `2014` = json.\("2014").toOption.map(_.as[BigDecimal])
          )
        )
      )
    }
  }
}
