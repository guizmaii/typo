/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vsalespersonsalesbyfiscalyears

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VsalespersonsalesbyfiscalyearsRepoImpl extends VsalespersonsalesbyfiscalyearsRepo {
  override def selectAll(implicit c: Connection): List[VsalespersonsalesbyfiscalyearsRow] = {
    SQL"""select SalesPersonID, FullName, JobTitle, SalesTerritory, 2012, 2013, 2014 from sales.vsalespersonsalesbyfiscalyears""".as(VsalespersonsalesbyfiscalyearsRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VsalespersonsalesbyfiscalyearsFieldOrIdValue[_]])(implicit c: Connection): List[VsalespersonsalesbyfiscalyearsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VsalespersonsalesbyfiscalyearsFieldValue.SalesPersonID(value) => NamedParameter("SalesPersonID", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsFieldValue.FullName(value) => NamedParameter("FullName", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsFieldValue.JobTitle(value) => NamedParameter("JobTitle", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsFieldValue.SalesTerritory(value) => NamedParameter("SalesTerritory", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsFieldValue.`2012`(value) => NamedParameter("2012", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsFieldValue.`2013`(value) => NamedParameter("2013", ParameterValue.from(value))
          case VsalespersonsalesbyfiscalyearsFieldValue.`2014`(value) => NamedParameter("2014", ParameterValue.from(value))
        }
        val q = s"""select * from sales.vsalespersonsalesbyfiscalyears where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VsalespersonsalesbyfiscalyearsRow.rowParser("").*)
    }
  
  }
}
