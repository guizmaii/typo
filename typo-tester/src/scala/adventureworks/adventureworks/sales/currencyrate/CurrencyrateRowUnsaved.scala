/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currencyrate

import adventureworks.Defaulted
import adventureworks.sales.currency.CurrencyId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `sales.currencyrate` which has not been persisted yet */
case class CurrencyrateRowUnsaved(
  currencyratedate: LocalDateTime,
  fromcurrencycode: CurrencyId,
  tocurrencycode: CurrencyId,
  averagerate: BigDecimal,
  endofdayrate: BigDecimal,
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(currencyrateid: CurrencyrateId): CurrencyrateRow =
    CurrencyrateRow(
      currencyrateid = currencyrateid,
      currencyratedate = currencyratedate,
      fromcurrencycode = fromcurrencycode,
      tocurrencycode = tocurrencycode,
      averagerate = averagerate,
      endofdayrate = endofdayrate,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CurrencyrateRowUnsaved {
  implicit val oFormat: OFormat[CurrencyrateRowUnsaved] = new OFormat[CurrencyrateRowUnsaved]{
    override def writes(o: CurrencyrateRowUnsaved): JsObject =
      Json.obj(
        "currencyratedate" -> o.currencyratedate,
        "fromcurrencycode" -> o.fromcurrencycode,
        "tocurrencycode" -> o.tocurrencycode,
        "averagerate" -> o.averagerate,
        "endofdayrate" -> o.endofdayrate,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[CurrencyrateRowUnsaved] = {
      JsResult.fromTry(
        Try(
          CurrencyrateRowUnsaved(
            currencyratedate = json.\("currencyratedate").as[LocalDateTime],
            fromcurrencycode = json.\("fromcurrencycode").as[CurrencyId],
            tocurrencycode = json.\("tocurrencycode").as[CurrencyId],
            averagerate = json.\("averagerate").as[BigDecimal],
            endofdayrate = json.\("endofdayrate").as[BigDecimal],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
