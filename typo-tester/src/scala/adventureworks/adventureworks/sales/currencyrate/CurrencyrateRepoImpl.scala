/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currencyrate

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import adventureworks.sales.currency.CurrencyId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object CurrencyrateRepoImpl extends CurrencyrateRepo {
  override def delete(currencyrateid: CurrencyrateId)(implicit c: Connection): Boolean = {
    SQL"""delete from sales.currencyrate where currencyrateid = $currencyrateid""".executeUpdate() > 0
  }
  override def insert(unsaved: CurrencyrateRowUnsaved)(implicit c: Connection): CurrencyrateId = {
    val namedParameters = List(
      Some(NamedParameter("currencyratedate", ParameterValue.from(unsaved.currencyratedate))),
      Some(NamedParameter("fromcurrencycode", ParameterValue.from(unsaved.fromcurrencycode))),
      Some(NamedParameter("tocurrencycode", ParameterValue.from(unsaved.tocurrencycode))),
      Some(NamedParameter("averagerate", ParameterValue.from(unsaved.averagerate))),
      Some(NamedParameter("endofdayrate", ParameterValue.from(unsaved.endofdayrate))),
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.currencyrate(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning currencyrateid
    """
      .on(namedParameters :_*)
      .executeInsert(idRowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[CurrencyrateRow] = {
    SQL"""select currencyrateid, currencyratedate, fromcurrencycode, tocurrencycode, averagerate, endofdayrate, modifieddate from sales.currencyrate""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[CurrencyrateFieldOrIdValue[_]])(implicit c: Connection): List[CurrencyrateRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CurrencyrateFieldValue.currencyrateid(value) => NamedParameter("currencyrateid", ParameterValue.from(value))
          case CurrencyrateFieldValue.currencyratedate(value) => NamedParameter("currencyratedate", ParameterValue.from(value))
          case CurrencyrateFieldValue.fromcurrencycode(value) => NamedParameter("fromcurrencycode", ParameterValue.from(value))
          case CurrencyrateFieldValue.tocurrencycode(value) => NamedParameter("tocurrencycode", ParameterValue.from(value))
          case CurrencyrateFieldValue.averagerate(value) => NamedParameter("averagerate", ParameterValue.from(value))
          case CurrencyrateFieldValue.endofdayrate(value) => NamedParameter("endofdayrate", ParameterValue.from(value))
          case CurrencyrateFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.currencyrate where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(currencyrateid: CurrencyrateId)(implicit c: Connection): Option[CurrencyrateRow] = {
    SQL"""select currencyrateid, currencyratedate, fromcurrencycode, tocurrencycode, averagerate, endofdayrate, modifieddate from sales.currencyrate where currencyrateid = $currencyrateid""".as(rowParser.singleOpt)
  }
  override def selectByIds(currencyrateids: List[CurrencyrateId])(implicit c: Connection): List[CurrencyrateRow] = {
    SQL"""select currencyrateid, currencyratedate, fromcurrencycode, tocurrencycode, averagerate, endofdayrate, modifieddate from sales.currencyrate where currencyrateid in $currencyrateids""".as(rowParser.*)
  }
  override def update(currencyrateid: CurrencyrateId, row: CurrencyrateRow)(implicit c: Connection): Boolean = {
    SQL"""update sales.currencyrate
          set currencyratedate = ${row.currencyratedate},
              fromcurrencycode = ${row.fromcurrencycode},
              tocurrencycode = ${row.tocurrencycode},
              averagerate = ${row.averagerate},
              endofdayrate = ${row.endofdayrate},
              modifieddate = ${row.modifieddate}
          where currencyrateid = $currencyrateid""".executeUpdate() > 0
  }
  override def updateFieldValues(currencyrateid: CurrencyrateId, fieldValues: List[CurrencyrateFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CurrencyrateFieldValue.currencyratedate(value) => NamedParameter("currencyratedate", ParameterValue.from(value))
          case CurrencyrateFieldValue.fromcurrencycode(value) => NamedParameter("fromcurrencycode", ParameterValue.from(value))
          case CurrencyrateFieldValue.tocurrencycode(value) => NamedParameter("tocurrencycode", ParameterValue.from(value))
          case CurrencyrateFieldValue.averagerate(value) => NamedParameter("averagerate", ParameterValue.from(value))
          case CurrencyrateFieldValue.endofdayrate(value) => NamedParameter("endofdayrate", ParameterValue.from(value))
          case CurrencyrateFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.currencyrate
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where currencyrateid = $currencyrateid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[CurrencyrateRow] =
    RowParser[CurrencyrateRow] { row =>
      Success(
        CurrencyrateRow(
          currencyrateid = row[CurrencyrateId]("currencyrateid"),
          currencyratedate = row[LocalDateTime]("currencyratedate"),
          fromcurrencycode = row[CurrencyId]("fromcurrencycode"),
          tocurrencycode = row[CurrencyId]("tocurrencycode"),
          averagerate = row[BigDecimal]("averagerate"),
          endofdayrate = row[BigDecimal]("endofdayrate"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[CurrencyrateId] =
    SqlParser.get[CurrencyrateId]("currencyrateid")
}
