/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vstorewithdemographics

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VstorewithdemographicsRepoImpl extends VstorewithdemographicsRepo {
  override def selectAll(implicit c: Connection): List[VstorewithdemographicsRow] = {
    SQL"""select businessentityid, name, AnnualSales, AnnualRevenue, BankName, BusinessType, YearOpened, Specialty, SquareFeet, Brands, Internet, NumberEmployees from sales.vstorewithdemographics""".as(VstorewithdemographicsRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VstorewithdemographicsFieldOrIdValue[_]])(implicit c: Connection): List[VstorewithdemographicsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VstorewithdemographicsFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.AnnualSales(value) => NamedParameter("AnnualSales", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.AnnualRevenue(value) => NamedParameter("AnnualRevenue", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.BankName(value) => NamedParameter("BankName", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.BusinessType(value) => NamedParameter("BusinessType", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.YearOpened(value) => NamedParameter("YearOpened", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.Specialty(value) => NamedParameter("Specialty", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.SquareFeet(value) => NamedParameter("SquareFeet", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.Brands(value) => NamedParameter("Brands", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.Internet(value) => NamedParameter("Internet", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.NumberEmployees(value) => NamedParameter("NumberEmployees", ParameterValue.from(value))
        }
        val q = s"""select * from sales.vstorewithdemographics where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VstorewithdemographicsRow.rowParser("").*)
    }
  
  }
}
