/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheadersalesreason

import adventureworks.Defaulted
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.salesreason.SalesreasonId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object SalesorderheadersalesreasonRepoImpl extends SalesorderheadersalesreasonRepo {
  override def delete(compositeId: SalesorderheadersalesreasonId)(implicit c: Connection): Boolean = {
    SQL"delete from sales.salesorderheadersalesreason where salesorderid = ${compositeId.salesorderid}, salesreasonid = ${compositeId.salesreasonid}".executeUpdate() > 0
  }
  override def insert(compositeId: SalesorderheadersalesreasonId, unsaved: SalesorderheadersalesreasonRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into sales.salesorderheadersalesreason(salesorderid, salesreasonid, ${namedParameters.map(_.name).mkString(", ")})
          values (${compositeId.salesorderid}, ${compositeId.salesreasonid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[SalesorderheadersalesreasonRow] = {
    SQL"select salesorderid, salesreasonid, modifieddate from sales.salesorderheadersalesreason".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SalesorderheadersalesreasonFieldOrIdValue[_]])(implicit c: Connection): List[SalesorderheadersalesreasonRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesorderheadersalesreasonFieldValue.salesorderid(value) => NamedParameter("salesorderid", ParameterValue.from(value))
          case SalesorderheadersalesreasonFieldValue.salesreasonid(value) => NamedParameter("salesreasonid", ParameterValue.from(value))
          case SalesorderheadersalesreasonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sales.salesorderheadersalesreason where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: SalesorderheadersalesreasonId)(implicit c: Connection): Option[SalesorderheadersalesreasonRow] = {
    SQL"select salesorderid, salesreasonid, modifieddate from sales.salesorderheadersalesreason where salesorderid = ${compositeId.salesorderid}, salesreasonid = ${compositeId.salesreasonid}".as(rowParser.singleOpt)
  }
  override def update(row: SalesorderheadersalesreasonRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update sales.salesorderheadersalesreason
          set modifieddate = ${row.modifieddate}
          where salesorderid = ${compositeId.salesorderid}, salesreasonid = ${compositeId.salesreasonid}""".executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: SalesorderheadersalesreasonId, fieldValues: List[SalesorderheadersalesreasonFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesorderheadersalesreasonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update sales.salesorderheadersalesreason
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where salesorderid = ${compositeId.salesorderid}, salesreasonid = ${compositeId.salesreasonid}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[SalesorderheadersalesreasonRow] =
    RowParser[SalesorderheadersalesreasonRow] { row =>
      Success(
        SalesorderheadersalesreasonRow(
          salesorderid = row[SalesorderheaderId]("salesorderid"),
          salesreasonid = row[SalesreasonId]("salesreasonid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[SalesorderheadersalesreasonId] =
    RowParser[SalesorderheadersalesreasonId] { row =>
      Success(
        SalesorderheadersalesreasonId(
          salesorderid = row[SalesorderheaderId]("salesorderid"),
          salesreasonid = row[SalesreasonId]("salesreasonid")
        )
      )
    }
}
