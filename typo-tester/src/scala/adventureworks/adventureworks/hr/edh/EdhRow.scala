/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package edh

import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.shift.ShiftId
import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import java.time.LocalDate
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class EdhRow(
  /** debug: {"table_catalog":"Adventureworks","table_schema":"hr","table_name":"edh","column_name":"id","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  id: Option[Int],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.businessentityid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"hr","table_name":"edh","column_name":"businessentityid","ordinal_position":2,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  businessentityid: Option[BusinessentityId],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.departmentid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"hr","table_name":"edh","column_name":"departmentid","ordinal_position":3,"is_nullable":"YES","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  departmentid: Option[DepartmentId],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.shiftid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"hr","table_name":"edh","column_name":"shiftid","ordinal_position":4,"is_nullable":"YES","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  shiftid: Option[ShiftId],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.startdate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"hr","table_name":"edh","column_name":"startdate","ordinal_position":5,"is_nullable":"YES","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  startdate: Option[LocalDate],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.enddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"hr","table_name":"edh","column_name":"enddate","ordinal_position":6,"is_nullable":"YES","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  enddate: Option[LocalDate],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.modifieddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"hr","table_name":"edh","column_name":"modifieddate","ordinal_position":7,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  modifieddate: Option[LocalDateTime]
)

object EdhRow {
  def rowParser(prefix: String): RowParser[EdhRow] = { row =>
    Success(
      EdhRow(
        id = row[Option[Int]](prefix + "id"),
        businessentityid = row[Option[BusinessentityId]](prefix + "businessentityid"),
        departmentid = row[Option[DepartmentId]](prefix + "departmentid"),
        shiftid = row[Option[ShiftId]](prefix + "shiftid"),
        startdate = row[Option[LocalDate]](prefix + "startdate"),
        enddate = row[Option[LocalDate]](prefix + "enddate"),
        modifieddate = row[Option[LocalDateTime]](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[EdhRow] = new OFormat[EdhRow]{
    override def writes(o: EdhRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "businessentityid" -> o.businessentityid,
        "departmentid" -> o.departmentid,
        "shiftid" -> o.shiftid,
        "startdate" -> o.startdate,
        "enddate" -> o.enddate,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[EdhRow] = {
      JsResult.fromTry(
        Try(
          EdhRow(
            id = json.\("id").toOption.map(_.as[Int]),
            businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
            departmentid = json.\("departmentid").toOption.map(_.as[DepartmentId]),
            shiftid = json.\("shiftid").toOption.map(_.as[ShiftId]),
            startdate = json.\("startdate").toOption.map(_.as[LocalDate]),
            enddate = json.\("enddate").toOption.map(_.as[LocalDate]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
