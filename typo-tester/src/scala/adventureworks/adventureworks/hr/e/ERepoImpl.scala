/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package e

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.UUID

object ERepoImpl extends ERepo {
  override def selectAll(implicit c: Connection): List[ERow] = {
    SQL"""select id, businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode
          from hr.e
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[EFieldOrIdValue[_]])(implicit c: Connection): List[ERow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case EFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case EFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case EFieldValue.nationalidnumber(value) => NamedParameter("nationalidnumber", ParameterValue.from(value))
          case EFieldValue.loginid(value) => NamedParameter("loginid", ParameterValue.from(value))
          case EFieldValue.jobtitle(value) => NamedParameter("jobtitle", ParameterValue.from(value))
          case EFieldValue.birthdate(value) => NamedParameter("birthdate", ParameterValue.from(value))
          case EFieldValue.maritalstatus(value) => NamedParameter("maritalstatus", ParameterValue.from(value))
          case EFieldValue.gender(value) => NamedParameter("gender", ParameterValue.from(value))
          case EFieldValue.hiredate(value) => NamedParameter("hiredate", ParameterValue.from(value))
          case EFieldValue.salariedflag(value) => NamedParameter("salariedflag", ParameterValue.from(value))
          case EFieldValue.vacationhours(value) => NamedParameter("vacationhours", ParameterValue.from(value))
          case EFieldValue.sickleavehours(value) => NamedParameter("sickleavehours", ParameterValue.from(value))
          case EFieldValue.currentflag(value) => NamedParameter("currentflag", ParameterValue.from(value))
          case EFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case EFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
          case EFieldValue.organizationnode(value) => NamedParameter("organizationnode", ParameterValue.from(value))
        }
        val q = s"""select *
                    from hr.e
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[ERow] =
    RowParser[ERow] { row =>
      Success(
        ERow(
          id = row[Option[Int]]("id"),
          businessentityid = row[Option[BusinessentityId]]("businessentityid"),
          nationalidnumber = row[Option[String]]("nationalidnumber"),
          loginid = row[Option[String]]("loginid"),
          jobtitle = row[Option[String]]("jobtitle"),
          birthdate = row[Option[LocalDate]]("birthdate"),
          maritalstatus = row[Option[/* bpchar */ String]]("maritalstatus"),
          gender = row[Option[/* bpchar */ String]]("gender"),
          hiredate = row[Option[LocalDate]]("hiredate"),
          salariedflag = row[Flag]("salariedflag"),
          vacationhours = row[Option[Int]]("vacationhours"),
          sickleavehours = row[Option[Int]]("sickleavehours"),
          currentflag = row[Flag]("currentflag"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate"),
          organizationnode = row[Option[String]]("organizationnode")
        )
      )
    }
}
