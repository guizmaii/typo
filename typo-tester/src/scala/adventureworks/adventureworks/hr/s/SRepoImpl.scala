/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package s

import adventureworks.humanresources.shift.ShiftId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.time.LocalTime

object SRepoImpl extends SRepo {
  override def selectAll(implicit c: Connection): List[SRow] = {
    SQL"select id, shiftid, name, starttime, endtime, modifieddate from hr.s".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SFieldOrIdValue[_]])(implicit c: Connection): List[SRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case SFieldValue.shiftid(value) => NamedParameter("shiftid", ParameterValue.from(value))
          case SFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case SFieldValue.starttime(value) => NamedParameter("starttime", ParameterValue.from(value))
          case SFieldValue.endtime(value) => NamedParameter("endtime", ParameterValue.from(value))
          case SFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from hr.s where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[SRow] =
    RowParser[SRow] { row =>
      Success(
        SRow(
          id = row[Option[Int]]("id"),
          shiftid = row[Option[ShiftId]]("shiftid"),
          name = row[Option[Name]]("name"),
          starttime = row[Option[LocalTime]]("starttime"),
          endtime = row[Option[LocalTime]]("endtime"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
