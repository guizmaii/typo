/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package productvendor

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object ProductvendorRepoImpl extends ProductvendorRepo {
  override def delete(compositeId: ProductvendorId)(implicit c: Connection): Boolean = {
    SQL"delete from purchasing.productvendor where productid = ${compositeId.productid}, businessentityid = ${compositeId.businessentityid}".executeUpdate() > 0
  }
  override def insert(compositeId: ProductvendorId, unsaved: ProductvendorRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("averageleadtime", ParameterValue.from(unsaved.averageleadtime))),
      Some(NamedParameter("standardprice", ParameterValue.from(unsaved.standardprice))),
      Some(NamedParameter("lastreceiptcost", ParameterValue.from(unsaved.lastreceiptcost))),
      Some(NamedParameter("lastreceiptdate", ParameterValue.from(unsaved.lastreceiptdate))),
      Some(NamedParameter("minorderqty", ParameterValue.from(unsaved.minorderqty))),
      Some(NamedParameter("maxorderqty", ParameterValue.from(unsaved.maxorderqty))),
      Some(NamedParameter("onorderqty", ParameterValue.from(unsaved.onorderqty))),
      Some(NamedParameter("unitmeasurecode", ParameterValue.from(unsaved.unitmeasurecode))),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into purchasing.productvendor(productid, businessentityid, ${namedParameters.map(_.name).mkString(", ")})
          values (${compositeId.productid}, ${compositeId.businessentityid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[ProductvendorRow] = {
    SQL"select productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate from purchasing.productvendor".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[ProductvendorFieldOrIdValue[_]])(implicit c: Connection): List[ProductvendorRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductvendorFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case ProductvendorFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case ProductvendorFieldValue.averageleadtime(value) => NamedParameter("averageleadtime", ParameterValue.from(value))
          case ProductvendorFieldValue.standardprice(value) => NamedParameter("standardprice", ParameterValue.from(value))
          case ProductvendorFieldValue.lastreceiptcost(value) => NamedParameter("lastreceiptcost", ParameterValue.from(value))
          case ProductvendorFieldValue.lastreceiptdate(value) => NamedParameter("lastreceiptdate", ParameterValue.from(value))
          case ProductvendorFieldValue.minorderqty(value) => NamedParameter("minorderqty", ParameterValue.from(value))
          case ProductvendorFieldValue.maxorderqty(value) => NamedParameter("maxorderqty", ParameterValue.from(value))
          case ProductvendorFieldValue.onorderqty(value) => NamedParameter("onorderqty", ParameterValue.from(value))
          case ProductvendorFieldValue.unitmeasurecode(value) => NamedParameter("unitmeasurecode", ParameterValue.from(value))
          case ProductvendorFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from purchasing.productvendor where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: ProductvendorId)(implicit c: Connection): Option[ProductvendorRow] = {
    SQL"select productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate from purchasing.productvendor where productid = ${compositeId.productid}, businessentityid = ${compositeId.businessentityid}".as(rowParser.singleOpt)
  }
  override def update(row: ProductvendorRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update purchasing.productvendor
          set averageleadtime = ${row.averageleadtime},
              standardprice = ${row.standardprice},
              lastreceiptcost = ${row.lastreceiptcost},
              lastreceiptdate = ${row.lastreceiptdate},
              minorderqty = ${row.minorderqty},
              maxorderqty = ${row.maxorderqty},
              onorderqty = ${row.onorderqty},
              unitmeasurecode = ${row.unitmeasurecode},
              modifieddate = ${row.modifieddate}
          where productid = ${compositeId.productid}, businessentityid = ${compositeId.businessentityid}""".executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: ProductvendorId, fieldValues: List[ProductvendorFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductvendorFieldValue.averageleadtime(value) => NamedParameter("averageleadtime", ParameterValue.from(value))
          case ProductvendorFieldValue.standardprice(value) => NamedParameter("standardprice", ParameterValue.from(value))
          case ProductvendorFieldValue.lastreceiptcost(value) => NamedParameter("lastreceiptcost", ParameterValue.from(value))
          case ProductvendorFieldValue.lastreceiptdate(value) => NamedParameter("lastreceiptdate", ParameterValue.from(value))
          case ProductvendorFieldValue.minorderqty(value) => NamedParameter("minorderqty", ParameterValue.from(value))
          case ProductvendorFieldValue.maxorderqty(value) => NamedParameter("maxorderqty", ParameterValue.from(value))
          case ProductvendorFieldValue.onorderqty(value) => NamedParameter("onorderqty", ParameterValue.from(value))
          case ProductvendorFieldValue.unitmeasurecode(value) => NamedParameter("unitmeasurecode", ParameterValue.from(value))
          case ProductvendorFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update purchasing.productvendor
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where productid = ${compositeId.productid}, businessentityid = ${compositeId.businessentityid}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[ProductvendorRow] =
    RowParser[ProductvendorRow] { row =>
      Success(
        ProductvendorRow(
          productid = row[ProductId]("productid"),
          businessentityid = row[BusinessentityId]("businessentityid"),
          averageleadtime = row[Int]("averageleadtime"),
          standardprice = row[BigDecimal]("standardprice"),
          lastreceiptcost = row[Option[BigDecimal]]("lastreceiptcost"),
          lastreceiptdate = row[Option[LocalDateTime]]("lastreceiptdate"),
          minorderqty = row[Int]("minorderqty"),
          maxorderqty = row[Int]("maxorderqty"),
          onorderqty = row[Option[Int]]("onorderqty"),
          unitmeasurecode = row[UnitmeasureId]("unitmeasurecode"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[ProductvendorId] =
    RowParser[ProductvendorId] { row =>
      Success(
        ProductvendorId(
          productid = row[ProductId]("productid"),
          businessentityid = row[BusinessentityId]("businessentityid")
        )
      )
    }
}
