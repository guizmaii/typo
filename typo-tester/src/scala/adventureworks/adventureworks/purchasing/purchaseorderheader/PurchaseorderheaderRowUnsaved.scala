/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.purchasing.shipmethod.ShipmethodId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `purchasing.purchaseorderheader` which has not been persisted yet */
case class PurchaseorderheaderRowUnsaved(
  revisionnumber: Defaulted[Int],
  status: Defaulted[Int],
  employeeid: BusinessentityId,
  vendorid: BusinessentityId,
  shipmethodid: ShipmethodId,
  orderdate: Defaulted[LocalDateTime],
  shipdate: Option[LocalDateTime],
  subtotal: Defaulted[BigDecimal],
  taxamt: Defaulted[BigDecimal],
  freight: Defaulted[BigDecimal],
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(purchaseorderid: PurchaseorderheaderId): PurchaseorderheaderRow =
    PurchaseorderheaderRow(
      purchaseorderid = purchaseorderid,
      revisionnumber = revisionnumber match {
                         case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                         case Defaulted.Provided(value) => value
                       },
      status = status match {
                 case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                 case Defaulted.Provided(value) => value
               },
      employeeid = employeeid,
      vendorid = vendorid,
      shipmethodid = shipmethodid,
      orderdate = orderdate match {
                    case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                    case Defaulted.Provided(value) => value
                  },
      shipdate = shipdate,
      subtotal = subtotal match {
                   case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                   case Defaulted.Provided(value) => value
                 },
      taxamt = taxamt match {
                 case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                 case Defaulted.Provided(value) => value
               },
      freight = freight match {
                  case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object PurchaseorderheaderRowUnsaved {
  implicit val oFormat: OFormat[PurchaseorderheaderRowUnsaved] = new OFormat[PurchaseorderheaderRowUnsaved]{
    override def writes(o: PurchaseorderheaderRowUnsaved): JsObject =
      Json.obj(
        "revisionnumber" -> o.revisionnumber,
        "status" -> o.status,
        "employeeid" -> o.employeeid,
        "vendorid" -> o.vendorid,
        "shipmethodid" -> o.shipmethodid,
        "orderdate" -> o.orderdate,
        "shipdate" -> o.shipdate,
        "subtotal" -> o.subtotal,
        "taxamt" -> o.taxamt,
        "freight" -> o.freight,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PurchaseorderheaderRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PurchaseorderheaderRowUnsaved(
            revisionnumber = json.\("revisionnumber").as[Defaulted[Int]],
            status = json.\("status").as[Defaulted[Int]],
            employeeid = json.\("employeeid").as[BusinessentityId],
            vendorid = json.\("vendorid").as[BusinessentityId],
            shipmethodid = json.\("shipmethodid").as[ShipmethodId],
            orderdate = json.\("orderdate").as[Defaulted[LocalDateTime]],
            shipdate = json.\("shipdate").toOption.map(_.as[LocalDateTime]),
            subtotal = json.\("subtotal").as[Defaulted[BigDecimal]],
            taxamt = json.\("taxamt").as[Defaulted[BigDecimal]],
            freight = json.\("freight").as[Defaulted[BigDecimal]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
