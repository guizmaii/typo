/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vvendorwithcontacts

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import adventureworks.public.Phone
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection

object VvendorwithcontactsRepoImpl extends VvendorwithcontactsRepo {
  override def selectAll(implicit c: Connection): List[VvendorwithcontactsRow] = {
    SQL"""select businessentityid, name, contacttype, title, firstname, middlename, lastname, suffix, phonenumber, phonenumbertype, emailaddress, emailpromotion
          from purchasing.vvendorwithcontacts
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[VvendorwithcontactsFieldOrIdValue[_]])(implicit c: Connection): List[VvendorwithcontactsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VvendorwithcontactsFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.contacttype(value) => NamedParameter("contacttype", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.title(value) => NamedParameter("title", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.firstname(value) => NamedParameter("firstname", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.middlename(value) => NamedParameter("middlename", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.lastname(value) => NamedParameter("lastname", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.suffix(value) => NamedParameter("suffix", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.phonenumber(value) => NamedParameter("phonenumber", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.phonenumbertype(value) => NamedParameter("phonenumbertype", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.emailaddress(value) => NamedParameter("emailaddress", ParameterValue.from(value))
          case VvendorwithcontactsFieldValue.emailpromotion(value) => NamedParameter("emailpromotion", ParameterValue.from(value))
        }
        val q = s"""select *
                    from purchasing.vvendorwithcontacts
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[VvendorwithcontactsRow] =
    RowParser[VvendorwithcontactsRow] { row =>
      Success(
        VvendorwithcontactsRow(
          businessentityid = row[Option[BusinessentityId]]("businessentityid"),
          name = row[Option[Name]]("name"),
          contacttype = row[Option[Name]]("contacttype"),
          title = row[Option[String]]("title"),
          firstname = row[Option[Name]]("firstname"),
          middlename = row[Option[Name]]("middlename"),
          lastname = row[Option[Name]]("lastname"),
          suffix = row[Option[String]]("suffix"),
          phonenumber = row[Option[Phone]]("phonenumber"),
          phonenumbertype = row[Option[Name]]("phonenumbertype"),
          emailaddress = row[Option[String]]("emailaddress"),
          emailpromotion = row[Option[Int]]("emailpromotion")
        )
      )
    }
}
