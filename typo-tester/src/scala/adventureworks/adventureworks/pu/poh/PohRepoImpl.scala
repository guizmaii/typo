/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package poh

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object PohRepoImpl extends PohRepo {
  override def selectAll(implicit c: Connection): List[PohRow] = {
    SQL"""select id, purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate from pu.poh""".as(PohRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[PohFieldOrIdValue[_]])(implicit c: Connection): List[PohRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PohFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case PohFieldValue.purchaseorderid(value) => NamedParameter("purchaseorderid", ParameterValue.from(value))
          case PohFieldValue.revisionnumber(value) => NamedParameter("revisionnumber", ParameterValue.from(value))
          case PohFieldValue.status(value) => NamedParameter("status", ParameterValue.from(value))
          case PohFieldValue.employeeid(value) => NamedParameter("employeeid", ParameterValue.from(value))
          case PohFieldValue.vendorid(value) => NamedParameter("vendorid", ParameterValue.from(value))
          case PohFieldValue.shipmethodid(value) => NamedParameter("shipmethodid", ParameterValue.from(value))
          case PohFieldValue.orderdate(value) => NamedParameter("orderdate", ParameterValue.from(value))
          case PohFieldValue.shipdate(value) => NamedParameter("shipdate", ParameterValue.from(value))
          case PohFieldValue.subtotal(value) => NamedParameter("subtotal", ParameterValue.from(value))
          case PohFieldValue.taxamt(value) => NamedParameter("taxamt", ParameterValue.from(value))
          case PohFieldValue.freight(value) => NamedParameter("freight", ParameterValue.from(value))
          case PohFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from pu.poh where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(PohRow.rowParser("").*)
    }
  
  }
}
