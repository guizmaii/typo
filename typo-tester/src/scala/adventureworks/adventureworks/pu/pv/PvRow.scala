/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pv

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PvRow(
  /** debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"id","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  id: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.productid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"productid","ordinal_position":2,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  productid: Option[ProductId],
  /** Points to [[purchasing.productvendor.ProductvendorRow.businessentityid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"businessentityid","ordinal_position":3,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  businessentityid: Option[BusinessentityId],
  /** Points to [[purchasing.productvendor.ProductvendorRow.averageleadtime]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"averageleadtime","ordinal_position":4,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  averageleadtime: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.standardprice]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"standardprice","ordinal_position":5,"is_nullable":"YES","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  standardprice: Option[BigDecimal],
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptcost]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"lastreceiptcost","ordinal_position":6,"is_nullable":"YES","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  lastreceiptcost: Option[BigDecimal],
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptdate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"lastreceiptdate","ordinal_position":7,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  lastreceiptdate: Option[LocalDateTime],
  /** Points to [[purchasing.productvendor.ProductvendorRow.minorderqty]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"minorderqty","ordinal_position":8,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  minorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.maxorderqty]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"maxorderqty","ordinal_position":9,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  maxorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.onorderqty]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"onorderqty","ordinal_position":10,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  onorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.unitmeasurecode]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"unitmeasurecode","ordinal_position":11,"is_nullable":"YES","data_type":"character","character_maximum_length":3,"character_octet_length":12,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bpchar","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  unitmeasurecode: Option[UnitmeasureId],
  /** Points to [[purchasing.productvendor.ProductvendorRow.modifieddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pu","table_name":"pv","column_name":"modifieddate","ordinal_position":12,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  modifieddate: Option[LocalDateTime]
)

object PvRow {
  def rowParser(prefix: String): RowParser[PvRow] = { row =>
    Success(
      PvRow(
        id = row[Option[Int]](prefix + "id"),
        productid = row[Option[ProductId]](prefix + "productid"),
        businessentityid = row[Option[BusinessentityId]](prefix + "businessentityid"),
        averageleadtime = row[Option[Int]](prefix + "averageleadtime"),
        standardprice = row[Option[BigDecimal]](prefix + "standardprice"),
        lastreceiptcost = row[Option[BigDecimal]](prefix + "lastreceiptcost"),
        lastreceiptdate = row[Option[LocalDateTime]](prefix + "lastreceiptdate"),
        minorderqty = row[Option[Int]](prefix + "minorderqty"),
        maxorderqty = row[Option[Int]](prefix + "maxorderqty"),
        onorderqty = row[Option[Int]](prefix + "onorderqty"),
        unitmeasurecode = row[Option[UnitmeasureId]](prefix + "unitmeasurecode"),
        modifieddate = row[Option[LocalDateTime]](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[PvRow] = new OFormat[PvRow]{
    override def writes(o: PvRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "productid" -> o.productid,
        "businessentityid" -> o.businessentityid,
        "averageleadtime" -> o.averageleadtime,
        "standardprice" -> o.standardprice,
        "lastreceiptcost" -> o.lastreceiptcost,
        "lastreceiptdate" -> o.lastreceiptdate,
        "minorderqty" -> o.minorderqty,
        "maxorderqty" -> o.maxorderqty,
        "onorderqty" -> o.onorderqty,
        "unitmeasurecode" -> o.unitmeasurecode,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PvRow] = {
      JsResult.fromTry(
        Try(
          PvRow(
            id = json.\("id").toOption.map(_.as[Int]),
            productid = json.\("productid").toOption.map(_.as[ProductId]),
            businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
            averageleadtime = json.\("averageleadtime").toOption.map(_.as[Int]),
            standardprice = json.\("standardprice").toOption.map(_.as[BigDecimal]),
            lastreceiptcost = json.\("lastreceiptcost").toOption.map(_.as[BigDecimal]),
            lastreceiptdate = json.\("lastreceiptdate").toOption.map(_.as[LocalDateTime]),
            minorderqty = json.\("minorderqty").toOption.map(_.as[Int]),
            maxorderqty = json.\("maxorderqty").toOption.map(_.as[Int]),
            onorderqty = json.\("onorderqty").toOption.map(_.as[Int]),
            unitmeasurecode = json.\("unitmeasurecode").toOption.map(_.as[UnitmeasureId]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
