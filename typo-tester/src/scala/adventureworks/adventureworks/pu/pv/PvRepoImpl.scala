/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pv

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object PvRepoImpl extends PvRepo {
  override def selectAll(implicit c: Connection): List[PvRow] = {
    SQL"""select id, productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate from pu.pv""".as(PvRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[PvFieldOrIdValue[_]])(implicit c: Connection): List[PvRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PvFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case PvFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case PvFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case PvFieldValue.averageleadtime(value) => NamedParameter("averageleadtime", ParameterValue.from(value))
          case PvFieldValue.standardprice(value) => NamedParameter("standardprice", ParameterValue.from(value))
          case PvFieldValue.lastreceiptcost(value) => NamedParameter("lastreceiptcost", ParameterValue.from(value))
          case PvFieldValue.lastreceiptdate(value) => NamedParameter("lastreceiptdate", ParameterValue.from(value))
          case PvFieldValue.minorderqty(value) => NamedParameter("minorderqty", ParameterValue.from(value))
          case PvFieldValue.maxorderqty(value) => NamedParameter("maxorderqty", ParameterValue.from(value))
          case PvFieldValue.onorderqty(value) => NamedParameter("onorderqty", ParameterValue.from(value))
          case PvFieldValue.unitmeasurecode(value) => NamedParameter("unitmeasurecode", ParameterValue.from(value))
          case PvFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from pu.pv where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(PvRow.rowParser("").*)
    }
  
  }
}
