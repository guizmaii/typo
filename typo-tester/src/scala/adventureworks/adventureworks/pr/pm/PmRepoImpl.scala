/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pm

import adventureworks.production.productmodel.ProductmodelId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object PmRepoImpl extends PmRepo {
  override def selectAll(implicit c: Connection): List[PmRow] = {
    SQL"select id, productmodelid, name, catalogdescription, instructions, rowguid, modifieddate from pr.pm".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PmFieldOrIdValue[_]])(implicit c: Connection): List[PmRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PmFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case PmFieldValue.productmodelid(value) => NamedParameter("productmodelid", ParameterValue.from(value))
          case PmFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case PmFieldValue.catalogdescription(value) => NamedParameter("catalogdescription", ParameterValue.from(value))
          case PmFieldValue.instructions(value) => NamedParameter("instructions", ParameterValue.from(value))
          case PmFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case PmFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from pr.pm where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[PmRow] =
    RowParser[PmRow] { row =>
      Success(
        PmRow(
          id = row[Option[Int]]("id"),
          productmodelid = row[Option[ProductmodelId]]("productmodelid"),
          name = row[Option[Name]]("name"),
          catalogdescription = row[Option[/* xml */ String]]("catalogdescription"),
          instructions = row[Option[/* xml */ String]]("instructions"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
