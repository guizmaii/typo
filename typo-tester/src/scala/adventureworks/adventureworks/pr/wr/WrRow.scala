/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package wr

import adventureworks.production.location.LocationId
import adventureworks.production.workorder.WorkorderId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class WrRow(
  /** debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"id","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  id: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.workorderid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"workorderid","ordinal_position":2,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  workorderid: Option[WorkorderId],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.productid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"productid","ordinal_position":3,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  productid: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.operationsequence]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"operationsequence","ordinal_position":4,"is_nullable":"YES","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  operationsequence: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.locationid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"locationid","ordinal_position":5,"is_nullable":"YES","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  locationid: Option[LocationId],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.scheduledstartdate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"scheduledstartdate","ordinal_position":6,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  scheduledstartdate: Option[LocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.scheduledenddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"scheduledenddate","ordinal_position":7,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  scheduledenddate: Option[LocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualstartdate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"actualstartdate","ordinal_position":8,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  actualstartdate: Option[LocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualenddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"actualenddate","ordinal_position":9,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  actualenddate: Option[LocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualresourcehrs]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"actualresourcehrs","ordinal_position":10,"is_nullable":"YES","data_type":"numeric","numeric_precision":9,"numeric_precision_radix":10,"numeric_scale":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  actualresourcehrs: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.plannedcost]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"plannedcost","ordinal_position":11,"is_nullable":"YES","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  plannedcost: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualcost]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"actualcost","ordinal_position":12,"is_nullable":"YES","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  actualcost: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.modifieddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"wr","column_name":"modifieddate","ordinal_position":13,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"13","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  modifieddate: Option[LocalDateTime]
)

object WrRow {
  def rowParser(prefix: String): RowParser[WrRow] = { row =>
    Success(
      WrRow(
        id = row[Option[Int]](prefix + "id"),
        workorderid = row[Option[WorkorderId]](prefix + "workorderid"),
        productid = row[Option[Int]](prefix + "productid"),
        operationsequence = row[Option[Int]](prefix + "operationsequence"),
        locationid = row[Option[LocationId]](prefix + "locationid"),
        scheduledstartdate = row[Option[LocalDateTime]](prefix + "scheduledstartdate"),
        scheduledenddate = row[Option[LocalDateTime]](prefix + "scheduledenddate"),
        actualstartdate = row[Option[LocalDateTime]](prefix + "actualstartdate"),
        actualenddate = row[Option[LocalDateTime]](prefix + "actualenddate"),
        actualresourcehrs = row[Option[BigDecimal]](prefix + "actualresourcehrs"),
        plannedcost = row[Option[BigDecimal]](prefix + "plannedcost"),
        actualcost = row[Option[BigDecimal]](prefix + "actualcost"),
        modifieddate = row[Option[LocalDateTime]](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[WrRow] = new OFormat[WrRow]{
    override def writes(o: WrRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "workorderid" -> o.workorderid,
        "productid" -> o.productid,
        "operationsequence" -> o.operationsequence,
        "locationid" -> o.locationid,
        "scheduledstartdate" -> o.scheduledstartdate,
        "scheduledenddate" -> o.scheduledenddate,
        "actualstartdate" -> o.actualstartdate,
        "actualenddate" -> o.actualenddate,
        "actualresourcehrs" -> o.actualresourcehrs,
        "plannedcost" -> o.plannedcost,
        "actualcost" -> o.actualcost,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[WrRow] = {
      JsResult.fromTry(
        Try(
          WrRow(
            id = json.\("id").toOption.map(_.as[Int]),
            workorderid = json.\("workorderid").toOption.map(_.as[WorkorderId]),
            productid = json.\("productid").toOption.map(_.as[Int]),
            operationsequence = json.\("operationsequence").toOption.map(_.as[Int]),
            locationid = json.\("locationid").toOption.map(_.as[LocationId]),
            scheduledstartdate = json.\("scheduledstartdate").toOption.map(_.as[LocalDateTime]),
            scheduledenddate = json.\("scheduledenddate").toOption.map(_.as[LocalDateTime]),
            actualstartdate = json.\("actualstartdate").toOption.map(_.as[LocalDateTime]),
            actualenddate = json.\("actualenddate").toOption.map(_.as[LocalDateTime]),
            actualresourcehrs = json.\("actualresourcehrs").toOption.map(_.as[BigDecimal]),
            plannedcost = json.\("plannedcost").toOption.map(_.as[BigDecimal]),
            actualcost = json.\("actualcost").toOption.map(_.as[BigDecimal]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
