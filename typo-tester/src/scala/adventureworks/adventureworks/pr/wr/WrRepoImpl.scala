/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package wr

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object WrRepoImpl extends WrRepo {
  override def selectAll(implicit c: Connection): List[WrRow] = {
    SQL"""select id, workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate from pr.wr""".as(WrRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[WrFieldOrIdValue[_]])(implicit c: Connection): List[WrRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case WrFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case WrFieldValue.workorderid(value) => NamedParameter("workorderid", ParameterValue.from(value))
          case WrFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case WrFieldValue.operationsequence(value) => NamedParameter("operationsequence", ParameterValue.from(value))
          case WrFieldValue.locationid(value) => NamedParameter("locationid", ParameterValue.from(value))
          case WrFieldValue.scheduledstartdate(value) => NamedParameter("scheduledstartdate", ParameterValue.from(value))
          case WrFieldValue.scheduledenddate(value) => NamedParameter("scheduledenddate", ParameterValue.from(value))
          case WrFieldValue.actualstartdate(value) => NamedParameter("actualstartdate", ParameterValue.from(value))
          case WrFieldValue.actualenddate(value) => NamedParameter("actualenddate", ParameterValue.from(value))
          case WrFieldValue.actualresourcehrs(value) => NamedParameter("actualresourcehrs", ParameterValue.from(value))
          case WrFieldValue.plannedcost(value) => NamedParameter("plannedcost", ParameterValue.from(value))
          case WrFieldValue.actualcost(value) => NamedParameter("actualcost", ParameterValue.from(value))
          case WrFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from pr.wr where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(WrRow.rowParser("").*)
    }
  
  }
}
