/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pr

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object PrRepoImpl extends PrRepo {
  override def selectAll(implicit c: Connection): List[PrRow] = {
    SQL"""select id, productreviewid, productid, reviewername, reviewdate, emailaddress, rating, comments, modifieddate from pr.pr""".as(PrRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[PrFieldOrIdValue[_]])(implicit c: Connection): List[PrRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PrFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case PrFieldValue.productreviewid(value) => NamedParameter("productreviewid", ParameterValue.from(value))
          case PrFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case PrFieldValue.reviewername(value) => NamedParameter("reviewername", ParameterValue.from(value))
          case PrFieldValue.reviewdate(value) => NamedParameter("reviewdate", ParameterValue.from(value))
          case PrFieldValue.emailaddress(value) => NamedParameter("emailaddress", ParameterValue.from(value))
          case PrFieldValue.rating(value) => NamedParameter("rating", ParameterValue.from(value))
          case PrFieldValue.comments(value) => NamedParameter("comments", ParameterValue.from(value))
          case PrFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from pr.pr where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(PrRow.rowParser("").*)
    }
  
  }
}
