/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package i

import adventureworks.production.illustration.IllustrationId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class IRow(
  /** debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"i","column_name":"id","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  id: Option[Int],
  /** Points to [[production.illustration.IllustrationRow.illustrationid]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"i","column_name":"illustrationid","ordinal_position":2,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  illustrationid: Option[IllustrationId],
  /** Points to [[production.illustration.IllustrationRow.diagram]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"i","column_name":"diagram","ordinal_position":3,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  diagram: Option[/* xml */ String],
  /** Points to [[production.illustration.IllustrationRow.modifieddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"pr","table_name":"i","column_name":"modifieddate","ordinal_position":4,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  modifieddate: Option[LocalDateTime]
)

object IRow {
  def rowParser(prefix: String): RowParser[IRow] = { row =>
    Success(
      IRow(
        id = row[Option[Int]](prefix + "id"),
        illustrationid = row[Option[IllustrationId]](prefix + "illustrationid"),
        diagram = row[Option[/* xml */ String]](prefix + "diagram"),
        modifieddate = row[Option[LocalDateTime]](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[IRow] = new OFormat[IRow]{
    override def writes(o: IRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "illustrationid" -> o.illustrationid,
        "diagram" -> o.diagram,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[IRow] = {
      JsResult.fromTry(
        Try(
          IRow(
            id = json.\("id").toOption.map(_.as[Int]),
            illustrationid = json.\("illustrationid").toOption.map(_.as[IllustrationId]),
            diagram = json.\("diagram").toOption.map(_.as[/* xml */ String]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
