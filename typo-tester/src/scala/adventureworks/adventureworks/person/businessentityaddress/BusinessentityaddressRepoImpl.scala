/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package businessentityaddress

import adventureworks.Defaulted
import adventureworks.person.address.AddressId
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.person.businessentity.BusinessentityId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object BusinessentityaddressRepoImpl extends BusinessentityaddressRepo {
  override def delete(compositeId: BusinessentityaddressId)(implicit c: Connection): Boolean = {
    SQL"""delete from person.businessentityaddress where businessentityid = ${compositeId.businessentityid}, addressid = ${compositeId.addressid}, addresstypeid = ${compositeId.addresstypeid}""".executeUpdate() > 0
  }
  override def insert(compositeId: BusinessentityaddressId, unsaved: BusinessentityaddressRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into person.businessentityaddress(businessentityid, addressid, addresstypeid, ${namedParameters.map(_.name).mkString(", ")})
          values (${compositeId.businessentityid}, ${compositeId.addressid}, ${compositeId.addresstypeid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[BusinessentityaddressRow] = {
    SQL"""select businessentityid, addressid, addresstypeid, rowguid, modifieddate from person.businessentityaddress""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[BusinessentityaddressFieldOrIdValue[_]])(implicit c: Connection): List[BusinessentityaddressRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case BusinessentityaddressFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case BusinessentityaddressFieldValue.addressid(value) => NamedParameter("addressid", ParameterValue.from(value))
          case BusinessentityaddressFieldValue.addresstypeid(value) => NamedParameter("addresstypeid", ParameterValue.from(value))
          case BusinessentityaddressFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case BusinessentityaddressFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from person.businessentityaddress where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: BusinessentityaddressId)(implicit c: Connection): Option[BusinessentityaddressRow] = {
    SQL"""select businessentityid, addressid, addresstypeid, rowguid, modifieddate from person.businessentityaddress where businessentityid = ${compositeId.businessentityid}, addressid = ${compositeId.addressid}, addresstypeid = ${compositeId.addresstypeid}""".as(rowParser.singleOpt)
  }
  override def update(compositeId: BusinessentityaddressId, row: BusinessentityaddressRow)(implicit c: Connection): Boolean = {
    SQL"""update person.businessentityaddress
          set rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where businessentityid = ${compositeId.businessentityid}, addressid = ${compositeId.addressid}, addresstypeid = ${compositeId.addresstypeid}""".executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: BusinessentityaddressId, fieldValues: List[BusinessentityaddressFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case BusinessentityaddressFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case BusinessentityaddressFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update person.businessentityaddress
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where businessentityid = ${compositeId.businessentityid}, addressid = ${compositeId.addressid}, addresstypeid = ${compositeId.addresstypeid}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[BusinessentityaddressRow] =
    RowParser[BusinessentityaddressRow] { row =>
      Success(
        BusinessentityaddressRow(
          businessentityid = row[BusinessentityId]("businessentityid"),
          addressid = row[AddressId]("addressid"),
          addresstypeid = row[AddresstypeId]("addresstypeid"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[BusinessentityaddressId] =
    RowParser[BusinessentityaddressId] { row =>
      Success(
        BusinessentityaddressId(
          businessentityid = row[BusinessentityId]("businessentityid"),
          addressid = row[AddressId]("addressid"),
          addresstypeid = row[AddresstypeId]("addresstypeid")
        )
      )
    }
}
