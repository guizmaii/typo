/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package stateprovince

import adventureworks.Defaulted
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Flag
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `person.stateprovince` which has not been persisted yet */
case class StateprovinceRowUnsaved(
  stateprovincecode: /* bpchar */ String,
  countryregioncode: CountryregionId,
  isonlystateprovinceflag: Defaulted[Flag],
  name: Name,
  territoryid: SalesterritoryId,
  rowguid: Defaulted[UUID],
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(stateprovinceid: StateprovinceId): StateprovinceRow =
    StateprovinceRow(
      stateprovinceid = stateprovinceid,
      stateprovincecode = stateprovincecode,
      countryregioncode = countryregioncode,
      isonlystateprovinceflag = isonlystateprovinceflag match {
                                  case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                                  case Defaulted.Provided(value) => value
                                },
      name = name,
      territoryid = territoryid,
      rowguid = rowguid match {
                  case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object StateprovinceRowUnsaved {
  implicit val oFormat: OFormat[StateprovinceRowUnsaved] = new OFormat[StateprovinceRowUnsaved]{
    override def writes(o: StateprovinceRowUnsaved): JsObject =
      Json.obj(
        "stateprovincecode" -> o.stateprovincecode,
        "countryregioncode" -> o.countryregioncode,
        "isonlystateprovinceflag" -> o.isonlystateprovinceflag,
        "name" -> o.name,
        "territoryid" -> o.territoryid,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[StateprovinceRowUnsaved] = {
      JsResult.fromTry(
        Try(
          StateprovinceRowUnsaved(
            stateprovincecode = json.\("stateprovincecode").as[/* bpchar */ String],
            countryregioncode = json.\("countryregioncode").as[CountryregionId],
            isonlystateprovinceflag = json.\("isonlystateprovinceflag").as[Defaulted[Flag]],
            name = json.\("name").as[Name],
            territoryid = json.\("territoryid").as[SalesterritoryId],
            rowguid = json.\("rowguid").as[Defaulted[UUID]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
