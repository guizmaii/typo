/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlParser
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object AddressRepoImpl extends AddressRepo {
  override def delete(addressid: AddressId)(implicit c: Connection): Boolean = {
    SQL"""delete from person.address where addressid = $addressid""".executeUpdate() > 0
  }
  override def insert(unsaved: AddressRowUnsaved)(implicit c: Connection): AddressId = {
    val namedParameters = List(
      Some(NamedParameter("addressline1", ParameterValue.from(unsaved.addressline1))),
      Some(NamedParameter("addressline2", ParameterValue.from(unsaved.addressline2))),
      Some(NamedParameter("city", ParameterValue.from(unsaved.city))),
      Some(NamedParameter("stateprovinceid", ParameterValue.from(unsaved.stateprovinceid))),
      Some(NamedParameter("postalcode", ParameterValue.from(unsaved.postalcode))),
      Some(NamedParameter("spatiallocation", ParameterValue.from(unsaved.spatiallocation))),
      unsaved.rowguid match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into person.address(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning addressid
    """
      .on(namedParameters :_*)
      .executeInsert(SqlParser.get[AddressId]("addressid").single)
  
  }
  override def selectAll(implicit c: Connection): List[AddressRow] = {
    SQL"""select addressid, addressline1, addressline2, city, stateprovinceid, postalcode, spatiallocation, rowguid, modifieddate from person.address""".as(AddressRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[AddressFieldOrIdValue[_]])(implicit c: Connection): List[AddressRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case AddressFieldValue.addressid(value) => NamedParameter("addressid", ParameterValue.from(value))
          case AddressFieldValue.addressline1(value) => NamedParameter("addressline1", ParameterValue.from(value))
          case AddressFieldValue.addressline2(value) => NamedParameter("addressline2", ParameterValue.from(value))
          case AddressFieldValue.city(value) => NamedParameter("city", ParameterValue.from(value))
          case AddressFieldValue.stateprovinceid(value) => NamedParameter("stateprovinceid", ParameterValue.from(value))
          case AddressFieldValue.postalcode(value) => NamedParameter("postalcode", ParameterValue.from(value))
          case AddressFieldValue.spatiallocation(value) => NamedParameter("spatiallocation", ParameterValue.from(value))
          case AddressFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case AddressFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from person.address where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(AddressRow.rowParser("").*)
    }
  
  }
  override def selectById(addressid: AddressId)(implicit c: Connection): Option[AddressRow] = {
    SQL"""select addressid, addressline1, addressline2, city, stateprovinceid, postalcode, spatiallocation, rowguid, modifieddate from person.address where addressid = $addressid""".as(AddressRow.rowParser("").singleOpt)
  }
  override def selectByIds(addressids: List[AddressId])(implicit c: Connection): List[AddressRow] = {
    SQL"""select addressid, addressline1, addressline2, city, stateprovinceid, postalcode, spatiallocation, rowguid, modifieddate from person.address where addressid in $addressids""".as(AddressRow.rowParser("").*)
  }
  override def update(addressid: AddressId, row: AddressRow)(implicit c: Connection): Boolean = {
    SQL"""update person.address
          set addressline1 = ${row.addressline1},
              addressline2 = ${row.addressline2},
              city = ${row.city},
              stateprovinceid = ${row.stateprovinceid},
              postalcode = ${row.postalcode},
              spatiallocation = ${row.spatiallocation},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where addressid = $addressid""".executeUpdate() > 0
  }
  override def updateFieldValues(addressid: AddressId, fieldValues: List[AddressFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case AddressFieldValue.addressline1(value) => NamedParameter("addressline1", ParameterValue.from(value))
          case AddressFieldValue.addressline2(value) => NamedParameter("addressline2", ParameterValue.from(value))
          case AddressFieldValue.city(value) => NamedParameter("city", ParameterValue.from(value))
          case AddressFieldValue.stateprovinceid(value) => NamedParameter("stateprovinceid", ParameterValue.from(value))
          case AddressFieldValue.postalcode(value) => NamedParameter("postalcode", ParameterValue.from(value))
          case AddressFieldValue.spatiallocation(value) => NamedParameter("spatiallocation", ParameterValue.from(value))
          case AddressFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case AddressFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update person.address
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where addressid = $addressid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
