/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package vadditionalcontactinfo

import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class VadditionalcontactinfoRow(
  /** Points to [[person.PersonRow.businessentityid]] */
  businessentityid: Option[BusinessentityId] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"businessentityid","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  /** Points to [[person.PersonRow.firstname]] */
  firstname: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"firstname","ordinal_position":2,"is_nullable":"YES","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Name","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  /** Points to [[person.PersonRow.middlename]] */
  middlename: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"middlename","ordinal_position":3,"is_nullable":"YES","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Name","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  /** Points to [[person.PersonRow.lastname]] */
  lastname: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"lastname","ordinal_position":4,"is_nullable":"YES","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Name","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  telephonenumber: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"telephonenumber","ordinal_position":5,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  telephonespecialinstructions: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"telephonespecialinstructions","ordinal_position":6,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  street: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"street","ordinal_position":7,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  city: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"city","ordinal_position":8,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  stateprovince: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"stateprovince","ordinal_position":9,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  postalcode: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"postalcode","ordinal_position":10,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  countryregion: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"countryregion","ordinal_position":11,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  homeaddressspecialinstructions: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"homeaddressspecialinstructions","ordinal_position":12,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  emailaddress: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"emailaddress","ordinal_position":13,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"13","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  emailspecialinstructions: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"emailspecialinstructions","ordinal_position":14,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"14","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  emailtelephonenumber: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"emailtelephonenumber","ordinal_position":15,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"15","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  /** Points to [[person.PersonRow.rowguid]] */
  rowguid: Option[UUID] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"rowguid","ordinal_position":16,"is_nullable":"YES","data_type":"uuid","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"uuid","dtd_identifier":"16","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  /** Points to [[person.PersonRow.modifieddate]] */
  modifieddate: Option[LocalDateTime] /* {"table_catalog":"Adventureworks","table_schema":"person","table_name":"vadditionalcontactinfo","column_name":"modifieddate","ordinal_position":17,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"17","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
)

object VadditionalcontactinfoRow {
  def rowParser(prefix: String): RowParser[VadditionalcontactinfoRow] = { row =>
    Success(
      VadditionalcontactinfoRow(
        businessentityid = row[Option[BusinessentityId]](prefix + "businessentityid"),
        firstname = row[Option[String]](prefix + "firstname"),
        middlename = row[Option[String]](prefix + "middlename"),
        lastname = row[Option[String]](prefix + "lastname"),
        telephonenumber = row[Option[String]](prefix + "telephonenumber"),
        telephonespecialinstructions = row[Option[String]](prefix + "telephonespecialinstructions"),
        street = row[Option[String]](prefix + "street"),
        city = row[Option[String]](prefix + "city"),
        stateprovince = row[Option[String]](prefix + "stateprovince"),
        postalcode = row[Option[String]](prefix + "postalcode"),
        countryregion = row[Option[String]](prefix + "countryregion"),
        homeaddressspecialinstructions = row[Option[String]](prefix + "homeaddressspecialinstructions"),
        emailaddress = row[Option[String]](prefix + "emailaddress"),
        emailspecialinstructions = row[Option[String]](prefix + "emailspecialinstructions"),
        emailtelephonenumber = row[Option[String]](prefix + "emailtelephonenumber"),
        rowguid = row[Option[UUID]](prefix + "rowguid"),
        modifieddate = row[Option[LocalDateTime]](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[VadditionalcontactinfoRow] = new OFormat[VadditionalcontactinfoRow]{
    override def writes(o: VadditionalcontactinfoRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "firstname" -> o.firstname,
        "middlename" -> o.middlename,
        "lastname" -> o.lastname,
        "telephonenumber" -> o.telephonenumber,
        "telephonespecialinstructions" -> o.telephonespecialinstructions,
        "street" -> o.street,
        "city" -> o.city,
        "stateprovince" -> o.stateprovince,
        "postalcode" -> o.postalcode,
        "countryregion" -> o.countryregion,
        "homeaddressspecialinstructions" -> o.homeaddressspecialinstructions,
        "emailaddress" -> o.emailaddress,
        "emailspecialinstructions" -> o.emailspecialinstructions,
        "emailtelephonenumber" -> o.emailtelephonenumber,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[VadditionalcontactinfoRow] = {
      JsResult.fromTry(
        Try(
          VadditionalcontactinfoRow(
            businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
            firstname = json.\("firstname").toOption.map(_.as[String]),
            middlename = json.\("middlename").toOption.map(_.as[String]),
            lastname = json.\("lastname").toOption.map(_.as[String]),
            telephonenumber = json.\("telephonenumber").toOption.map(_.as[String]),
            telephonespecialinstructions = json.\("telephonespecialinstructions").toOption.map(_.as[String]),
            street = json.\("street").toOption.map(_.as[String]),
            city = json.\("city").toOption.map(_.as[String]),
            stateprovince = json.\("stateprovince").toOption.map(_.as[String]),
            postalcode = json.\("postalcode").toOption.map(_.as[String]),
            countryregion = json.\("countryregion").toOption.map(_.as[String]),
            homeaddressspecialinstructions = json.\("homeaddressspecialinstructions").toOption.map(_.as[String]),
            emailaddress = json.\("emailaddress").toOption.map(_.as[String]),
            emailspecialinstructions = json.\("emailspecialinstructions").toOption.map(_.as[String]),
            emailtelephonenumber = json.\("emailtelephonenumber").toOption.map(_.as[String]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
