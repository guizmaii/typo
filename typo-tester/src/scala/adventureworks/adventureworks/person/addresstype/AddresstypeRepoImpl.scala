/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package addresstype

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object AddresstypeRepoImpl extends AddresstypeRepo {
  override def delete(addresstypeid: AddresstypeId)(implicit c: Connection): Boolean = {
    SQL"""delete from person.addresstype where addresstypeid = $addresstypeid""".executeUpdate() > 0
  }
  override def insert(unsaved: AddresstypeRowUnsaved)(implicit c: Connection): AddresstypeId = {
    val namedParameters = List(
      Some(NamedParameter("name", ParameterValue.from(unsaved.name))),
      unsaved.rowguid match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into person.addresstype(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning addresstypeid
    """
      .on(namedParameters :_*)
      .executeInsert(AddresstypeId.rowParser("").single)
  
  }
  override def selectAll(implicit c: Connection): List[AddresstypeRow] = {
    SQL"""select addresstypeid, name, rowguid, modifieddate from person.addresstype""".as(AddresstypeRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[AddresstypeFieldOrIdValue[_]])(implicit c: Connection): List[AddresstypeRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case AddresstypeFieldValue.addresstypeid(value) => NamedParameter("addresstypeid", ParameterValue.from(value))
          case AddresstypeFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case AddresstypeFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case AddresstypeFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from person.addresstype where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(AddresstypeRow.rowParser("").*)
    }
  
  }
  override def selectById(addresstypeid: AddresstypeId)(implicit c: Connection): Option[AddresstypeRow] = {
    SQL"""select addresstypeid, name, rowguid, modifieddate from person.addresstype where addresstypeid = $addresstypeid""".as(AddresstypeRow.rowParser("").singleOpt)
  }
  override def selectByIds(addresstypeids: List[AddresstypeId])(implicit c: Connection): List[AddresstypeRow] = {
    SQL"""select addresstypeid, name, rowguid, modifieddate from person.addresstype where addresstypeid in $addresstypeids""".as(AddresstypeRow.rowParser("").*)
  }
  override def update(addresstypeid: AddresstypeId, row: AddresstypeRow)(implicit c: Connection): Boolean = {
    SQL"""update person.addresstype
          set name = ${row.name},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where addresstypeid = $addresstypeid""".executeUpdate() > 0
  }
  override def updateFieldValues(addresstypeid: AddresstypeId, fieldValues: List[AddresstypeFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case AddresstypeFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case AddresstypeFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case AddresstypeFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update person.addresstype
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where addresstypeid = $addresstypeid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
