/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package person

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import adventureworks.public.NameStyle
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import anorm.ToSql
import anorm.ToStatement
import java.lang.Integer
import java.sql.Connection
import java.sql.PreparedStatement
import java.time.LocalDateTime
import java.util.UUID

object PersonRepoImpl extends PersonRepo {
  override def delete(businessentityid: BusinessentityId)(implicit c: Connection): Boolean = {
    SQL"""delete from person.person where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def insert(businessentityid: BusinessentityId, unsaved: PersonRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("persontype", ParameterValue.from(unsaved.persontype))),
      unsaved.namestyle match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("namestyle", ParameterValue.from[NameStyle](value)))
      },
      Some(NamedParameter("title", ParameterValue.from(unsaved.title))),
      Some(NamedParameter("firstname", ParameterValue.from(unsaved.firstname))),
      Some(NamedParameter("middlename", ParameterValue.from(unsaved.middlename))),
      Some(NamedParameter("lastname", ParameterValue.from(unsaved.lastname))),
      Some(NamedParameter("suffix", ParameterValue.from(unsaved.suffix))),
      unsaved.emailpromotion match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("emailpromotion", ParameterValue.from[Int](value)))
      },
      Some(NamedParameter("additionalcontactinfo", ParameterValue.from(unsaved.additionalcontactinfo))),
      Some(NamedParameter("demographics", ParameterValue.from(unsaved.demographics))),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into person.person(businessentityid, ${namedParameters.map(_.name).mkString(", ")})
          values (${businessentityid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[PersonRow] = {
    SQL"""select businessentityid, persontype, namestyle, title, firstname, middlename, lastname, suffix, emailpromotion, additionalcontactinfo, demographics, rowguid, modifieddate from person.person""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PersonFieldOrIdValue[_]])(implicit c: Connection): List[PersonRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PersonFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case PersonFieldValue.persontype(value) => NamedParameter("persontype", ParameterValue.from(value))
          case PersonFieldValue.namestyle(value) => NamedParameter("namestyle", ParameterValue.from(value))
          case PersonFieldValue.title(value) => NamedParameter("title", ParameterValue.from(value))
          case PersonFieldValue.firstname(value) => NamedParameter("firstname", ParameterValue.from(value))
          case PersonFieldValue.middlename(value) => NamedParameter("middlename", ParameterValue.from(value))
          case PersonFieldValue.lastname(value) => NamedParameter("lastname", ParameterValue.from(value))
          case PersonFieldValue.suffix(value) => NamedParameter("suffix", ParameterValue.from(value))
          case PersonFieldValue.emailpromotion(value) => NamedParameter("emailpromotion", ParameterValue.from(value))
          case PersonFieldValue.additionalcontactinfo(value) => NamedParameter("additionalcontactinfo", ParameterValue.from(value))
          case PersonFieldValue.demographics(value) => NamedParameter("demographics", ParameterValue.from(value))
          case PersonFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case PersonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from person.person where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(businessentityid: BusinessentityId)(implicit c: Connection): Option[PersonRow] = {
    SQL"""select businessentityid, persontype, namestyle, title, firstname, middlename, lastname, suffix, emailpromotion, additionalcontactinfo, demographics, rowguid, modifieddate from person.person where businessentityid = $businessentityid""".as(rowParser.singleOpt)
  }
  override def selectByIds(businessentityids: Array[BusinessentityId])(implicit c: Connection): List[PersonRow] = {
    implicit val arrayToSql: ToSql[Array[BusinessentityId]] = _ => ("?", 1) // fix wrong instance from anorm
    implicit val toStatement: ToStatement[Array[BusinessentityId]] =
      (s: PreparedStatement, index: Int, v: Array[BusinessentityId]) =>
        s.setArray(index, s.getConnection.createArrayOf("int4", v.map(x => x.value: Integer)))
    
    SQL"""select businessentityid, persontype, namestyle, title, firstname, middlename, lastname, suffix, emailpromotion, additionalcontactinfo, demographics, rowguid, modifieddate from person.person where businessentityid = ANY($businessentityids)""".as(rowParser.*)
  
  }
  override def update(row: PersonRow)(implicit c: Connection): Boolean = {
    val businessentityid = row.businessentityid
    SQL"""update person.person
          set persontype = ${row.persontype},
              namestyle = ${row.namestyle},
              title = ${row.title},
              firstname = ${row.firstname},
              middlename = ${row.middlename},
              lastname = ${row.lastname},
              suffix = ${row.suffix},
              emailpromotion = ${row.emailpromotion},
              additionalcontactinfo = ${row.additionalcontactinfo},
              demographics = ${row.demographics},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate}
          where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def updateFieldValues(businessentityid: BusinessentityId, fieldValues: List[PersonFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PersonFieldValue.persontype(value) => NamedParameter("persontype", ParameterValue.from(value))
          case PersonFieldValue.namestyle(value) => NamedParameter("namestyle", ParameterValue.from(value))
          case PersonFieldValue.title(value) => NamedParameter("title", ParameterValue.from(value))
          case PersonFieldValue.firstname(value) => NamedParameter("firstname", ParameterValue.from(value))
          case PersonFieldValue.middlename(value) => NamedParameter("middlename", ParameterValue.from(value))
          case PersonFieldValue.lastname(value) => NamedParameter("lastname", ParameterValue.from(value))
          case PersonFieldValue.suffix(value) => NamedParameter("suffix", ParameterValue.from(value))
          case PersonFieldValue.emailpromotion(value) => NamedParameter("emailpromotion", ParameterValue.from(value))
          case PersonFieldValue.additionalcontactinfo(value) => NamedParameter("additionalcontactinfo", ParameterValue.from(value))
          case PersonFieldValue.demographics(value) => NamedParameter("demographics", ParameterValue.from(value))
          case PersonFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case PersonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update person.person
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where businessentityid = $businessentityid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[PersonRow] =
    RowParser[PersonRow] { row =>
      Success(
        PersonRow(
          businessentityid = row[BusinessentityId]("businessentityid"),
          persontype = row[/* bpchar */ String]("persontype"),
          namestyle = row[NameStyle]("namestyle"),
          title = row[Option[String]]("title"),
          firstname = row[Name]("firstname"),
          middlename = row[Option[Name]]("middlename"),
          lastname = row[Name]("lastname"),
          suffix = row[Option[String]]("suffix"),
          emailpromotion = row[Int]("emailpromotion"),
          additionalcontactinfo = row[Option[/* xml */ String]]("additionalcontactinfo"),
          demographics = row[Option[/* xml */ String]]("demographics"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[BusinessentityId] =
    SqlParser.get[BusinessentityId]("businessentityid")
}
