/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import adventureworks.person.businessentity.BusinessentityId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object EmployeepayhistoryRepoImpl extends EmployeepayhistoryRepo {
  override def delete(compositeId: EmployeepayhistoryId)(implicit c: Connection): Boolean = {
    SQL"""delete from humanresources.employeepayhistory where businessentityid = ${compositeId.businessentityid}, ratechangedate = ${compositeId.ratechangedate}""".executeUpdate() > 0
  }
  override def insert(compositeId: EmployeepayhistoryId, unsaved: EmployeepayhistoryRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("rate", ParameterValue.from(unsaved.rate))),
      Some(NamedParameter("payfrequency", ParameterValue.from(unsaved.payfrequency))),
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into humanresources.employeepayhistory(businessentityid, ratechangedate, ${namedParameters.map(_.name).mkString(", ")})
          values (${compositeId.businessentityid}, ${compositeId.ratechangedate}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[EmployeepayhistoryRow] = {
    SQL"""select businessentityid, ratechangedate, rate, payfrequency, modifieddate from humanresources.employeepayhistory""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[EmployeepayhistoryFieldOrIdValue[_]])(implicit c: Connection): List[EmployeepayhistoryRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case EmployeepayhistoryFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case EmployeepayhistoryFieldValue.ratechangedate(value) => NamedParameter("ratechangedate", ParameterValue.from(value))
          case EmployeepayhistoryFieldValue.rate(value) => NamedParameter("rate", ParameterValue.from(value))
          case EmployeepayhistoryFieldValue.payfrequency(value) => NamedParameter("payfrequency", ParameterValue.from(value))
          case EmployeepayhistoryFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from humanresources.employeepayhistory where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: EmployeepayhistoryId)(implicit c: Connection): Option[EmployeepayhistoryRow] = {
    SQL"""select businessentityid, ratechangedate, rate, payfrequency, modifieddate from humanresources.employeepayhistory where businessentityid = ${compositeId.businessentityid}, ratechangedate = ${compositeId.ratechangedate}""".as(rowParser.singleOpt)
  }
  override def update(compositeId: EmployeepayhistoryId, row: EmployeepayhistoryRow)(implicit c: Connection): Boolean = {
    SQL"""update humanresources.employeepayhistory
          set rate = ${row.rate},
              payfrequency = ${row.payfrequency},
              modifieddate = ${row.modifieddate}
          where businessentityid = ${compositeId.businessentityid}, ratechangedate = ${compositeId.ratechangedate}""".executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: EmployeepayhistoryId, fieldValues: List[EmployeepayhistoryFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case EmployeepayhistoryFieldValue.rate(value) => NamedParameter("rate", ParameterValue.from(value))
          case EmployeepayhistoryFieldValue.payfrequency(value) => NamedParameter("payfrequency", ParameterValue.from(value))
          case EmployeepayhistoryFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update humanresources.employeepayhistory
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where businessentityid = ${compositeId.businessentityid}, ratechangedate = ${compositeId.ratechangedate}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[EmployeepayhistoryRow] =
    RowParser[EmployeepayhistoryRow] { row =>
      Success(
        EmployeepayhistoryRow(
          businessentityid = row[BusinessentityId]("businessentityid"),
          ratechangedate = row[LocalDateTime]("ratechangedate"),
          rate = row[BigDecimal]("rate"),
          payfrequency = row[Int]("payfrequency"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[EmployeepayhistoryId] =
    RowParser[EmployeepayhistoryId] { row =>
      Success(
        EmployeepayhistoryId(
          businessentityid = row[BusinessentityId]("businessentityid"),
          ratechangedate = row[LocalDateTime]("ratechangedate")
        )
      )
    }
}
