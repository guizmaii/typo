/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.Defaulted
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `humanresources.employeepayhistory` which has not been persisted yet */
case class EmployeepayhistoryRowUnsaved(
  /** Salary hourly rate.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeepayhistory","column_name":"rate","ordinal_position":3,"is_nullable":"NO","data_type":"numeric","numeric_precision_radix":10,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"numeric","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  rate: BigDecimal,
  /** 1 = Salary received monthly, 2 = Salary received biweekly
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeepayhistory","column_name":"payfrequency","ordinal_position":4,"is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  payfrequency: Int,
  /** Default: now()
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeepayhistory","column_name":"modifieddate","ordinal_position":5,"column_default":"now()","is_nullable":"NO","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(compositeId: EmployeepayhistoryId): EmployeepayhistoryRow =
    EmployeepayhistoryRow(
      businessentityid = compositeId.businessentityid,
      ratechangedate = compositeId.ratechangedate,
      rate = rate,
      payfrequency = payfrequency,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object EmployeepayhistoryRowUnsaved {
  implicit val oFormat: OFormat[EmployeepayhistoryRowUnsaved] = new OFormat[EmployeepayhistoryRowUnsaved]{
    override def writes(o: EmployeepayhistoryRowUnsaved): JsObject =
      Json.obj(
        "rate" -> o.rate,
        "payfrequency" -> o.payfrequency,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[EmployeepayhistoryRowUnsaved] = {
      JsResult.fromTry(
        Try(
          EmployeepayhistoryRowUnsaved(
            rate = json.\("rate").as[BigDecimal],
            payfrequency = json.\("payfrequency").as[Int],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
