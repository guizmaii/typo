/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateemployment

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VjobcandidateemploymentRepoImpl extends VjobcandidateemploymentRepo {
  override def selectAll(implicit c: Connection): List[VjobcandidateemploymentRow] = {
    SQL"""select jobcandidateid, Emp.StartDate, Emp.EndDate, Emp.OrgName, Emp.JobTitle, Emp.Responsibility, Emp.FunctionCategory, Emp.IndustryCategory, Emp.Loc.CountryRegion, Emp.Loc.State, Emp.Loc.City from humanresources.vjobcandidateemployment""".as(VjobcandidateemploymentRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VjobcandidateemploymentFieldOrIdValue[_]])(implicit c: Connection): List[VjobcandidateemploymentRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VjobcandidateemploymentFieldValue.jobcandidateid(value) => NamedParameter("jobcandidateid", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.StartDate`(value) => NamedParameter("Emp.StartDate", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.EndDate`(value) => NamedParameter("Emp.EndDate", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.OrgName`(value) => NamedParameter("Emp.OrgName", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.JobTitle`(value) => NamedParameter("Emp.JobTitle", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.Responsibility`(value) => NamedParameter("Emp.Responsibility", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.FunctionCategory`(value) => NamedParameter("Emp.FunctionCategory", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.IndustryCategory`(value) => NamedParameter("Emp.IndustryCategory", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.Loc.CountryRegion`(value) => NamedParameter("Emp.Loc.CountryRegion", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.Loc.State`(value) => NamedParameter("Emp.Loc.State", ParameterValue.from(value))
          case VjobcandidateemploymentFieldValue.`Emp.Loc.City`(value) => NamedParameter("Emp.Loc.City", ParameterValue.from(value))
        }
        val q = s"""select * from humanresources.vjobcandidateemployment where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VjobcandidateemploymentRow.rowParser("").*)
    }
  
  }
}
