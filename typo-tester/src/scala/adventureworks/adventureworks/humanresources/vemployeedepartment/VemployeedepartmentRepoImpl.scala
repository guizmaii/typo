/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vemployeedepartment

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VemployeedepartmentRepoImpl extends VemployeedepartmentRepo {
  override def selectAll(implicit c: Connection): List[VemployeedepartmentRow] = {
    SQL"""select businessentityid, title, firstname, middlename, lastname, suffix, jobtitle, department, groupname, startdate from humanresources.vemployeedepartment""".as(VemployeedepartmentRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VemployeedepartmentFieldOrIdValue[_]])(implicit c: Connection): List[VemployeedepartmentRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VemployeedepartmentFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.title(value) => NamedParameter("title", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.firstname(value) => NamedParameter("firstname", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.middlename(value) => NamedParameter("middlename", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.lastname(value) => NamedParameter("lastname", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.suffix(value) => NamedParameter("suffix", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.jobtitle(value) => NamedParameter("jobtitle", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.department(value) => NamedParameter("department", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.groupname(value) => NamedParameter("groupname", ParameterValue.from(value))
          case VemployeedepartmentFieldValue.startdate(value) => NamedParameter("startdate", ParameterValue.from(value))
        }
        val q = s"""select * from humanresources.vemployeedepartment where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VemployeedepartmentRow.rowParser("").*)
    }
  
  }
}
