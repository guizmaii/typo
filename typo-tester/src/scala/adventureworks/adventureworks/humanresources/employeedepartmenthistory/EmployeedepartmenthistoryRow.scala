/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeedepartmenthistory

import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.shift.ShiftId
import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class EmployeedepartmenthistoryRow(
  /** Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeedepartmenthistory","column_name":"businessentityid","ordinal_position":1,"is_nullable":"NO","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  /** Points to [[department.DepartmentRow.departmentid]] */
  departmentid: DepartmentId /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeedepartmenthistory","column_name":"departmentid","ordinal_position":2,"is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  /** Points to [[shift.ShiftRow.shiftid]] */
  shiftid: ShiftId /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeedepartmenthistory","column_name":"shiftid","ordinal_position":3,"is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  startdate: String /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeedepartmenthistory","column_name":"startdate","ordinal_position":4,"is_nullable":"NO","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  enddate: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeedepartmenthistory","column_name":"enddate","ordinal_position":5,"is_nullable":"YES","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  modifieddate: LocalDateTime /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employeedepartmenthistory","column_name":"modifieddate","ordinal_position":6,"column_default":"now()","is_nullable":"NO","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
){
   val compositeId: EmployeedepartmenthistoryId = EmployeedepartmenthistoryId(businessentityid, startdate, departmentid, shiftid)
 }

object EmployeedepartmenthistoryRow {
  def rowParser(prefix: String): RowParser[EmployeedepartmenthistoryRow] = { row =>
    Success(
      EmployeedepartmenthistoryRow(
        businessentityid = row[BusinessentityId](prefix + "businessentityid"),
        departmentid = row[DepartmentId](prefix + "departmentid"),
        shiftid = row[ShiftId](prefix + "shiftid"),
        startdate = row[String](prefix + "startdate"),
        enddate = row[Option[String]](prefix + "enddate"),
        modifieddate = row[LocalDateTime](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[EmployeedepartmenthistoryRow] = new OFormat[EmployeedepartmenthistoryRow]{
    override def writes(o: EmployeedepartmenthistoryRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "departmentid" -> o.departmentid,
        "shiftid" -> o.shiftid,
        "startdate" -> o.startdate,
        "enddate" -> o.enddate,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[EmployeedepartmenthistoryRow] = {
      JsResult.fromTry(
        Try(
          EmployeedepartmenthistoryRow(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            departmentid = json.\("departmentid").as[DepartmentId],
            shiftid = json.\("shiftid").as[ShiftId],
            startdate = json.\("startdate").as[String],
            enddate = json.\("enddate").toOption.map(_.as[String]),
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
