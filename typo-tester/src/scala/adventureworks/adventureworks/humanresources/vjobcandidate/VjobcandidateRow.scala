/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidate

import adventureworks.humanresources.jobcandidate.JobcandidateId
import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class VjobcandidateRow(
  /** Points to [[jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: Option[JobcandidateId] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"jobcandidateid","ordinal_position":1,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  /** Points to [[jobcandidate.JobcandidateRow.businessentityid]] */
  businessentityid: Option[BusinessentityId] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"businessentityid","ordinal_position":2,"is_nullable":"YES","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  `Name.Prefix`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Name.Prefix","ordinal_position":3,"is_nullable":"YES","data_type":"character varying","character_maximum_length":30,"character_octet_length":120,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Name.First`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Name.First","ordinal_position":4,"is_nullable":"YES","data_type":"character varying","character_maximum_length":30,"character_octet_length":120,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Name.Middle`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Name.Middle","ordinal_position":5,"is_nullable":"YES","data_type":"character varying","character_maximum_length":30,"character_octet_length":120,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Name.Last`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Name.Last","ordinal_position":6,"is_nullable":"YES","data_type":"character varying","character_maximum_length":30,"character_octet_length":120,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Name.Suffix`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Name.Suffix","ordinal_position":7,"is_nullable":"YES","data_type":"character varying","character_maximum_length":30,"character_octet_length":120,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  Skills: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Skills","ordinal_position":8,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Addr.Type`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Addr.Type","ordinal_position":9,"is_nullable":"YES","data_type":"character varying","character_maximum_length":30,"character_octet_length":120,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Addr.Loc.CountryRegion`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Addr.Loc.CountryRegion","ordinal_position":10,"is_nullable":"YES","data_type":"character varying","character_maximum_length":100,"character_octet_length":400,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Addr.Loc.State`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Addr.Loc.State","ordinal_position":11,"is_nullable":"YES","data_type":"character varying","character_maximum_length":100,"character_octet_length":400,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Addr.Loc.City`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Addr.Loc.City","ordinal_position":12,"is_nullable":"YES","data_type":"character varying","character_maximum_length":100,"character_octet_length":400,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  `Addr.PostalCode`: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"Addr.PostalCode","ordinal_position":13,"is_nullable":"YES","data_type":"character varying","character_maximum_length":20,"character_octet_length":80,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"13","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  EMail: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"EMail","ordinal_position":14,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"14","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  WebSite: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"WebSite","ordinal_position":15,"is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"15","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */,
  /** Points to [[jobcandidate.JobcandidateRow.modifieddate]] */
  modifieddate: Option[LocalDateTime] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"vjobcandidate","column_name":"modifieddate","ordinal_position":16,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"16","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object VjobcandidateRow {
  def rowParser(prefix: String): RowParser[VjobcandidateRow] = { row =>
    Success(
      VjobcandidateRow(
        jobcandidateid = row[Option[JobcandidateId]](prefix + "jobcandidateid"),
        businessentityid = row[Option[BusinessentityId]](prefix + "businessentityid"),
        `Name.Prefix` = row[Option[String]](prefix + "Name.Prefix"),
        `Name.First` = row[Option[String]](prefix + "Name.First"),
        `Name.Middle` = row[Option[String]](prefix + "Name.Middle"),
        `Name.Last` = row[Option[String]](prefix + "Name.Last"),
        `Name.Suffix` = row[Option[String]](prefix + "Name.Suffix"),
        Skills = row[Option[String]](prefix + "Skills"),
        `Addr.Type` = row[Option[String]](prefix + "Addr.Type"),
        `Addr.Loc.CountryRegion` = row[Option[String]](prefix + "Addr.Loc.CountryRegion"),
        `Addr.Loc.State` = row[Option[String]](prefix + "Addr.Loc.State"),
        `Addr.Loc.City` = row[Option[String]](prefix + "Addr.Loc.City"),
        `Addr.PostalCode` = row[Option[String]](prefix + "Addr.PostalCode"),
        EMail = row[Option[String]](prefix + "EMail"),
        WebSite = row[Option[String]](prefix + "WebSite"),
        modifieddate = row[Option[LocalDateTime]](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[VjobcandidateRow] = new OFormat[VjobcandidateRow]{
    override def writes(o: VjobcandidateRow): JsObject =
      Json.obj(
        "jobcandidateid" -> o.jobcandidateid,
        "businessentityid" -> o.businessentityid,
        "Name.Prefix" -> o.`Name.Prefix`,
        "Name.First" -> o.`Name.First`,
        "Name.Middle" -> o.`Name.Middle`,
        "Name.Last" -> o.`Name.Last`,
        "Name.Suffix" -> o.`Name.Suffix`,
        "Skills" -> o.Skills,
        "Addr.Type" -> o.`Addr.Type`,
        "Addr.Loc.CountryRegion" -> o.`Addr.Loc.CountryRegion`,
        "Addr.Loc.State" -> o.`Addr.Loc.State`,
        "Addr.Loc.City" -> o.`Addr.Loc.City`,
        "Addr.PostalCode" -> o.`Addr.PostalCode`,
        "EMail" -> o.EMail,
        "WebSite" -> o.WebSite,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[VjobcandidateRow] = {
      JsResult.fromTry(
        Try(
          VjobcandidateRow(
            jobcandidateid = json.\("jobcandidateid").toOption.map(_.as[JobcandidateId]),
            businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
            `Name.Prefix` = json.\("Name.Prefix").toOption.map(_.as[String]),
            `Name.First` = json.\("Name.First").toOption.map(_.as[String]),
            `Name.Middle` = json.\("Name.Middle").toOption.map(_.as[String]),
            `Name.Last` = json.\("Name.Last").toOption.map(_.as[String]),
            `Name.Suffix` = json.\("Name.Suffix").toOption.map(_.as[String]),
            Skills = json.\("Skills").toOption.map(_.as[String]),
            `Addr.Type` = json.\("Addr.Type").toOption.map(_.as[String]),
            `Addr.Loc.CountryRegion` = json.\("Addr.Loc.CountryRegion").toOption.map(_.as[String]),
            `Addr.Loc.State` = json.\("Addr.Loc.State").toOption.map(_.as[String]),
            `Addr.Loc.City` = json.\("Addr.Loc.City").toOption.map(_.as[String]),
            `Addr.PostalCode` = json.\("Addr.PostalCode").toOption.map(_.as[String]),
            EMail = json.\("EMail").toOption.map(_.as[String]),
            WebSite = json.\("WebSite").toOption.map(_.as[String]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
