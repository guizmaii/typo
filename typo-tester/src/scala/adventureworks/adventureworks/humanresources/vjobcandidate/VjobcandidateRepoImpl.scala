/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidate

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VjobcandidateRepoImpl extends VjobcandidateRepo {
  override def selectAll(implicit c: Connection): List[VjobcandidateRow] = {
    SQL"""select jobcandidateid, businessentityid, Name.Prefix, Name.First, Name.Middle, Name.Last, Name.Suffix, Skills, Addr.Type, Addr.Loc.CountryRegion, Addr.Loc.State, Addr.Loc.City, Addr.PostalCode, EMail, WebSite, modifieddate from humanresources.vjobcandidate""".as(VjobcandidateRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VjobcandidateFieldOrIdValue[_]])(implicit c: Connection): List[VjobcandidateRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VjobcandidateFieldValue.jobcandidateid(value) => NamedParameter("jobcandidateid", ParameterValue.from(value))
          case VjobcandidateFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Name.Prefix`(value) => NamedParameter("Name.Prefix", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Name.First`(value) => NamedParameter("Name.First", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Name.Middle`(value) => NamedParameter("Name.Middle", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Name.Last`(value) => NamedParameter("Name.Last", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Name.Suffix`(value) => NamedParameter("Name.Suffix", ParameterValue.from(value))
          case VjobcandidateFieldValue.Skills(value) => NamedParameter("Skills", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Addr.Type`(value) => NamedParameter("Addr.Type", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Addr.Loc.CountryRegion`(value) => NamedParameter("Addr.Loc.CountryRegion", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Addr.Loc.State`(value) => NamedParameter("Addr.Loc.State", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Addr.Loc.City`(value) => NamedParameter("Addr.Loc.City", ParameterValue.from(value))
          case VjobcandidateFieldValue.`Addr.PostalCode`(value) => NamedParameter("Addr.PostalCode", ParameterValue.from(value))
          case VjobcandidateFieldValue.EMail(value) => NamedParameter("EMail", ParameterValue.from(value))
          case VjobcandidateFieldValue.WebSite(value) => NamedParameter("WebSite", ParameterValue.from(value))
          case VjobcandidateFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from humanresources.vjobcandidate where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VjobcandidateRow.rowParser("").*)
    }
  
  }
}
