/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object EmployeeRepoImpl extends EmployeeRepo {
  override def delete(businessentityid: EmployeeId)(implicit c: Connection): Boolean = {
    SQL"""delete from humanresources.employee where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def insert(businessentityid: EmployeeId, unsaved: EmployeeRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("nationalidnumber", ParameterValue.from(unsaved.nationalidnumber))),
      Some(NamedParameter("loginid", ParameterValue.from(unsaved.loginid))),
      Some(NamedParameter("jobtitle", ParameterValue.from(unsaved.jobtitle))),
      Some(NamedParameter("birthdate", ParameterValue.from(unsaved.birthdate))),
      Some(NamedParameter("maritalstatus", ParameterValue.from(unsaved.maritalstatus))),
      Some(NamedParameter("gender", ParameterValue.from(unsaved.gender))),
      Some(NamedParameter("hiredate", ParameterValue.from(unsaved.hiredate))),
      unsaved.salariedflag match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("salariedflag", ParameterValue.from[Boolean](value)))
      },
      unsaved.vacationhours match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("vacationhours", ParameterValue.from[Int](value)))
      },
      unsaved.sickleavehours match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("sickleavehours", ParameterValue.from[Int](value)))
      },
      unsaved.currentflag match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("currentflag", ParameterValue.from[Boolean](value)))
      },
      unsaved.rowguid match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("rowguid", ParameterValue.from[UUID](value)))
      },
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      },
      unsaved.organizationnode match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("organizationnode", ParameterValue.from[Option[String]](value)))
      }
    ).flatten
    
    SQL"""insert into humanresources.employee(businessentityid, ${namedParameters.map(_.name).mkString(", ")})
          values (${businessentityid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[EmployeeRow] = {
    SQL"""select businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode from humanresources.employee""".as(EmployeeRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[EmployeeFieldOrIdValue[_]])(implicit c: Connection): List[EmployeeRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case EmployeeFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case EmployeeFieldValue.nationalidnumber(value) => NamedParameter("nationalidnumber", ParameterValue.from(value))
          case EmployeeFieldValue.loginid(value) => NamedParameter("loginid", ParameterValue.from(value))
          case EmployeeFieldValue.jobtitle(value) => NamedParameter("jobtitle", ParameterValue.from(value))
          case EmployeeFieldValue.birthdate(value) => NamedParameter("birthdate", ParameterValue.from(value))
          case EmployeeFieldValue.maritalstatus(value) => NamedParameter("maritalstatus", ParameterValue.from(value))
          case EmployeeFieldValue.gender(value) => NamedParameter("gender", ParameterValue.from(value))
          case EmployeeFieldValue.hiredate(value) => NamedParameter("hiredate", ParameterValue.from(value))
          case EmployeeFieldValue.salariedflag(value) => NamedParameter("salariedflag", ParameterValue.from(value))
          case EmployeeFieldValue.vacationhours(value) => NamedParameter("vacationhours", ParameterValue.from(value))
          case EmployeeFieldValue.sickleavehours(value) => NamedParameter("sickleavehours", ParameterValue.from(value))
          case EmployeeFieldValue.currentflag(value) => NamedParameter("currentflag", ParameterValue.from(value))
          case EmployeeFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case EmployeeFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
          case EmployeeFieldValue.organizationnode(value) => NamedParameter("organizationnode", ParameterValue.from(value))
        }
        val q = s"""select * from humanresources.employee where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(EmployeeRow.rowParser("").*)
    }
  
  }
  override def selectById(businessentityid: EmployeeId)(implicit c: Connection): Option[EmployeeRow] = {
    SQL"""select businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode from humanresources.employee where businessentityid = $businessentityid""".as(EmployeeRow.rowParser("").singleOpt)
  }
  override def selectByIds(businessentityids: List[EmployeeId])(implicit c: Connection): List[EmployeeRow] = {
    SQL"""select businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode from humanresources.employee where businessentityid in $businessentityids""".as(EmployeeRow.rowParser("").*)
  }
  override def update(businessentityid: EmployeeId, row: EmployeeRow)(implicit c: Connection): Boolean = {
    SQL"""update humanresources.employee
          set nationalidnumber = ${row.nationalidnumber},
              loginid = ${row.loginid},
              jobtitle = ${row.jobtitle},
              birthdate = ${row.birthdate},
              maritalstatus = ${row.maritalstatus},
              gender = ${row.gender},
              hiredate = ${row.hiredate},
              salariedflag = ${row.salariedflag},
              vacationhours = ${row.vacationhours},
              sickleavehours = ${row.sickleavehours},
              currentflag = ${row.currentflag},
              rowguid = ${row.rowguid},
              modifieddate = ${row.modifieddate},
              organizationnode = ${row.organizationnode}
          where businessentityid = $businessentityid""".executeUpdate() > 0
  }
  override def updateFieldValues(businessentityid: EmployeeId, fieldValues: List[EmployeeFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case EmployeeFieldValue.nationalidnumber(value) => NamedParameter("nationalidnumber", ParameterValue.from(value))
          case EmployeeFieldValue.loginid(value) => NamedParameter("loginid", ParameterValue.from(value))
          case EmployeeFieldValue.jobtitle(value) => NamedParameter("jobtitle", ParameterValue.from(value))
          case EmployeeFieldValue.birthdate(value) => NamedParameter("birthdate", ParameterValue.from(value))
          case EmployeeFieldValue.maritalstatus(value) => NamedParameter("maritalstatus", ParameterValue.from(value))
          case EmployeeFieldValue.gender(value) => NamedParameter("gender", ParameterValue.from(value))
          case EmployeeFieldValue.hiredate(value) => NamedParameter("hiredate", ParameterValue.from(value))
          case EmployeeFieldValue.salariedflag(value) => NamedParameter("salariedflag", ParameterValue.from(value))
          case EmployeeFieldValue.vacationhours(value) => NamedParameter("vacationhours", ParameterValue.from(value))
          case EmployeeFieldValue.sickleavehours(value) => NamedParameter("sickleavehours", ParameterValue.from(value))
          case EmployeeFieldValue.currentflag(value) => NamedParameter("currentflag", ParameterValue.from(value))
          case EmployeeFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case EmployeeFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
          case EmployeeFieldValue.organizationnode(value) => NamedParameter("organizationnode", ParameterValue.from(value))
        }
        val q = s"""update humanresources.employee
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where businessentityid = $businessentityid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
