/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class EmployeeRow(
  /** Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"businessentityid","ordinal_position":1,"is_nullable":"NO","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  nationalidnumber: String /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"nationalidnumber","ordinal_position":2,"is_nullable":"NO","data_type":"character varying","character_maximum_length":15,"character_octet_length":60,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  loginid: String /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"loginid","ordinal_position":3,"is_nullable":"NO","data_type":"character varying","character_maximum_length":256,"character_octet_length":1024,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  jobtitle: String /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"jobtitle","ordinal_position":6,"is_nullable":"NO","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  birthdate: LocalDate /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"birthdate","ordinal_position":7,"is_nullable":"NO","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  maritalstatus: /* bpchar */ String /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"maritalstatus","ordinal_position":8,"is_nullable":"NO","data_type":"character","character_maximum_length":1,"character_octet_length":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bpchar","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  gender: /* bpchar */ String /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"gender","ordinal_position":9,"is_nullable":"NO","data_type":"character","character_maximum_length":1,"character_octet_length":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bpchar","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  hiredate: LocalDate /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"hiredate","ordinal_position":10,"is_nullable":"NO","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  salariedflag: Boolean /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"salariedflag","ordinal_position":11,"column_default":"true","is_nullable":"NO","data_type":"boolean","domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Flag","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  vacationhours: Int /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"vacationhours","ordinal_position":12,"column_default":"0","is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  sickleavehours: Int /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"sickleavehours","ordinal_position":13,"column_default":"0","is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"13","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  currentflag: Boolean /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"currentflag","ordinal_position":14,"column_default":"true","is_nullable":"NO","data_type":"boolean","domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Flag","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"14","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  rowguid: UUID /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"rowguid","ordinal_position":15,"column_default":"uuid_generate_v1()","is_nullable":"NO","data_type":"uuid","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"uuid","dtd_identifier":"15","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  modifieddate: LocalDateTime /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"modifieddate","ordinal_position":16,"column_default":"now()","is_nullable":"NO","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"16","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  organizationnode: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"organizationnode","ordinal_position":17,"column_default":"'/'::character varying","is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"17","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object EmployeeRow {
  def rowParser(prefix: String): RowParser[EmployeeRow] = { row =>
    Success(
      EmployeeRow(
        businessentityid = row[BusinessentityId](prefix + "businessentityid"),
        nationalidnumber = row[String](prefix + "nationalidnumber"),
        loginid = row[String](prefix + "loginid"),
        jobtitle = row[String](prefix + "jobtitle"),
        birthdate = row[LocalDate](prefix + "birthdate"),
        maritalstatus = row[/* bpchar */ String](prefix + "maritalstatus"),
        gender = row[/* bpchar */ String](prefix + "gender"),
        hiredate = row[LocalDate](prefix + "hiredate"),
        salariedflag = row[Boolean](prefix + "salariedflag"),
        vacationhours = row[Int](prefix + "vacationhours"),
        sickleavehours = row[Int](prefix + "sickleavehours"),
        currentflag = row[Boolean](prefix + "currentflag"),
        rowguid = row[UUID](prefix + "rowguid"),
        modifieddate = row[LocalDateTime](prefix + "modifieddate"),
        organizationnode = row[Option[String]](prefix + "organizationnode")
      )
    )
  }

  implicit val oFormat: OFormat[EmployeeRow] = new OFormat[EmployeeRow]{
    override def writes(o: EmployeeRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "nationalidnumber" -> o.nationalidnumber,
        "loginid" -> o.loginid,
        "jobtitle" -> o.jobtitle,
        "birthdate" -> o.birthdate,
        "maritalstatus" -> o.maritalstatus,
        "gender" -> o.gender,
        "hiredate" -> o.hiredate,
        "salariedflag" -> o.salariedflag,
        "vacationhours" -> o.vacationhours,
        "sickleavehours" -> o.sickleavehours,
        "currentflag" -> o.currentflag,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate,
        "organizationnode" -> o.organizationnode
      )
  
    override def reads(json: JsValue): JsResult[EmployeeRow] = {
      JsResult.fromTry(
        Try(
          EmployeeRow(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            nationalidnumber = json.\("nationalidnumber").as[String],
            loginid = json.\("loginid").as[String],
            jobtitle = json.\("jobtitle").as[String],
            birthdate = json.\("birthdate").as[LocalDate],
            maritalstatus = json.\("maritalstatus").as[/* bpchar */ String],
            gender = json.\("gender").as[/* bpchar */ String],
            hiredate = json.\("hiredate").as[LocalDate],
            salariedflag = json.\("salariedflag").as[Boolean],
            vacationhours = json.\("vacationhours").as[Int],
            sickleavehours = json.\("sickleavehours").as[Int],
            currentflag = json.\("currentflag").as[Boolean],
            rowguid = json.\("rowguid").as[UUID],
            modifieddate = json.\("modifieddate").as[LocalDateTime],
            organizationnode = json.\("organizationnode").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
