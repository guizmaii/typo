/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateeducation

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VjobcandidateeducationRepoImpl extends VjobcandidateeducationRepo {
  override def selectAll(implicit c: Connection): List[VjobcandidateeducationRow] = {
    SQL"""select jobcandidateid, Edu.Level, Edu.StartDate, Edu.EndDate, Edu.Degree, Edu.Major, Edu.Minor, Edu.GPA, Edu.GPAScale, Edu.School, Edu.Loc.CountryRegion, Edu.Loc.State, Edu.Loc.City from humanresources.vjobcandidateeducation""".as(VjobcandidateeducationRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VjobcandidateeducationFieldOrIdValue[_]])(implicit c: Connection): List[VjobcandidateeducationRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VjobcandidateeducationFieldValue.jobcandidateid(value) => NamedParameter("jobcandidateid", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.Level`(value) => NamedParameter("Edu.Level", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.StartDate`(value) => NamedParameter("Edu.StartDate", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.EndDate`(value) => NamedParameter("Edu.EndDate", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.Degree`(value) => NamedParameter("Edu.Degree", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.Major`(value) => NamedParameter("Edu.Major", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.Minor`(value) => NamedParameter("Edu.Minor", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.GPA`(value) => NamedParameter("Edu.GPA", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.GPAScale`(value) => NamedParameter("Edu.GPAScale", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.School`(value) => NamedParameter("Edu.School", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.Loc.CountryRegion`(value) => NamedParameter("Edu.Loc.CountryRegion", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.Loc.State`(value) => NamedParameter("Edu.Loc.State", ParameterValue.from(value))
          case VjobcandidateeducationFieldValue.`Edu.Loc.City`(value) => NamedParameter("Edu.Loc.City", ParameterValue.from(value))
        }
        val q = s"""select * from humanresources.vjobcandidateeducation where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VjobcandidateeducationRow.rowParser("").*)
    }
  
  }
}
