/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object CultureRepoImpl extends CultureRepo {
  override def delete(cultureid: CultureId)(implicit c: Connection): Boolean = {
    SQL"""delete from production.culture where cultureid = $cultureid""".executeUpdate() > 0
  }
  override def insert(cultureid: CultureId, unsaved: CultureRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("name", ParameterValue.from(unsaved.name))),
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into production.culture(cultureid, ${namedParameters.map(_.name).mkString(", ")})
          values (${cultureid}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[CultureRow] = {
    SQL"""select cultureid, name, modifieddate from production.culture""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[CultureFieldOrIdValue[_]])(implicit c: Connection): List[CultureRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CultureFieldValue.cultureid(value) => NamedParameter("cultureid", ParameterValue.from(value))
          case CultureFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case CultureFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from production.culture where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(cultureid: CultureId)(implicit c: Connection): Option[CultureRow] = {
    SQL"""select cultureid, name, modifieddate from production.culture where cultureid = $cultureid""".as(rowParser.singleOpt)
  }
  override def selectByIds(cultureids: List[CultureId])(implicit c: Connection): List[CultureRow] = {
    SQL"""select cultureid, name, modifieddate from production.culture where cultureid in $cultureids""".as(rowParser.*)
  }
  override def update(cultureid: CultureId, row: CultureRow)(implicit c: Connection): Boolean = {
    SQL"""update production.culture
          set name = ${row.name},
              modifieddate = ${row.modifieddate}
          where cultureid = $cultureid""".executeUpdate() > 0
  }
  override def updateFieldValues(cultureid: CultureId, fieldValues: List[CultureFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CultureFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case CultureFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update production.culture
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where cultureid = $cultureid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[CultureRow] =
    RowParser[CultureRow] { row =>
      Success(
        CultureRow(
          cultureid = row[CultureId]("cultureid"),
          name = row[Name]("name"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[CultureId] =
    SqlParser.get[CultureId]("cultureid")
}
