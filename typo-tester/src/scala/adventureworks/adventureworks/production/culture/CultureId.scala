/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import anorm.Column
import anorm.ParameterMetaData
import anorm.RowParser
import anorm.SqlParser
import anorm.ToStatement
import play.api.libs.json.Format

case class CultureId(value: String) extends AnyVal
object CultureId {
  implicit val ordering: Ordering[CultureId] = Ordering.by(_.value)
  implicit val format: Format[CultureId] = implicitly[Format[String]].bimap(CultureId.apply, _.value)
  implicit val toStatement: ToStatement[CultureId] = implicitly[ToStatement[String]].contramap(_.value)
  implicit val column: Column[CultureId] = implicitly[Column[String]].map(CultureId.apply)
  def rowParser(prefix: String): RowParser[CultureId] = SqlParser.get[CultureId](prefix + "cultureid")
  implicit val parameterMetadata: ParameterMetaData[CultureId] = new ParameterMetaData[CultureId] {
    override def sqlType: String = implicitly[ParameterMetaData[String]].sqlType
    override def jdbcType: Int = implicitly[ParameterMetaData[String]].jdbcType
  }

}
