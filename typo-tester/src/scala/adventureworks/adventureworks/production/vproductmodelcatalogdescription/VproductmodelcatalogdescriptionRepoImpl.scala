/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package vproductmodelcatalogdescription

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object VproductmodelcatalogdescriptionRepoImpl extends VproductmodelcatalogdescriptionRepo {
  override def selectAll(implicit c: Connection): List[VproductmodelcatalogdescriptionRow] = {
    SQL"""select productmodelid, name, Summary, manufacturer, copyright, producturl, warrantyperiod, warrantydescription, noofyears, maintenancedescription, wheel, saddle, pedal, bikeframe, crankset, pictureangle, picturesize, productphotoid, material, color, productline, style, riderexperience, rowguid, modifieddate from production.vproductmodelcatalogdescription""".as(VproductmodelcatalogdescriptionRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[VproductmodelcatalogdescriptionFieldOrIdValue[_]])(implicit c: Connection): List[VproductmodelcatalogdescriptionRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VproductmodelcatalogdescriptionFieldValue.productmodelid(value) => NamedParameter("productmodelid", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.Summary(value) => NamedParameter("Summary", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.manufacturer(value) => NamedParameter("manufacturer", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.copyright(value) => NamedParameter("copyright", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.producturl(value) => NamedParameter("producturl", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.warrantyperiod(value) => NamedParameter("warrantyperiod", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.warrantydescription(value) => NamedParameter("warrantydescription", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.noofyears(value) => NamedParameter("noofyears", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.maintenancedescription(value) => NamedParameter("maintenancedescription", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.wheel(value) => NamedParameter("wheel", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.saddle(value) => NamedParameter("saddle", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.pedal(value) => NamedParameter("pedal", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.bikeframe(value) => NamedParameter("bikeframe", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.crankset(value) => NamedParameter("crankset", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.pictureangle(value) => NamedParameter("pictureangle", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.picturesize(value) => NamedParameter("picturesize", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.productphotoid(value) => NamedParameter("productphotoid", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.material(value) => NamedParameter("material", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.color(value) => NamedParameter("color", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.productline(value) => NamedParameter("productline", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.style(value) => NamedParameter("style", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.riderexperience(value) => NamedParameter("riderexperience", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case VproductmodelcatalogdescriptionFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from production.vproductmodelcatalogdescription where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(VproductmodelcatalogdescriptionRow.rowParser("").*)
    }
  
  }
}
