/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productphoto

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime

object ProductphotoRepoImpl extends ProductphotoRepo {
  override def delete(productphotoid: ProductphotoId)(implicit c: Connection): Boolean = {
    SQL"""delete from production.productphoto where productphotoid = $productphotoid""".executeUpdate() > 0
  }
  override def insert(unsaved: ProductphotoRowUnsaved)(implicit c: Connection): ProductphotoId = {
    val namedParameters = List(
      Some(NamedParameter("thumbnailphoto", ParameterValue.from(unsaved.thumbnailphoto))),
      Some(NamedParameter("thumbnailphotofilename", ParameterValue.from(unsaved.thumbnailphotofilename))),
      Some(NamedParameter("largephoto", ParameterValue.from(unsaved.largephoto))),
      Some(NamedParameter("largephotofilename", ParameterValue.from(unsaved.largephotofilename))),
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into production.productphoto(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning productphotoid
    """
      .on(namedParameters :_*)
      .executeInsert(ProductphotoId.rowParser("").single)
  
  }
  override def selectAll(implicit c: Connection): List[ProductphotoRow] = {
    SQL"""select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate from production.productphoto""".as(ProductphotoRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[ProductphotoFieldOrIdValue[_]])(implicit c: Connection): List[ProductphotoRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductphotoFieldValue.productphotoid(value) => NamedParameter("productphotoid", ParameterValue.from(value))
          case ProductphotoFieldValue.thumbnailphoto(value) => NamedParameter("thumbnailphoto", ParameterValue.from(value))
          case ProductphotoFieldValue.thumbnailphotofilename(value) => NamedParameter("thumbnailphotofilename", ParameterValue.from(value))
          case ProductphotoFieldValue.largephoto(value) => NamedParameter("largephoto", ParameterValue.from(value))
          case ProductphotoFieldValue.largephotofilename(value) => NamedParameter("largephotofilename", ParameterValue.from(value))
          case ProductphotoFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from production.productphoto where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(ProductphotoRow.rowParser("").*)
    }
  
  }
  override def selectById(productphotoid: ProductphotoId)(implicit c: Connection): Option[ProductphotoRow] = {
    SQL"""select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate from production.productphoto where productphotoid = $productphotoid""".as(ProductphotoRow.rowParser("").singleOpt)
  }
  override def selectByIds(productphotoids: List[ProductphotoId])(implicit c: Connection): List[ProductphotoRow] = {
    SQL"""select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate from production.productphoto where productphotoid in $productphotoids""".as(ProductphotoRow.rowParser("").*)
  }
  override def update(productphotoid: ProductphotoId, row: ProductphotoRow)(implicit c: Connection): Boolean = {
    SQL"""update production.productphoto
          set thumbnailphoto = ${row.thumbnailphoto},
              thumbnailphotofilename = ${row.thumbnailphotofilename},
              largephoto = ${row.largephoto},
              largephotofilename = ${row.largephotofilename},
              modifieddate = ${row.modifieddate}
          where productphotoid = $productphotoid""".executeUpdate() > 0
  }
  override def updateFieldValues(productphotoid: ProductphotoId, fieldValues: List[ProductphotoFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductphotoFieldValue.thumbnailphoto(value) => NamedParameter("thumbnailphoto", ParameterValue.from(value))
          case ProductphotoFieldValue.thumbnailphotofilename(value) => NamedParameter("thumbnailphotofilename", ParameterValue.from(value))
          case ProductphotoFieldValue.largephoto(value) => NamedParameter("largephoto", ParameterValue.from(value))
          case ProductphotoFieldValue.largephotofilename(value) => NamedParameter("largephotofilename", ParameterValue.from(value))
          case ProductphotoFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update production.productphoto
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where productphotoid = $productphotoid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
