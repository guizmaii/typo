/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class IllustrationRow(
  illustrationid: IllustrationId /* {"table_catalog":"Adventureworks","table_schema":"production","table_name":"illustration","column_name":"illustrationid","ordinal_position":1,"column_default":"nextval('production.illustration_illustrationid_seq'::regclass)","is_nullable":"NO","data_type":"integer","numeric_precision":32,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int4","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  diagram: Option[String] /* {"table_catalog":"Adventureworks","table_schema":"production","table_name":"illustration","column_name":"diagram","ordinal_position":2,"is_nullable":"YES","data_type":"xml","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"xml","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */,
  modifieddate: LocalDateTime /* {"table_catalog":"Adventureworks","table_schema":"production","table_name":"illustration","column_name":"modifieddate","ordinal_position":3,"column_default":"now()","is_nullable":"NO","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
)

object IllustrationRow {
  def rowParser(prefix: String): RowParser[IllustrationRow] = { row =>
    Success(
      IllustrationRow(
        illustrationid = row[IllustrationId](prefix + "illustrationid"),
        diagram = row[Option[String]](prefix + "diagram"),
        modifieddate = row[LocalDateTime](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[IllustrationRow] = new OFormat[IllustrationRow]{
    override def writes(o: IllustrationRow): JsObject =
      Json.obj(
        "illustrationid" -> o.illustrationid,
        "diagram" -> o.diagram,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[IllustrationRow] = {
      JsResult.fromTry(
        Try(
          IllustrationRow(
            illustrationid = json.\("illustrationid").as[IllustrationId],
            diagram = json.\("diagram").toOption.map(_.as[String]),
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
