/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object IllustrationRepoImpl extends IllustrationRepo {
  override def delete(illustrationid: IllustrationId)(implicit c: Connection): Boolean = {
    SQL"""delete from production.illustration where illustrationid = $illustrationid""".executeUpdate() > 0
  }
  override def insert(unsaved: IllustrationRowUnsaved)(implicit c: Connection): IllustrationId = {
    val namedParameters = List(
      Some(NamedParameter("diagram", ParameterValue.from(unsaved.diagram))),
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into production.illustration(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning illustrationid
    """
      .on(namedParameters :_*)
      .executeInsert(idRowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[IllustrationRow] = {
    SQL"""select illustrationid, diagram, modifieddate from production.illustration""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[IllustrationFieldOrIdValue[_]])(implicit c: Connection): List[IllustrationRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case IllustrationFieldValue.illustrationid(value) => NamedParameter("illustrationid", ParameterValue.from(value))
          case IllustrationFieldValue.diagram(value) => NamedParameter("diagram", ParameterValue.from(value))
          case IllustrationFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from production.illustration where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(illustrationid: IllustrationId)(implicit c: Connection): Option[IllustrationRow] = {
    SQL"""select illustrationid, diagram, modifieddate from production.illustration where illustrationid = $illustrationid""".as(rowParser.singleOpt)
  }
  override def selectByIds(illustrationids: List[IllustrationId])(implicit c: Connection): List[IllustrationRow] = {
    SQL"""select illustrationid, diagram, modifieddate from production.illustration where illustrationid in $illustrationids""".as(rowParser.*)
  }
  override def update(illustrationid: IllustrationId, row: IllustrationRow)(implicit c: Connection): Boolean = {
    SQL"""update production.illustration
          set diagram = ${row.diagram},
              modifieddate = ${row.modifieddate}
          where illustrationid = $illustrationid""".executeUpdate() > 0
  }
  override def updateFieldValues(illustrationid: IllustrationId, fieldValues: List[IllustrationFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case IllustrationFieldValue.diagram(value) => NamedParameter("diagram", ParameterValue.from(value))
          case IllustrationFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update production.illustration
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where illustrationid = $illustrationid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[IllustrationRow] =
    RowParser[IllustrationRow] { row =>
      Success(
        IllustrationRow(
          illustrationid = row[IllustrationId]("illustrationid"),
          diagram = row[Option[/* xml */ String]]("diagram"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[IllustrationId] =
    SqlParser.get[IllustrationId]("illustrationid")
}
