/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productcosthistory

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object ProductcosthistoryRepoImpl extends ProductcosthistoryRepo {
  override def delete(compositeId: ProductcosthistoryId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productcosthistory where productid = ${compositeId.productid}, startdate = ${compositeId.startdate}".executeUpdate() > 0
  }
  override def insert(compositeId: ProductcosthistoryId, unsaved: ProductcosthistoryRowUnsaved)(implicit c: Connection): Boolean = {
    val namedParameters = List(
      Some(NamedParameter("enddate", ParameterValue.from(unsaved.enddate))),
      Some(NamedParameter("standardcost", ParameterValue.from(unsaved.standardcost))),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into production.productcosthistory(productid, startdate, ${namedParameters.map(_.name).mkString(", ")})
          values (${compositeId.productid}, ${compositeId.startdate}, ${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
    """
      .on(namedParameters :_*)
      .execute()
  
  }
  override def selectAll(implicit c: Connection): List[ProductcosthistoryRow] = {
    SQL"select productid, startdate, enddate, standardcost, modifieddate from production.productcosthistory".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[ProductcosthistoryFieldOrIdValue[_]])(implicit c: Connection): List[ProductcosthistoryRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductcosthistoryFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case ProductcosthistoryFieldValue.startdate(value) => NamedParameter("startdate", ParameterValue.from(value))
          case ProductcosthistoryFieldValue.enddate(value) => NamedParameter("enddate", ParameterValue.from(value))
          case ProductcosthistoryFieldValue.standardcost(value) => NamedParameter("standardcost", ParameterValue.from(value))
          case ProductcosthistoryFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from production.productcosthistory where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: ProductcosthistoryId)(implicit c: Connection): Option[ProductcosthistoryRow] = {
    SQL"select productid, startdate, enddate, standardcost, modifieddate from production.productcosthistory where productid = ${compositeId.productid}, startdate = ${compositeId.startdate}".as(rowParser.singleOpt)
  }
  override def update(row: ProductcosthistoryRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update production.productcosthistory
          set enddate = ${row.enddate},
              standardcost = ${row.standardcost},
              modifieddate = ${row.modifieddate}
          where productid = ${compositeId.productid}, startdate = ${compositeId.startdate}""".executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: ProductcosthistoryId, fieldValues: List[ProductcosthistoryFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductcosthistoryFieldValue.enddate(value) => NamedParameter("enddate", ParameterValue.from(value))
          case ProductcosthistoryFieldValue.standardcost(value) => NamedParameter("standardcost", ParameterValue.from(value))
          case ProductcosthistoryFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update production.productcosthistory
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where productid = ${compositeId.productid}, startdate = ${compositeId.startdate}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[ProductcosthistoryRow] =
    RowParser[ProductcosthistoryRow] { row =>
      Success(
        ProductcosthistoryRow(
          productid = row[ProductId]("productid"),
          startdate = row[LocalDateTime]("startdate"),
          enddate = row[Option[LocalDateTime]]("enddate"),
          standardcost = row[BigDecimal]("standardcost"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[ProductcosthistoryId] =
    RowParser[ProductcosthistoryId] { row =>
      Success(
        ProductcosthistoryId(
          productid = row[ProductId]("productid"),
          startdate = row[LocalDateTime]("startdate")
        )
      )
    }
}
