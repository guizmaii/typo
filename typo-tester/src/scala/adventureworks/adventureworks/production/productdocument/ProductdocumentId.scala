/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdocument

import adventureworks.production.document.DocumentId
import adventureworks.production.product.ProductId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ProductdocumentId(productid: ProductId, documentnode: DocumentId)
object ProductdocumentId {
  implicit def ordering: Ordering[ProductdocumentId] = Ordering.by(x => (x.productid, x.documentnode))
  implicit val oFormat: OFormat[ProductdocumentId] = new OFormat[ProductdocumentId]{
    override def writes(o: ProductdocumentId): JsObject =
      Json.obj(
        "productid" -> o.productid,
        "documentnode" -> o.documentnode
      )
  
    override def reads(json: JsValue): JsResult[ProductdocumentId] = {
      JsResult.fromTry(
        Try(
          ProductdocumentId(
            productid = json.\("productid").as[ProductId],
            documentnode = json.\("documentnode").as[DocumentId]
          )
        )
      )
    }
  }
  def rowParser(prefix: String): RowParser[ProductdocumentId] = { row =>
    Success(
      ProductdocumentId(
        productid = row[ProductId](prefix + "productid"),
        documentnode = row[DocumentId](prefix + "documentnode")
      )
    )
  }

}
