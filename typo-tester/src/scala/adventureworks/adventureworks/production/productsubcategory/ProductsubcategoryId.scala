/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productsubcategory

import anorm.Column
import anorm.ParameterMetaData
import anorm.RowParser
import anorm.SqlParser
import anorm.ToStatement
import play.api.libs.json.Format

case class ProductsubcategoryId(value: Int) extends AnyVal
object ProductsubcategoryId {
  implicit val ordering: Ordering[ProductsubcategoryId] = Ordering.by(_.value)
  implicit val format: Format[ProductsubcategoryId] = implicitly[Format[Int]].bimap(ProductsubcategoryId.apply, _.value)
  implicit val toStatement: ToStatement[ProductsubcategoryId] = implicitly[ToStatement[Int]].contramap(_.value)
  implicit val column: Column[ProductsubcategoryId] = implicitly[Column[Int]].map(ProductsubcategoryId.apply)
  def rowParser(prefix: String): RowParser[ProductsubcategoryId] = SqlParser.get[ProductsubcategoryId](prefix + "productsubcategoryid")
  implicit val parameterMetadata: ParameterMetaData[ProductsubcategoryId] = new ParameterMetaData[ProductsubcategoryId] {
    override def sqlType: String = implicitly[ParameterMetaData[Int]].sqlType
    override def jdbcType: Int = implicitly[ParameterMetaData[Int]].jdbcType
  }

}
