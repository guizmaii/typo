/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package scrapreason

import adventureworks.Defaulted.Provided
import adventureworks.Defaulted.UseDefault
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlParser
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime

object ScrapreasonRepoImpl extends ScrapreasonRepo {
  override def delete(scrapreasonid: ScrapreasonId)(implicit c: Connection): Boolean = {
    SQL"""delete from production.scrapreason where scrapreasonid = $scrapreasonid""".executeUpdate() > 0
  }
  override def insert(unsaved: ScrapreasonRowUnsaved)(implicit c: Connection): ScrapreasonId = {
    val namedParameters = List(
      Some(NamedParameter("name", ParameterValue.from(unsaved.name))),
      unsaved.modifieddate match {
        case UseDefault => None
        case Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into production.scrapreason(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning scrapreasonid
    """
      .on(namedParameters :_*)
      .executeInsert(SqlParser.get[ScrapreasonId]("scrapreasonid").single)
  
  }
  override def selectAll(implicit c: Connection): List[ScrapreasonRow] = {
    SQL"""select scrapreasonid, name, modifieddate from production.scrapreason""".as(ScrapreasonRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[ScrapreasonFieldOrIdValue[_]])(implicit c: Connection): List[ScrapreasonRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ScrapreasonFieldValue.scrapreasonid(value) => NamedParameter("scrapreasonid", ParameterValue.from(value))
          case ScrapreasonFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case ScrapreasonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from production.scrapreason where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(ScrapreasonRow.rowParser("").*)
    }
  
  }
  override def selectById(scrapreasonid: ScrapreasonId)(implicit c: Connection): Option[ScrapreasonRow] = {
    SQL"""select scrapreasonid, name, modifieddate from production.scrapreason where scrapreasonid = $scrapreasonid""".as(ScrapreasonRow.rowParser("").singleOpt)
  }
  override def selectByIds(scrapreasonids: List[ScrapreasonId])(implicit c: Connection): List[ScrapreasonRow] = {
    SQL"""select scrapreasonid, name, modifieddate from production.scrapreason where scrapreasonid in $scrapreasonids""".as(ScrapreasonRow.rowParser("").*)
  }
  override def update(scrapreasonid: ScrapreasonId, row: ScrapreasonRow)(implicit c: Connection): Boolean = {
    SQL"""update production.scrapreason
          set name = ${row.name},
              modifieddate = ${row.modifieddate}
          where scrapreasonid = $scrapreasonid""".executeUpdate() > 0
  }
  override def updateFieldValues(scrapreasonid: ScrapreasonId, fieldValues: List[ScrapreasonFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ScrapreasonFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case ScrapreasonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update production.scrapreason
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where scrapreasonid = $scrapreasonid"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
}
