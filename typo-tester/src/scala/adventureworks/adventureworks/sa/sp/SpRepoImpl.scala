/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sp

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SpRepoImpl extends SpRepo {
  override def selectAll(implicit c: Connection): List[SpRow] = {
    SQL"""select id, businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate from sa.sp""".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SpFieldOrIdValue[_]])(implicit c: Connection): List[SpRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SpFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case SpFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case SpFieldValue.territoryid(value) => NamedParameter("territoryid", ParameterValue.from(value))
          case SpFieldValue.salesquota(value) => NamedParameter("salesquota", ParameterValue.from(value))
          case SpFieldValue.bonus(value) => NamedParameter("bonus", ParameterValue.from(value))
          case SpFieldValue.commissionpct(value) => NamedParameter("commissionpct", ParameterValue.from(value))
          case SpFieldValue.salesytd(value) => NamedParameter("salesytd", ParameterValue.from(value))
          case SpFieldValue.saleslastyear(value) => NamedParameter("saleslastyear", ParameterValue.from(value))
          case SpFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SpFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sa.sp where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[SpRow] =
    RowParser[SpRow] { row =>
      Success(
        SpRow(
          id = row[Option[Int]]("id"),
          businessentityid = row[Option[BusinessentityId]]("businessentityid"),
          territoryid = row[Option[SalesterritoryId]]("territoryid"),
          salesquota = row[Option[BigDecimal]]("salesquota"),
          bonus = row[Option[BigDecimal]]("bonus"),
          commissionpct = row[Option[BigDecimal]]("commissionpct"),
          salesytd = row[Option[BigDecimal]]("salesytd"),
          saleslastyear = row[Option[BigDecimal]]("saleslastyear"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
