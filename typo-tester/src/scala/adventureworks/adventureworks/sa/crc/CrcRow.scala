/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package crc

import adventureworks.person.countryregion.CountryregionId
import adventureworks.sales.currency.CurrencyId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class CrcRow(
  /** Points to [[sales.countryregioncurrency.CountryregioncurrencyRow.countryregioncode]]
      debug: {"table_catalog":"Adventureworks","table_schema":"sa","table_name":"crc","column_name":"countryregioncode","ordinal_position":1,"is_nullable":"YES","data_type":"character varying","character_maximum_length":3,"character_octet_length":12,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  countryregioncode: Option[CountryregionId],
  /** Points to [[sales.countryregioncurrency.CountryregioncurrencyRow.currencycode]]
      debug: {"table_catalog":"Adventureworks","table_schema":"sa","table_name":"crc","column_name":"currencycode","ordinal_position":2,"is_nullable":"YES","data_type":"character","character_maximum_length":3,"character_octet_length":12,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bpchar","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  currencycode: Option[CurrencyId],
  /** Points to [[sales.countryregioncurrency.CountryregioncurrencyRow.modifieddate]]
      debug: {"table_catalog":"Adventureworks","table_schema":"sa","table_name":"crc","column_name":"modifieddate","ordinal_position":3,"is_nullable":"YES","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  modifieddate: Option[LocalDateTime]
)

object CrcRow {
  def rowParser(prefix: String): RowParser[CrcRow] = { row =>
    Success(
      CrcRow(
        countryregioncode = row[Option[CountryregionId]](prefix + "countryregioncode"),
        currencycode = row[Option[CurrencyId]](prefix + "currencycode"),
        modifieddate = row[Option[LocalDateTime]](prefix + "modifieddate")
      )
    )
  }

  implicit val oFormat: OFormat[CrcRow] = new OFormat[CrcRow]{
    override def writes(o: CrcRow): JsObject =
      Json.obj(
        "countryregioncode" -> o.countryregioncode,
        "currencycode" -> o.currencycode,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[CrcRow] = {
      JsResult.fromTry(
        Try(
          CrcRow(
            countryregioncode = json.\("countryregioncode").toOption.map(_.as[CountryregionId]),
            currencycode = json.\("currencycode").toOption.map(_.as[CurrencyId]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
