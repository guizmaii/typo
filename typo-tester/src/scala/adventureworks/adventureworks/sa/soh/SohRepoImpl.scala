/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package soh

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object SohRepoImpl extends SohRepo {
  override def selectAll(implicit c: Connection): List[SohRow] = {
    SQL"""select id, salesorderid, revisionnumber, orderdate, duedate, shipdate, status, onlineorderflag, purchaseordernumber, accountnumber, customerid, salespersonid, territoryid, billtoaddressid, shiptoaddressid, shipmethodid, creditcardid, creditcardapprovalcode, currencyrateid, subtotal, taxamt, freight, totaldue, comment, rowguid, modifieddate from sa.soh""".as(SohRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[SohFieldOrIdValue[_]])(implicit c: Connection): List[SohRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SohFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case SohFieldValue.salesorderid(value) => NamedParameter("salesorderid", ParameterValue.from(value))
          case SohFieldValue.revisionnumber(value) => NamedParameter("revisionnumber", ParameterValue.from(value))
          case SohFieldValue.orderdate(value) => NamedParameter("orderdate", ParameterValue.from(value))
          case SohFieldValue.duedate(value) => NamedParameter("duedate", ParameterValue.from(value))
          case SohFieldValue.shipdate(value) => NamedParameter("shipdate", ParameterValue.from(value))
          case SohFieldValue.status(value) => NamedParameter("status", ParameterValue.from(value))
          case SohFieldValue.onlineorderflag(value) => NamedParameter("onlineorderflag", ParameterValue.from(value))
          case SohFieldValue.purchaseordernumber(value) => NamedParameter("purchaseordernumber", ParameterValue.from(value))
          case SohFieldValue.accountnumber(value) => NamedParameter("accountnumber", ParameterValue.from(value))
          case SohFieldValue.customerid(value) => NamedParameter("customerid", ParameterValue.from(value))
          case SohFieldValue.salespersonid(value) => NamedParameter("salespersonid", ParameterValue.from(value))
          case SohFieldValue.territoryid(value) => NamedParameter("territoryid", ParameterValue.from(value))
          case SohFieldValue.billtoaddressid(value) => NamedParameter("billtoaddressid", ParameterValue.from(value))
          case SohFieldValue.shiptoaddressid(value) => NamedParameter("shiptoaddressid", ParameterValue.from(value))
          case SohFieldValue.shipmethodid(value) => NamedParameter("shipmethodid", ParameterValue.from(value))
          case SohFieldValue.creditcardid(value) => NamedParameter("creditcardid", ParameterValue.from(value))
          case SohFieldValue.creditcardapprovalcode(value) => NamedParameter("creditcardapprovalcode", ParameterValue.from(value))
          case SohFieldValue.currencyrateid(value) => NamedParameter("currencyrateid", ParameterValue.from(value))
          case SohFieldValue.subtotal(value) => NamedParameter("subtotal", ParameterValue.from(value))
          case SohFieldValue.taxamt(value) => NamedParameter("taxamt", ParameterValue.from(value))
          case SohFieldValue.freight(value) => NamedParameter("freight", ParameterValue.from(value))
          case SohFieldValue.totaldue(value) => NamedParameter("totaldue", ParameterValue.from(value))
          case SohFieldValue.comment(value) => NamedParameter("comment", ParameterValue.from(value))
          case SohFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SohFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sa.soh where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(SohRow.rowParser("").*)
    }
  
  }
}
