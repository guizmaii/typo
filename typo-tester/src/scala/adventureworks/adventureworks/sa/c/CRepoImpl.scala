/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package c

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object CRepoImpl extends CRepo {
  override def selectAll(implicit c: Connection): List[CRow] = {
    SQL"""select id, customerid, personid, storeid, territoryid, rowguid, modifieddate from sa.c""".as(CRow.rowParser("").*)
  }
  override def selectByFieldValues(fieldValues: List[CFieldOrIdValue[_]])(implicit c: Connection): List[CRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case CFieldValue.customerid(value) => NamedParameter("customerid", ParameterValue.from(value))
          case CFieldValue.personid(value) => NamedParameter("personid", ParameterValue.from(value))
          case CFieldValue.storeid(value) => NamedParameter("storeid", ParameterValue.from(value))
          case CFieldValue.territoryid(value) => NamedParameter("territoryid", ParameterValue.from(value))
          case CFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case CFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sa.c where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(CRow.rowParser("").*)
    }
  
  }
}
