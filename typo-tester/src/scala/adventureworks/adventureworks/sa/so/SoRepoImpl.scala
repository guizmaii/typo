/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package so

import adventureworks.sales.specialoffer.SpecialofferId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SoRepoImpl extends SoRepo {
  override def selectAll(implicit c: Connection): List[SoRow] = {
    SQL"select id, specialofferid, description, discountpct, type, category, startdate, enddate, minqty, maxqty, rowguid, modifieddate from sa.so".as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SoFieldOrIdValue[_]])(implicit c: Connection): List[SoRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SoFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case SoFieldValue.specialofferid(value) => NamedParameter("specialofferid", ParameterValue.from(value))
          case SoFieldValue.description(value) => NamedParameter("description", ParameterValue.from(value))
          case SoFieldValue.discountpct(value) => NamedParameter("discountpct", ParameterValue.from(value))
          case SoFieldValue.`type`(value) => NamedParameter("type", ParameterValue.from(value))
          case SoFieldValue.category(value) => NamedParameter("category", ParameterValue.from(value))
          case SoFieldValue.startdate(value) => NamedParameter("startdate", ParameterValue.from(value))
          case SoFieldValue.enddate(value) => NamedParameter("enddate", ParameterValue.from(value))
          case SoFieldValue.minqty(value) => NamedParameter("minqty", ParameterValue.from(value))
          case SoFieldValue.maxqty(value) => NamedParameter("maxqty", ParameterValue.from(value))
          case SoFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SoFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select * from sa.so where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}"""
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[SoRow] =
    RowParser[SoRow] { row =>
      Success(
        SoRow(
          id = row[Option[Int]]("id"),
          specialofferid = row[Option[SpecialofferId]]("specialofferid"),
          description = row[Option[String]]("description"),
          discountpct = row[Option[BigDecimal]]("discountpct"),
          `type` = row[Option[String]]("type"),
          category = row[Option[String]]("category"),
          startdate = row[Option[LocalDateTime]]("startdate"),
          enddate = row[Option[LocalDateTime]]("enddate"),
          minqty = row[Option[Int]]("minqty"),
          maxqty = row[Option[Int]]("maxqty"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
