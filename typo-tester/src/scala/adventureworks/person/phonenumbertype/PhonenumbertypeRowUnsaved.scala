/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package phonenumbertype

import adventureworks.Defaulted
import adventureworks.public.Name
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `person.phonenumbertype` which has not been persisted yet */
case class PhonenumbertypeRowUnsaved(
  /** Name of the telephone number type */
  name: Name,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(phonenumbertypeid: PhonenumbertypeId): PhonenumbertypeRow =
    PhonenumbertypeRow(
      phonenumbertypeid = phonenumbertypeid,
      name = name,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object PhonenumbertypeRowUnsaved {
  implicit val oFormat: OFormat[PhonenumbertypeRowUnsaved] = new OFormat[PhonenumbertypeRowUnsaved]{
    override def writes(o: PhonenumbertypeRowUnsaved): JsObject =
      Json.obj(
        "name" -> o.name,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PhonenumbertypeRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PhonenumbertypeRowUnsaved(
            name = json.\("name").as[Name],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
