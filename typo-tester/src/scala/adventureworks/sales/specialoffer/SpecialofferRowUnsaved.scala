/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialoffer

import adventureworks.Defaulted
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `sales.specialoffer` which has not been persisted yet */
case class SpecialofferRowUnsaved(
  /** Discount description. */
  description: String,
  /** Default: 0.00
      Discount precentage. */
  discountpct: Defaulted[BigDecimal],
  /** Discount type category. */
  `type`: String,
  /** Group the discount applies to such as Reseller or Customer. */
  category: String,
  /** Discount start date. */
  startdate: LocalDateTime,
  /** Discount end date. */
  enddate: LocalDateTime,
  /** Default: 0
      Minimum discount percent allowed. */
  minqty: Defaulted[Int],
  /** Maximum discount percent allowed. */
  maxqty: Option[Int],
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID],
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(specialofferid: SpecialofferId): SpecialofferRow =
    SpecialofferRow(
      specialofferid = specialofferid,
      description = description,
      discountpct = discountpct match {
                      case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                      case Defaulted.Provided(value) => value
                    },
      `type` = `type`,
      category = category,
      startdate = startdate,
      enddate = enddate,
      minqty = minqty match {
                 case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                 case Defaulted.Provided(value) => value
               },
      maxqty = maxqty,
      rowguid = rowguid match {
                  case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object SpecialofferRowUnsaved {
  implicit val oFormat: OFormat[SpecialofferRowUnsaved] = new OFormat[SpecialofferRowUnsaved]{
    override def writes(o: SpecialofferRowUnsaved): JsObject =
      Json.obj(
        "description" -> o.description,
        "discountpct" -> o.discountpct,
        "type" -> o.`type`,
        "category" -> o.category,
        "startdate" -> o.startdate,
        "enddate" -> o.enddate,
        "minqty" -> o.minqty,
        "maxqty" -> o.maxqty,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[SpecialofferRowUnsaved] = {
      JsResult.fromTry(
        Try(
          SpecialofferRowUnsaved(
            description = json.\("description").as[String],
            discountpct = json.\("discountpct").as[Defaulted[BigDecimal]],
            `type` = json.\("type").as[String],
            category = json.\("category").as[String],
            startdate = json.\("startdate").as[LocalDateTime],
            enddate = json.\("enddate").as[LocalDateTime],
            minqty = json.\("minqty").as[Defaulted[Int]],
            maxqty = json.\("maxqty").toOption.map(_.as[Int]),
            rowguid = json.\("rowguid").as[Defaulted[UUID]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
