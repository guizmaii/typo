/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vstorewithdemographics

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import org.postgresql.util.PGmoney

object VstorewithdemographicsRepoImpl extends VstorewithdemographicsRepo {
  override def selectAll(implicit c: Connection): List[VstorewithdemographicsRow] = {
    SQL"""select businessentityid, "name", AnnualSales, AnnualRevenue, BankName, BusinessType, YearOpened, Specialty, SquareFeet, Brands, Internet, NumberEmployees
          from sales.vstorewithdemographics
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[VstorewithdemographicsFieldOrIdValue[_]])(implicit c: Connection): List[VstorewithdemographicsRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VstorewithdemographicsFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.AnnualSales(value) => NamedParameter("AnnualSales", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.AnnualRevenue(value) => NamedParameter("AnnualRevenue", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.BankName(value) => NamedParameter("BankName", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.BusinessType(value) => NamedParameter("BusinessType", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.YearOpened(value) => NamedParameter("YearOpened", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.Specialty(value) => NamedParameter("Specialty", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.SquareFeet(value) => NamedParameter("SquareFeet", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.Brands(value) => NamedParameter("Brands", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.Internet(value) => NamedParameter("Internet", ParameterValue.from(value))
          case VstorewithdemographicsFieldValue.NumberEmployees(value) => NamedParameter("NumberEmployees", ParameterValue.from(value))
        }
        val q = s"""select businessentityid, "name", AnnualSales, AnnualRevenue, BankName, BusinessType, YearOpened, Specialty, SquareFeet, Brands, Internet, NumberEmployees
                    from sales.vstorewithdemographics
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[VstorewithdemographicsRow] =
    RowParser[VstorewithdemographicsRow] { row =>
      Success(
        VstorewithdemographicsRow(
          businessentityid = row[Option[BusinessentityId]]("businessentityid"),
          name = row[Option[Name]]("name"),
          AnnualSales = row[Option[PGmoney]]("AnnualSales"),
          AnnualRevenue = row[Option[PGmoney]]("AnnualRevenue"),
          BankName = row[Option[String]]("BankName"),
          BusinessType = row[Option[String]]("BusinessType"),
          YearOpened = row[Option[Int]]("YearOpened"),
          Specialty = row[Option[String]]("Specialty"),
          SquareFeet = row[Option[Int]]("SquareFeet"),
          Brands = row[Option[String]]("Brands"),
          Internet = row[Option[String]]("Internet"),
          NumberEmployees = row[Option[Int]]("NumberEmployees")
        )
      )
    }
}
