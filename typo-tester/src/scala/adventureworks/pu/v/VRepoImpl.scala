/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package v

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object VRepoImpl extends VRepo {
  override def selectAll(implicit c: Connection): List[VRow] = {
    SQL"""select "id", businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
          from pu.v
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[VFieldOrIdValue[_]])(implicit c: Connection): List[VRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case VFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VFieldValue.accountnumber(value) => NamedParameter("accountnumber", ParameterValue.from(value))
          case VFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case VFieldValue.creditrating(value) => NamedParameter("creditrating", ParameterValue.from(value))
          case VFieldValue.preferredvendorstatus(value) => NamedParameter("preferredvendorstatus", ParameterValue.from(value))
          case VFieldValue.activeflag(value) => NamedParameter("activeflag", ParameterValue.from(value))
          case VFieldValue.purchasingwebserviceurl(value) => NamedParameter("purchasingwebserviceurl", ParameterValue.from(value))
          case VFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select "id", businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
                    from pu.v
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[VRow] =
    RowParser[VRow] { row =>
      Success(
        VRow(
          id = row[Option[Int]]("id"),
          businessentityid = row[Option[BusinessentityId]]("businessentityid"),
          accountnumber = row[Option[AccountNumber]]("accountnumber"),
          name = row[Option[Name]]("name"),
          creditrating = row[Option[Int]]("creditrating"),
          preferredvendorstatus = row[Flag]("preferredvendorstatus"),
          activeflag = row[Flag]("activeflag"),
          purchasingwebserviceurl = row[Option[String]]("purchasingwebserviceurl"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
