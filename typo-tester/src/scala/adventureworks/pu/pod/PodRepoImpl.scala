/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pod

import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object PodRepoImpl extends PodRepo {
  override def selectAll(implicit c: Connection): List[PodRow] = {
    SQL"""select id, purchaseorderid, purchaseorderdetailid, duedate, orderqty, productid, unitprice, receivedqty, rejectedqty, modifieddate
          from pu.pod
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PodFieldOrIdValue[_]])(implicit c: Connection): List[PodRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PodFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case PodFieldValue.purchaseorderid(value) => NamedParameter("purchaseorderid", ParameterValue.from(value))
          case PodFieldValue.purchaseorderdetailid(value) => NamedParameter("purchaseorderdetailid", ParameterValue.from(value))
          case PodFieldValue.duedate(value) => NamedParameter("duedate", ParameterValue.from(value))
          case PodFieldValue.orderqty(value) => NamedParameter("orderqty", ParameterValue.from(value))
          case PodFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case PodFieldValue.unitprice(value) => NamedParameter("unitprice", ParameterValue.from(value))
          case PodFieldValue.receivedqty(value) => NamedParameter("receivedqty", ParameterValue.from(value))
          case PodFieldValue.rejectedqty(value) => NamedParameter("rejectedqty", ParameterValue.from(value))
          case PodFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select *
                    from pu.pod
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[PodRow] =
    RowParser[PodRow] { row =>
      Success(
        PodRow(
          id = row[Option[Int]]("id"),
          purchaseorderid = row[Option[PurchaseorderheaderId]]("purchaseorderid"),
          purchaseorderdetailid = row[Option[Int]]("purchaseorderdetailid"),
          duedate = row[Option[LocalDateTime]]("duedate"),
          orderqty = row[Option[Int]]("orderqty"),
          productid = row[Option[ProductId]]("productid"),
          unitprice = row[Option[BigDecimal]]("unitprice"),
          receivedqty = row[Option[BigDecimal]]("receivedqty"),
          rejectedqty = row[Option[BigDecimal]]("rejectedqty"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
