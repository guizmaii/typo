/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `humanresources.employee` which has not been persisted yet */
case class EmployeeRowUnsaved(
  /** Unique national identification number such as a social security number.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"nationalidnumber","ordinal_position":2,"is_nullable":"NO","data_type":"character varying","character_maximum_length":15,"character_octet_length":60,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  nationalidnumber: String,
  /** Network login.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"loginid","ordinal_position":3,"is_nullable":"NO","data_type":"character varying","character_maximum_length":256,"character_octet_length":1024,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  loginid: String,
  /** Work title such as Buyer or Sales Representative.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"jobtitle","ordinal_position":6,"is_nullable":"NO","data_type":"character varying","character_maximum_length":50,"character_octet_length":200,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  jobtitle: String,
  /** Date of birth.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"birthdate","ordinal_position":7,"is_nullable":"NO","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  birthdate: LocalDate,
  /** M = Married, S = Single
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"maritalstatus","ordinal_position":8,"is_nullable":"NO","data_type":"character","character_maximum_length":1,"character_octet_length":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bpchar","dtd_identifier":"8","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  maritalstatus: /* bpchar */ String,
  /** M = Male, F = Female
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"gender","ordinal_position":9,"is_nullable":"NO","data_type":"character","character_maximum_length":1,"character_octet_length":4,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bpchar","dtd_identifier":"9","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  gender: /* bpchar */ String,
  /** Employee hired on this date.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"hiredate","ordinal_position":10,"is_nullable":"NO","data_type":"date","datetime_precision":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"date","dtd_identifier":"10","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  hiredate: LocalDate,
  /** Default: true
      Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"salariedflag","ordinal_position":11,"column_default":"true","is_nullable":"NO","data_type":"boolean","domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Flag","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"11","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  salariedflag: Defaulted[Flag],
  /** Default: 0
      Number of available vacation hours.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"vacationhours","ordinal_position":12,"column_default":"0","is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"12","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  vacationhours: Defaulted[Int],
  /** Default: 0
      Number of available sick leave hours.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"sickleavehours","ordinal_position":13,"column_default":"0","is_nullable":"NO","data_type":"smallint","numeric_precision":16,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"int2","dtd_identifier":"13","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  sickleavehours: Defaulted[Int],
  /** Default: true
      0 = Inactive, 1 = Active
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"currentflag","ordinal_position":14,"column_default":"true","is_nullable":"NO","data_type":"boolean","domain_catalog":"Adventureworks","domain_schema":"public","domain_name":"Flag","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"14","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  currentflag: Defaulted[Flag],
  /** Default: uuid_generate_v1()
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"rowguid","ordinal_position":15,"column_default":"uuid_generate_v1()","is_nullable":"NO","data_type":"uuid","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"uuid","dtd_identifier":"15","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  rowguid: Defaulted[UUID],
  /** Default: now()
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"modifieddate","ordinal_position":16,"column_default":"now()","is_nullable":"NO","data_type":"timestamp without time zone","datetime_precision":6,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"timestamp","dtd_identifier":"16","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  modifieddate: Defaulted[LocalDateTime],
  /** Default: '/'::character varying
      Where the employee is located in corporate hierarchy.
      debug: {"table_catalog":"Adventureworks","table_schema":"humanresources","table_name":"employee","column_name":"organizationnode","ordinal_position":17,"column_default":"'/'::character varying","is_nullable":"YES","data_type":"character varying","character_octet_length":1073741824,"udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"varchar","dtd_identifier":"17","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  organizationnode: Defaulted[Option[String]]
) {
  def unsafeToRow(businessentityid: BusinessentityId): EmployeeRow =
    EmployeeRow(
      businessentityid = businessentityid,
      nationalidnumber = nationalidnumber,
      loginid = loginid,
      jobtitle = jobtitle,
      birthdate = birthdate,
      maritalstatus = maritalstatus,
      gender = gender,
      hiredate = hiredate,
      salariedflag = salariedflag match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     },
      vacationhours = vacationhours match {
                        case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                        case Defaulted.Provided(value) => value
                      },
      sickleavehours = sickleavehours match {
                         case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                         case Defaulted.Provided(value) => value
                       },
      currentflag = currentflag match {
                      case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                      case Defaulted.Provided(value) => value
                    },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     },
      organizationnode = organizationnode match {
                           case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                           case Defaulted.Provided(value) => value
                         }
    )
}
object EmployeeRowUnsaved {
  implicit val oFormat: OFormat[EmployeeRowUnsaved] = new OFormat[EmployeeRowUnsaved]{
    override def writes(o: EmployeeRowUnsaved): JsObject =
      Json.obj(
        "nationalidnumber" -> o.nationalidnumber,
        "loginid" -> o.loginid,
        "jobtitle" -> o.jobtitle,
        "birthdate" -> o.birthdate,
        "maritalstatus" -> o.maritalstatus,
        "gender" -> o.gender,
        "hiredate" -> o.hiredate,
        "salariedflag" -> o.salariedflag,
        "vacationhours" -> o.vacationhours,
        "sickleavehours" -> o.sickleavehours,
        "currentflag" -> o.currentflag,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate,
        "organizationnode" -> o.organizationnode
      )
  
    override def reads(json: JsValue): JsResult[EmployeeRowUnsaved] = {
      JsResult.fromTry(
        Try(
          EmployeeRowUnsaved(
            nationalidnumber = json.\("nationalidnumber").as[String],
            loginid = json.\("loginid").as[String],
            jobtitle = json.\("jobtitle").as[String],
            birthdate = json.\("birthdate").as[LocalDate],
            maritalstatus = json.\("maritalstatus").as[/* bpchar */ String],
            gender = json.\("gender").as[/* bpchar */ String],
            hiredate = json.\("hiredate").as[LocalDate],
            salariedflag = json.\("salariedflag").as[Defaulted[Flag]],
            vacationhours = json.\("vacationhours").as[Defaulted[Int]],
            sickleavehours = json.\("sickleavehours").as[Defaulted[Int]],
            currentflag = json.\("currentflag").as[Defaulted[Flag]],
            rowguid = json.\("rowguid").as[Defaulted[UUID]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]],
            organizationnode = json.\("organizationnode").as[Defaulted[Option[String]]]
          )
        )
      )
    }
  }
}
