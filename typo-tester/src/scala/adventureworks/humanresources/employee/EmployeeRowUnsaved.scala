/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `humanresources.employee` which has not been persisted yet */
case class EmployeeRowUnsaved(
  /** Unique national identification number such as a social security number. */
  nationalidnumber: String,
  /** Network login. */
  loginid: String,
  /** Work title such as Buyer or Sales Representative. */
  jobtitle: String,
  /** Date of birth. */
  birthdate: LocalDate,
  /** M = Married, S = Single */
  maritalstatus: /* bpchar */ String,
  /** M = Male, F = Female */
  gender: /* bpchar */ String,
  /** Employee hired on this date. */
  hiredate: LocalDate,
  /** Default: true
      Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining. */
  salariedflag: Defaulted[Flag],
  /** Default: 0
      Number of available vacation hours. */
  vacationhours: Defaulted[Int],
  /** Default: 0
      Number of available sick leave hours. */
  sickleavehours: Defaulted[Int],
  /** Default: true
      0 = Inactive, 1 = Active */
  currentflag: Defaulted[Flag],
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID],
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime],
  /** Default: '/'::character varying
      Where the employee is located in corporate hierarchy. */
  organizationnode: Defaulted[Option[String]]
) {
  def unsafeToRow(businessentityid: BusinessentityId): EmployeeRow =
    EmployeeRow(
      businessentityid = businessentityid,
      nationalidnumber = nationalidnumber,
      loginid = loginid,
      jobtitle = jobtitle,
      birthdate = birthdate,
      maritalstatus = maritalstatus,
      gender = gender,
      hiredate = hiredate,
      salariedflag = salariedflag match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     },
      vacationhours = vacationhours match {
                        case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                        case Defaulted.Provided(value) => value
                      },
      sickleavehours = sickleavehours match {
                         case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                         case Defaulted.Provided(value) => value
                       },
      currentflag = currentflag match {
                      case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                      case Defaulted.Provided(value) => value
                    },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     },
      organizationnode = organizationnode match {
                           case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                           case Defaulted.Provided(value) => value
                         }
    )
}
object EmployeeRowUnsaved {
  implicit val oFormat: OFormat[EmployeeRowUnsaved] = new OFormat[EmployeeRowUnsaved]{
    override def writes(o: EmployeeRowUnsaved): JsObject =
      Json.obj(
        "nationalidnumber" -> o.nationalidnumber,
        "loginid" -> o.loginid,
        "jobtitle" -> o.jobtitle,
        "birthdate" -> o.birthdate,
        "maritalstatus" -> o.maritalstatus,
        "gender" -> o.gender,
        "hiredate" -> o.hiredate,
        "salariedflag" -> o.salariedflag,
        "vacationhours" -> o.vacationhours,
        "sickleavehours" -> o.sickleavehours,
        "currentflag" -> o.currentflag,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate,
        "organizationnode" -> o.organizationnode
      )
  
    override def reads(json: JsValue): JsResult[EmployeeRowUnsaved] = {
      JsResult.fromTry(
        Try(
          EmployeeRowUnsaved(
            nationalidnumber = json.\("nationalidnumber").as[String],
            loginid = json.\("loginid").as[String],
            jobtitle = json.\("jobtitle").as[String],
            birthdate = json.\("birthdate").as[LocalDate],
            maritalstatus = json.\("maritalstatus").as[/* bpchar */ String],
            gender = json.\("gender").as[/* bpchar */ String],
            hiredate = json.\("hiredate").as[LocalDate],
            salariedflag = json.\("salariedflag").as[Defaulted[Flag]],
            vacationhours = json.\("vacationhours").as[Defaulted[Int]],
            sickleavehours = json.\("sickleavehours").as[Defaulted[Int]],
            currentflag = json.\("currentflag").as[Defaulted[Flag]],
            rowguid = json.\("rowguid").as[Defaulted[UUID]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]],
            organizationnode = json.\("organizationnode").as[Defaulted[Option[String]]]
          )
        )
      )
    }
  }
}
