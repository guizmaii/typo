/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sr

import adventureworks.public.Name
import adventureworks.sales.salesreason.SalesreasonId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SrRow(
  id: Option[Int],
  /** Points to [[sales.salesreason.SalesreasonRow.salesreasonid]] */
  salesreasonid: Option[SalesreasonId],
  /** Points to [[sales.salesreason.SalesreasonRow.name]] */
  name: Option[Name],
  /** Points to [[sales.salesreason.SalesreasonRow.reasontype]] */
  reasontype: Option[Name],
  /** Points to [[sales.salesreason.SalesreasonRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object SrRow {
  implicit val oFormat: OFormat[SrRow] = new OFormat[SrRow]{
    override def writes(o: SrRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "salesreasonid" -> o.salesreasonid,
        "name" -> o.name,
        "reasontype" -> o.reasontype,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[SrRow] = {
      JsResult.fromTry(
        Try(
          SrRow(
            id = json.\("id").toOption.map(_.as[Int]),
            salesreasonid = json.\("salesreasonid").toOption.map(_.as[SalesreasonId]),
            name = json.\("name").toOption.map(_.as[Name]),
            reasontype = json.\("reasontype").toOption.map(_.as[Name]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
