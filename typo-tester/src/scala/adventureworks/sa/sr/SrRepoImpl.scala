/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sr

import adventureworks.public.Name
import adventureworks.sales.salesreason.SalesreasonId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object SrRepoImpl extends SrRepo {
  override def selectAll(implicit c: Connection): List[SrRow] = {
    SQL"""select "id", salesreasonid, "name", reasontype, modifieddate
          from sa.sr
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SrFieldOrIdValue[_]])(implicit c: Connection): List[SrRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SrFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case SrFieldValue.salesreasonid(value) => NamedParameter("salesreasonid", ParameterValue.from(value))
          case SrFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case SrFieldValue.reasontype(value) => NamedParameter("reasontype", ParameterValue.from(value))
          case SrFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select "id", salesreasonid, "name", reasontype, modifieddate
                    from sa.sr
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[SrRow] =
    RowParser[SrRow] { row =>
      Success(
        SrRow(
          id = row[Option[Int]]("id"),
          salesreasonid = row[Option[SalesreasonId]]("salesreasonid"),
          name = row[Option[Name]]("name"),
          reasontype = row[Option[Name]]("reasontype"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
