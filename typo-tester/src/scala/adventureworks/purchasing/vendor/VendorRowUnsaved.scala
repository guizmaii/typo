/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vendor

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `purchasing.vendor` which has not been persisted yet */
case class VendorRowUnsaved(
  /** Vendor account (identification) number. */
  accountnumber: AccountNumber,
  /** Company name. */
  name: Name,
  /** 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average */
  creditrating: Int,
  /** Default: true
      0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product. */
  preferredvendorstatus: Defaulted[Flag],
  /** Default: true
      0 = Vendor no longer used. 1 = Vendor is actively used. */
  activeflag: Defaulted[Flag],
  /** Vendor URL. */
  purchasingwebserviceurl: Option[String],
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(businessentityid: BusinessentityId): VendorRow =
    VendorRow(
      businessentityid = businessentityid,
      accountnumber = accountnumber,
      name = name,
      creditrating = creditrating,
      preferredvendorstatus = preferredvendorstatus match {
                                case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                                case Defaulted.Provided(value) => value
                              },
      activeflag = activeflag match {
                     case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                     case Defaulted.Provided(value) => value
                   },
      purchasingwebserviceurl = purchasingwebserviceurl,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object VendorRowUnsaved {
  implicit val oFormat: OFormat[VendorRowUnsaved] = new OFormat[VendorRowUnsaved]{
    override def writes(o: VendorRowUnsaved): JsObject =
      Json.obj(
        "accountnumber" -> o.accountnumber,
        "name" -> o.name,
        "creditrating" -> o.creditrating,
        "preferredvendorstatus" -> o.preferredvendorstatus,
        "activeflag" -> o.activeflag,
        "purchasingwebserviceurl" -> o.purchasingwebserviceurl,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[VendorRowUnsaved] = {
      JsResult.fromTry(
        Try(
          VendorRowUnsaved(
            accountnumber = json.\("accountnumber").as[AccountNumber],
            name = json.\("name").as[Name],
            creditrating = json.\("creditrating").as[Int],
            preferredvendorstatus = json.\("preferredvendorstatus").as[Defaulted[Flag]],
            activeflag = json.\("activeflag").as[Defaulted[Flag]],
            purchasingwebserviceurl = json.\("purchasingwebserviceurl").toOption.map(_.as[String]),
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
