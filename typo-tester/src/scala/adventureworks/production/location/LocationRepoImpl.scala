/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package location

import adventureworks.Defaulted
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlParser
import anorm.SqlStringInterpolation
import anorm.Success
import anorm.ToSql
import anorm.ToStatement
import java.lang.Integer
import java.sql.Connection
import java.sql.PreparedStatement
import java.time.LocalDateTime

object LocationRepoImpl extends LocationRepo {
  override def delete(locationid: LocationId)(implicit c: Connection): Boolean = {
    SQL"delete from production.location where locationid = $locationid".executeUpdate() > 0
  }
  override def insert(unsaved: LocationRowUnsaved)(implicit c: Connection): LocationId = {
    val namedParameters = List(
      Some(NamedParameter("name", ParameterValue.from(unsaved.name))),
      unsaved.costrate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("costrate", ParameterValue.from[BigDecimal](value)))
      },
      unsaved.availability match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("availability", ParameterValue.from[BigDecimal](value)))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some(NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)))
      }
    ).flatten
    
    SQL"""insert into production.location(${namedParameters.map(_.name).mkString(", ")})
          values (${namedParameters.map(np => s"{${np.name}}").mkString(", ")})
          returning locationid
       """
      .on(namedParameters :_*)
      .executeInsert(idRowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[LocationRow] = {
    SQL"""select locationid, name, costrate, availability, modifieddate
          from production.location
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[LocationFieldOrIdValue[_]])(implicit c: Connection): List[LocationRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case LocationFieldValue.locationid(value) => NamedParameter("locationid", ParameterValue.from(value))
          case LocationFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case LocationFieldValue.costrate(value) => NamedParameter("costrate", ParameterValue.from(value))
          case LocationFieldValue.availability(value) => NamedParameter("availability", ParameterValue.from(value))
          case LocationFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""select *
                    from production.location
                    where ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(locationid: LocationId)(implicit c: Connection): Option[LocationRow] = {
    SQL"""select locationid, name, costrate, availability, modifieddate
          from production.location
          where locationid = $locationid
       """.as(rowParser.singleOpt)
  }
  override def selectByIds(locationids: Array[LocationId])(implicit c: Connection): List[LocationRow] = {
    implicit val arrayToSql: ToSql[Array[LocationId]] = _ => ("?", 1) // fix wrong instance from anorm
    implicit val toStatement: ToStatement[Array[LocationId]] =
      (s: PreparedStatement, index: Int, v: Array[LocationId]) =>
        s.setArray(index, s.getConnection.createArrayOf("int4", v.map(x => x.value: Integer)))
    
    SQL"""select locationid, name, costrate, availability, modifieddate
          from production.location
          where locationid = ANY($locationids)
       """.as(rowParser.*)
  
  }
  override def update(row: LocationRow)(implicit c: Connection): Boolean = {
    val locationid = row.locationid
    SQL"""update production.location
          set name = ${row.name},
              costrate = ${row.costrate},
              availability = ${row.availability},
              modifieddate = ${row.modifieddate}
          where locationid = $locationid
       """.executeUpdate() > 0
  }
  override def updateFieldValues(locationid: LocationId, fieldValues: List[LocationFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case LocationFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case LocationFieldValue.costrate(value) => NamedParameter("costrate", ParameterValue.from(value))
          case LocationFieldValue.availability(value) => NamedParameter("availability", ParameterValue.from(value))
          case LocationFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val q = s"""update production.location
                    set ${namedParams.map(x => s"${x.name} = {${x.name}}").mkString(", ")}
                    where locationid = $locationid
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[LocationRow] =
    RowParser[LocationRow] { row =>
      Success(
        LocationRow(
          locationid = row[LocationId]("locationid"),
          name = row[Name]("name"),
          costrate = row[BigDecimal]("costrate"),
          availability = row[BigDecimal]("availability"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  val idRowParser: RowParser[LocationId] =
    SqlParser.get[LocationId]("locationid")
}
