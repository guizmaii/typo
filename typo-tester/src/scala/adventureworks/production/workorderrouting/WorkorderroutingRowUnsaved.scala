/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorderrouting

import adventureworks.Defaulted
import adventureworks.production.location.LocationId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `production.workorderrouting` which has not been persisted yet */
case class WorkorderroutingRowUnsaved(
  /** Manufacturing location where the part is processed. Foreign key to Location.LocationID.
      Points to [[location.LocationRow.locationid]] */
  locationid: LocationId,
  /** Planned manufacturing start date. */
  scheduledstartdate: LocalDateTime,
  /** Planned manufacturing end date. */
  scheduledenddate: LocalDateTime,
  /** Actual start date. */
  actualstartdate: Option[LocalDateTime],
  /** Actual end date. */
  actualenddate: Option[LocalDateTime],
  /** Number of manufacturing hours used. */
  actualresourcehrs: Option[BigDecimal],
  /** Estimated manufacturing cost. */
  plannedcost: BigDecimal,
  /** Actual manufacturing cost. */
  actualcost: Option[BigDecimal],
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime]
) {
  def unsafeToRow(compositeId: WorkorderroutingId): WorkorderroutingRow =
    WorkorderroutingRow(
      workorderid = compositeId.workorderid,
      productid = compositeId.productid,
      operationsequence = compositeId.operationsequence,
      locationid = locationid,
      scheduledstartdate = scheduledstartdate,
      scheduledenddate = scheduledenddate,
      actualstartdate = actualstartdate,
      actualenddate = actualenddate,
      actualresourcehrs = actualresourcehrs,
      plannedcost = plannedcost,
      actualcost = actualcost,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => sys.error("cannot produce row when you depend on a value which is defaulted in database")
                       case Defaulted.Provided(value) => value
                     }
    )
}
object WorkorderroutingRowUnsaved {
  implicit val oFormat: OFormat[WorkorderroutingRowUnsaved] = new OFormat[WorkorderroutingRowUnsaved]{
    override def writes(o: WorkorderroutingRowUnsaved): JsObject =
      Json.obj(
        "locationid" -> o.locationid,
        "scheduledstartdate" -> o.scheduledstartdate,
        "scheduledenddate" -> o.scheduledenddate,
        "actualstartdate" -> o.actualstartdate,
        "actualenddate" -> o.actualenddate,
        "actualresourcehrs" -> o.actualresourcehrs,
        "plannedcost" -> o.plannedcost,
        "actualcost" -> o.actualcost,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[WorkorderroutingRowUnsaved] = {
      JsResult.fromTry(
        Try(
          WorkorderroutingRowUnsaved(
            locationid = json.\("locationid").as[LocationId],
            scheduledstartdate = json.\("scheduledstartdate").as[LocalDateTime],
            scheduledenddate = json.\("scheduledenddate").as[LocalDateTime],
            actualstartdate = json.\("actualstartdate").toOption.map(_.as[LocalDateTime]),
            actualenddate = json.\("actualenddate").toOption.map(_.as[LocalDateTime]),
            actualresourcehrs = json.\("actualresourcehrs").toOption.map(_.as[BigDecimal]),
            plannedcost = json.\("plannedcost").as[BigDecimal],
            actualcost = json.\("actualcost").toOption.map(_.as[BigDecimal]),
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
