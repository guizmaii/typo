/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pod

import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PodViewRow(
  id: Option[Int],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.purchaseorderid]] */
  purchaseorderid: Option[PurchaseorderheaderId],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.purchaseorderdetailid]] */
  purchaseorderdetailid: Option[Int],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.duedate]] */
  duedate: Option[LocalDateTime],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.orderqty]] */
  orderqty: Option[Int],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.unitprice]] */
  unitprice: Option[BigDecimal],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.receivedqty]] */
  receivedqty: Option[BigDecimal],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.rejectedqty]] */
  rejectedqty: Option[BigDecimal],
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PodViewRow {
  val rowParser: RowParser[PodViewRow] =
    RowParser[PodViewRow] { row =>
      Success(
        PodViewRow(
          id = row[Option[Int]]("id"),
          purchaseorderid = row[Option[PurchaseorderheaderId]]("purchaseorderid"),
          purchaseorderdetailid = row[Option[Int]]("purchaseorderdetailid"),
          duedate = row[Option[LocalDateTime]]("duedate"),
          orderqty = row[Option[Int]]("orderqty"),
          productid = row[Option[ProductId]]("productid"),
          unitprice = row[Option[BigDecimal]]("unitprice"),
          receivedqty = row[Option[BigDecimal]]("receivedqty"),
          rejectedqty = row[Option[BigDecimal]]("rejectedqty"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
  implicit val oFormat: OFormat[PodViewRow] = new OFormat[PodViewRow]{
    override def writes(o: PodViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "purchaseorderid" -> o.purchaseorderid,
        "purchaseorderdetailid" -> o.purchaseorderdetailid,
        "duedate" -> o.duedate,
        "orderqty" -> o.orderqty,
        "productid" -> o.productid,
        "unitprice" -> o.unitprice,
        "receivedqty" -> o.receivedqty,
        "rejectedqty" -> o.rejectedqty,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PodViewRow] = {
      JsResult.fromTry(
        Try(
          PodViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            purchaseorderid = json.\("purchaseorderid").toOption.map(_.as[PurchaseorderheaderId]),
            purchaseorderdetailid = json.\("purchaseorderdetailid").toOption.map(_.as[Int]),
            duedate = json.\("duedate").toOption.map(_.as[LocalDateTime]),
            orderqty = json.\("orderqty").toOption.map(_.as[Int]),
            productid = json.\("productid").toOption.map(_.as[ProductId]),
            unitprice = json.\("unitprice").toOption.map(_.as[BigDecimal]),
            receivedqty = json.\("receivedqty").toOption.map(_.as[BigDecimal]),
            rejectedqty = json.\("rejectedqty").toOption.map(_.as[BigDecimal]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
