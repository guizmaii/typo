/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.jdbc.PgArray
import org.postgresql.util.PGobject
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** pg_node_tree (via PGObject) */
case class TypoPgNodeTree(value: String)

object TypoPgNodeTree {
  implicit lazy val arrayColumn: Column[Array[TypoPgNodeTree]] = Column.nonNull[Array[TypoPgNodeTree]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoPgNodeTree(v.asInstanceOf[String])))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoPgNodeTree, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val arrayToStatement: ToStatement[Array[TypoPgNodeTree]] = ToStatement[Array[TypoPgNodeTree]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("pg_node_tree", v.map(v => {
                                                                                                                                   val obj = new PGobject
                                                                                                                                   obj.setType("pg_node_tree")
                                                                                                                                   obj.setValue(v.value)
                                                                                                                                   obj
                                                                                                                                 }))))
  implicit lazy val bijection: Bijection[TypoPgNodeTree, String] = Bijection[TypoPgNodeTree, String](_.value)(TypoPgNodeTree.apply)
  implicit lazy val column: Column[TypoPgNodeTree] = Column.nonNull[TypoPgNodeTree]((v1: Any, _) =>
    v1 match {
      case v: PGobject => Right(TypoPgNodeTree(v.getValue))
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.util.PGobject, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val ordering: Ordering[TypoPgNodeTree] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TypoPgNodeTree] = new ParameterMetaData[TypoPgNodeTree] {
    override def sqlType: String = "pg_node_tree"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[TypoPgNodeTree] = Reads.StringReads.map(TypoPgNodeTree.apply)
  implicit lazy val toStatement: ToStatement[TypoPgNodeTree] = ToStatement[TypoPgNodeTree]((s, index, v) => s.setObject(index, {
                                                                    val obj = new PGobject
                                                                    obj.setType("pg_node_tree")
                                                                    obj.setValue(v.value)
                                                                    obj
                                                                  }))
  implicit lazy val writes: Writes[TypoPgNodeTree] = Writes.StringWrites.contramap(_.value)
}
