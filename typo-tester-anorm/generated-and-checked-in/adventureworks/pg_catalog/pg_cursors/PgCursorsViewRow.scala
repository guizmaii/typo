/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cursors

import adventureworks.customtypes.TypoOffsetDateTime
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgCursorsViewRow(
  name: String,
  statement: String,
  isHoldable: Boolean,
  isBinary: Boolean,
  isScrollable: Boolean,
  creationTime: TypoOffsetDateTime
)

object PgCursorsViewRow {
  implicit lazy val reads: Reads[PgCursorsViewRow] = Reads[PgCursorsViewRow](json => JsResult.fromTry(
      Try(
        PgCursorsViewRow(
          name = json.\("name").as(Reads.StringReads),
          statement = json.\("statement").as(Reads.StringReads),
          isHoldable = json.\("is_holdable").as(Reads.BooleanReads),
          isBinary = json.\("is_binary").as(Reads.BooleanReads),
          isScrollable = json.\("is_scrollable").as(Reads.BooleanReads),
          creationTime = json.\("creation_time").as(TypoOffsetDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgCursorsViewRow] = RowParser[PgCursorsViewRow] { row =>
    Success(
      PgCursorsViewRow(
        name = row(idx + 0)(Column.columnToString),
        statement = row(idx + 1)(Column.columnToString),
        isHoldable = row(idx + 2)(Column.columnToBoolean),
        isBinary = row(idx + 3)(Column.columnToBoolean),
        isScrollable = row(idx + 4)(Column.columnToBoolean),
        creationTime = row(idx + 5)(TypoOffsetDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PgCursorsViewRow] = OWrites[PgCursorsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Writes.StringWrites.writes(o.name),
      "statement" -> Writes.StringWrites.writes(o.statement),
      "is_holdable" -> Writes.BooleanWrites.writes(o.isHoldable),
      "is_binary" -> Writes.BooleanWrites.writes(o.isBinary),
      "is_scrollable" -> Writes.BooleanWrites.writes(o.isScrollable),
      "creation_time" -> TypoOffsetDateTime.writes.writes(o.creationTime)
    ))
  )
}
