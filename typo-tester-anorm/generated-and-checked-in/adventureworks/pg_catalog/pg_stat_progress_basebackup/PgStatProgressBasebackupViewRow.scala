/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_basebackup

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatProgressBasebackupViewRow(
  pid: Int,
  phase: String,
  backupTotal: Long,
  backupStreamed: Long,
  tablespacesTotal: Long,
  tablespacesStreamed: Long
)

object PgStatProgressBasebackupViewRow {
  implicit lazy val reads: Reads[PgStatProgressBasebackupViewRow] = Reads[PgStatProgressBasebackupViewRow](json => JsResult.fromTry(
      Try(
        PgStatProgressBasebackupViewRow(
          pid = json.\("pid").as(Reads.IntReads),
          phase = json.\("phase").as(Reads.StringReads),
          backupTotal = json.\("backup_total").as(Reads.LongReads),
          backupStreamed = json.\("backup_streamed").as(Reads.LongReads),
          tablespacesTotal = json.\("tablespaces_total").as(Reads.LongReads),
          tablespacesStreamed = json.\("tablespaces_streamed").as(Reads.LongReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatProgressBasebackupViewRow] = RowParser[PgStatProgressBasebackupViewRow] { row =>
    Success(
      PgStatProgressBasebackupViewRow(
        pid = row(idx + 0)(Column.columnToInt),
        phase = row(idx + 1)(Column.columnToString),
        backupTotal = row(idx + 2)(Column.columnToLong),
        backupStreamed = row(idx + 3)(Column.columnToLong),
        tablespacesTotal = row(idx + 4)(Column.columnToLong),
        tablespacesStreamed = row(idx + 5)(Column.columnToLong)
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatProgressBasebackupViewRow] = OWrites[PgStatProgressBasebackupViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Writes.IntWrites.writes(o.pid),
      "phase" -> Writes.StringWrites.writes(o.phase),
      "backup_total" -> Writes.LongWrites.writes(o.backupTotal),
      "backup_streamed" -> Writes.LongWrites.writes(o.backupStreamed),
      "tablespaces_total" -> Writes.LongWrites.writes(o.tablespacesTotal),
      "tablespaces_streamed" -> Writes.LongWrites.writes(o.tablespacesStreamed)
    ))
  )
}
