/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_ssl

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatSslViewRow(
  pid: Int,
  ssl: Boolean,
  version: String,
  cipher: String,
  bits: Int,
  clientDn: String,
  clientSerial: BigDecimal,
  issuerDn: String
)

object PgStatSslViewRow {
  implicit lazy val reads: Reads[PgStatSslViewRow] = Reads[PgStatSslViewRow](json => JsResult.fromTry(
      Try(
        PgStatSslViewRow(
          pid = json.\("pid").as(Reads.IntReads),
          ssl = json.\("ssl").as(Reads.BooleanReads),
          version = json.\("version").as(Reads.StringReads),
          cipher = json.\("cipher").as(Reads.StringReads),
          bits = json.\("bits").as(Reads.IntReads),
          clientDn = json.\("client_dn").as(Reads.StringReads),
          clientSerial = json.\("client_serial").as(Reads.bigDecReads),
          issuerDn = json.\("issuer_dn").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatSslViewRow] = RowParser[PgStatSslViewRow] { row =>
    Success(
      PgStatSslViewRow(
        pid = row(idx + 0)(Column.columnToInt),
        ssl = row(idx + 1)(Column.columnToBoolean),
        version = row(idx + 2)(Column.columnToString),
        cipher = row(idx + 3)(Column.columnToString),
        bits = row(idx + 4)(Column.columnToInt),
        clientDn = row(idx + 5)(Column.columnToString),
        clientSerial = row(idx + 6)(Column.columnToScalaBigDecimal),
        issuerDn = row(idx + 7)(Column.columnToString)
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatSslViewRow] = OWrites[PgStatSslViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Writes.IntWrites.writes(o.pid),
      "ssl" -> Writes.BooleanWrites.writes(o.ssl),
      "version" -> Writes.StringWrites.writes(o.version),
      "cipher" -> Writes.StringWrites.writes(o.cipher),
      "bits" -> Writes.IntWrites.writes(o.bits),
      "client_dn" -> Writes.StringWrites.writes(o.clientDn),
      "client_serial" -> Writes.BigDecimalWrites.writes(o.clientSerial),
      "issuer_dn" -> Writes.StringWrites.writes(o.issuerDn)
    ))
  )
}
