/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_settings

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgSettingsViewRow(
  name: String,
  setting: String,
  unit: String,
  category: String,
  shortDesc: String,
  extraDesc: String,
  context: String,
  vartype: String,
  source: String,
  minVal: String,
  maxVal: String,
  enumvals: Array[String],
  bootVal: String,
  resetVal: String,
  sourcefile: String,
  sourceline: Int,
  pendingRestart: Boolean
)

object PgSettingsViewRow {
  implicit lazy val reads: Reads[PgSettingsViewRow] = Reads[PgSettingsViewRow](json => JsResult.fromTry(
      Try(
        PgSettingsViewRow(
          name = json.\("name").as(Reads.StringReads),
          setting = json.\("setting").as(Reads.StringReads),
          unit = json.\("unit").as(Reads.StringReads),
          category = json.\("category").as(Reads.StringReads),
          shortDesc = json.\("short_desc").as(Reads.StringReads),
          extraDesc = json.\("extra_desc").as(Reads.StringReads),
          context = json.\("context").as(Reads.StringReads),
          vartype = json.\("vartype").as(Reads.StringReads),
          source = json.\("source").as(Reads.StringReads),
          minVal = json.\("min_val").as(Reads.StringReads),
          maxVal = json.\("max_val").as(Reads.StringReads),
          enumvals = json.\("enumvals").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          bootVal = json.\("boot_val").as(Reads.StringReads),
          resetVal = json.\("reset_val").as(Reads.StringReads),
          sourcefile = json.\("sourcefile").as(Reads.StringReads),
          sourceline = json.\("sourceline").as(Reads.IntReads),
          pendingRestart = json.\("pending_restart").as(Reads.BooleanReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgSettingsViewRow] = RowParser[PgSettingsViewRow] { row =>
    Success(
      PgSettingsViewRow(
        name = row(idx + 0)(Column.columnToString),
        setting = row(idx + 1)(Column.columnToString),
        unit = row(idx + 2)(Column.columnToString),
        category = row(idx + 3)(Column.columnToString),
        shortDesc = row(idx + 4)(Column.columnToString),
        extraDesc = row(idx + 5)(Column.columnToString),
        context = row(idx + 6)(Column.columnToString),
        vartype = row(idx + 7)(Column.columnToString),
        source = row(idx + 8)(Column.columnToString),
        minVal = row(idx + 9)(Column.columnToString),
        maxVal = row(idx + 10)(Column.columnToString),
        enumvals = row(idx + 11)(Column.columnToArray[String](Column.columnToString, implicitly)),
        bootVal = row(idx + 12)(Column.columnToString),
        resetVal = row(idx + 13)(Column.columnToString),
        sourcefile = row(idx + 14)(Column.columnToString),
        sourceline = row(idx + 15)(Column.columnToInt),
        pendingRestart = row(idx + 16)(Column.columnToBoolean)
      )
    )
  }
  implicit lazy val writes: OWrites[PgSettingsViewRow] = OWrites[PgSettingsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Writes.StringWrites.writes(o.name),
      "setting" -> Writes.StringWrites.writes(o.setting),
      "unit" -> Writes.StringWrites.writes(o.unit),
      "category" -> Writes.StringWrites.writes(o.category),
      "short_desc" -> Writes.StringWrites.writes(o.shortDesc),
      "extra_desc" -> Writes.StringWrites.writes(o.extraDesc),
      "context" -> Writes.StringWrites.writes(o.context),
      "vartype" -> Writes.StringWrites.writes(o.vartype),
      "source" -> Writes.StringWrites.writes(o.source),
      "min_val" -> Writes.StringWrites.writes(o.minVal),
      "max_val" -> Writes.StringWrites.writes(o.maxVal),
      "enumvals" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.enumvals),
      "boot_val" -> Writes.StringWrites.writes(o.bootVal),
      "reset_val" -> Writes.StringWrites.writes(o.resetVal),
      "sourcefile" -> Writes.StringWrites.writes(o.sourcefile),
      "sourceline" -> Writes.IntWrites.writes(o.sourceline),
      "pending_restart" -> Writes.BooleanWrites.writes(o.pendingRestart)
    ))
  )
}
