/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_replication_slots

import adventureworks.customtypes.TypoOffsetDateTime
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatReplicationSlotsViewRow(
  /** Points to [[pg_replication_slots.PgReplicationSlotsViewRow.slotName]] */
  slotName: String,
  spillTxns: Long,
  spillCount: Long,
  spillBytes: Long,
  streamTxns: Long,
  streamCount: Long,
  streamBytes: Long,
  totalTxns: Long,
  totalBytes: Long,
  statsReset: TypoOffsetDateTime
)

object PgStatReplicationSlotsViewRow {
  implicit lazy val reads: Reads[PgStatReplicationSlotsViewRow] = Reads[PgStatReplicationSlotsViewRow](json => JsResult.fromTry(
      Try(
        PgStatReplicationSlotsViewRow(
          slotName = json.\("slot_name").as(Reads.StringReads),
          spillTxns = json.\("spill_txns").as(Reads.LongReads),
          spillCount = json.\("spill_count").as(Reads.LongReads),
          spillBytes = json.\("spill_bytes").as(Reads.LongReads),
          streamTxns = json.\("stream_txns").as(Reads.LongReads),
          streamCount = json.\("stream_count").as(Reads.LongReads),
          streamBytes = json.\("stream_bytes").as(Reads.LongReads),
          totalTxns = json.\("total_txns").as(Reads.LongReads),
          totalBytes = json.\("total_bytes").as(Reads.LongReads),
          statsReset = json.\("stats_reset").as(TypoOffsetDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatReplicationSlotsViewRow] = RowParser[PgStatReplicationSlotsViewRow] { row =>
    Success(
      PgStatReplicationSlotsViewRow(
        slotName = row(idx + 0)(Column.columnToString),
        spillTxns = row(idx + 1)(Column.columnToLong),
        spillCount = row(idx + 2)(Column.columnToLong),
        spillBytes = row(idx + 3)(Column.columnToLong),
        streamTxns = row(idx + 4)(Column.columnToLong),
        streamCount = row(idx + 5)(Column.columnToLong),
        streamBytes = row(idx + 6)(Column.columnToLong),
        totalTxns = row(idx + 7)(Column.columnToLong),
        totalBytes = row(idx + 8)(Column.columnToLong),
        statsReset = row(idx + 9)(TypoOffsetDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatReplicationSlotsViewRow] = OWrites[PgStatReplicationSlotsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "slot_name" -> Writes.StringWrites.writes(o.slotName),
      "spill_txns" -> Writes.LongWrites.writes(o.spillTxns),
      "spill_count" -> Writes.LongWrites.writes(o.spillCount),
      "spill_bytes" -> Writes.LongWrites.writes(o.spillBytes),
      "stream_txns" -> Writes.LongWrites.writes(o.streamTxns),
      "stream_count" -> Writes.LongWrites.writes(o.streamCount),
      "stream_bytes" -> Writes.LongWrites.writes(o.streamBytes),
      "total_txns" -> Writes.LongWrites.writes(o.totalTxns),
      "total_bytes" -> Writes.LongWrites.writes(o.totalBytes),
      "stats_reset" -> TypoOffsetDateTime.writes.writes(o.statsReset)
    ))
  )
}
