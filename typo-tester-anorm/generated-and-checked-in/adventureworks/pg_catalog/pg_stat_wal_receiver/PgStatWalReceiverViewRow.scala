/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_wal_receiver

import adventureworks.customtypes.TypoOffsetDateTime
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatWalReceiverViewRow(
  pid: Int,
  status: String,
  receiveStartLsn: /* pg_lsn */ Long,
  receiveStartTli: Int,
  writtenLsn: /* pg_lsn */ Long,
  flushedLsn: /* pg_lsn */ Long,
  receivedTli: Int,
  lastMsgSendTime: TypoOffsetDateTime,
  lastMsgReceiptTime: TypoOffsetDateTime,
  latestEndLsn: /* pg_lsn */ Long,
  latestEndTime: TypoOffsetDateTime,
  slotName: String,
  senderHost: String,
  senderPort: Int,
  conninfo: String
)

object PgStatWalReceiverViewRow {
  implicit lazy val reads: Reads[PgStatWalReceiverViewRow] = Reads[PgStatWalReceiverViewRow](json => JsResult.fromTry(
      Try(
        PgStatWalReceiverViewRow(
          pid = json.\("pid").as(Reads.IntReads),
          status = json.\("status").as(Reads.StringReads),
          receiveStartLsn = json.\("receive_start_lsn").as(Reads.LongReads),
          receiveStartTli = json.\("receive_start_tli").as(Reads.IntReads),
          writtenLsn = json.\("written_lsn").as(Reads.LongReads),
          flushedLsn = json.\("flushed_lsn").as(Reads.LongReads),
          receivedTli = json.\("received_tli").as(Reads.IntReads),
          lastMsgSendTime = json.\("last_msg_send_time").as(TypoOffsetDateTime.reads),
          lastMsgReceiptTime = json.\("last_msg_receipt_time").as(TypoOffsetDateTime.reads),
          latestEndLsn = json.\("latest_end_lsn").as(Reads.LongReads),
          latestEndTime = json.\("latest_end_time").as(TypoOffsetDateTime.reads),
          slotName = json.\("slot_name").as(Reads.StringReads),
          senderHost = json.\("sender_host").as(Reads.StringReads),
          senderPort = json.\("sender_port").as(Reads.IntReads),
          conninfo = json.\("conninfo").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatWalReceiverViewRow] = RowParser[PgStatWalReceiverViewRow] { row =>
    Success(
      PgStatWalReceiverViewRow(
        pid = row(idx + 0)(Column.columnToInt),
        status = row(idx + 1)(Column.columnToString),
        receiveStartLsn = row(idx + 2)(Column.columnToLong),
        receiveStartTli = row(idx + 3)(Column.columnToInt),
        writtenLsn = row(idx + 4)(Column.columnToLong),
        flushedLsn = row(idx + 5)(Column.columnToLong),
        receivedTli = row(idx + 6)(Column.columnToInt),
        lastMsgSendTime = row(idx + 7)(TypoOffsetDateTime.column),
        lastMsgReceiptTime = row(idx + 8)(TypoOffsetDateTime.column),
        latestEndLsn = row(idx + 9)(Column.columnToLong),
        latestEndTime = row(idx + 10)(TypoOffsetDateTime.column),
        slotName = row(idx + 11)(Column.columnToString),
        senderHost = row(idx + 12)(Column.columnToString),
        senderPort = row(idx + 13)(Column.columnToInt),
        conninfo = row(idx + 14)(Column.columnToString)
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatWalReceiverViewRow] = OWrites[PgStatWalReceiverViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Writes.IntWrites.writes(o.pid),
      "status" -> Writes.StringWrites.writes(o.status),
      "receive_start_lsn" -> Writes.LongWrites.writes(o.receiveStartLsn),
      "receive_start_tli" -> Writes.IntWrites.writes(o.receiveStartTli),
      "written_lsn" -> Writes.LongWrites.writes(o.writtenLsn),
      "flushed_lsn" -> Writes.LongWrites.writes(o.flushedLsn),
      "received_tli" -> Writes.IntWrites.writes(o.receivedTli),
      "last_msg_send_time" -> TypoOffsetDateTime.writes.writes(o.lastMsgSendTime),
      "last_msg_receipt_time" -> TypoOffsetDateTime.writes.writes(o.lastMsgReceiptTime),
      "latest_end_lsn" -> Writes.LongWrites.writes(o.latestEndLsn),
      "latest_end_time" -> TypoOffsetDateTime.writes.writes(o.latestEndTime),
      "slot_name" -> Writes.StringWrites.writes(o.slotName),
      "sender_host" -> Writes.StringWrites.writes(o.senderHost),
      "sender_port" -> Writes.IntWrites.writes(o.senderPort),
      "conninfo" -> Writes.StringWrites.writes(o.conninfo)
    ))
  )
}
