/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_all_indexes

import adventureworks.pg_catalog.pg_class.PgClassId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatAllIndexesViewRow(
  /** Points to [[pg_class.PgClassRow.oid]] */
  relid: PgClassId,
  /** Points to [[pg_class.PgClassRow.oid]] */
  indexrelid: PgClassId,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  relname: String,
  /** Points to [[pg_class.PgClassRow.relname]] */
  indexrelname: String,
  idxScan: /* nullability unknown */ Option[Long],
  idxTupRead: /* nullability unknown */ Option[Long],
  idxTupFetch: /* nullability unknown */ Option[Long]
)

object PgStatAllIndexesViewRow {
  implicit lazy val reads: Reads[PgStatAllIndexesViewRow] = Reads[PgStatAllIndexesViewRow](json => JsResult.fromTry(
      Try(
        PgStatAllIndexesViewRow(
          relid = json.\("relid").as(PgClassId.reads),
          indexrelid = json.\("indexrelid").as(PgClassId.reads),
          schemaname = json.\("schemaname").toOption.map(_.as(Reads.StringReads)),
          relname = json.\("relname").as(Reads.StringReads),
          indexrelname = json.\("indexrelname").as(Reads.StringReads),
          idxScan = json.\("idx_scan").toOption.map(_.as(Reads.LongReads)),
          idxTupRead = json.\("idx_tup_read").toOption.map(_.as(Reads.LongReads)),
          idxTupFetch = json.\("idx_tup_fetch").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatAllIndexesViewRow] = RowParser[PgStatAllIndexesViewRow] { row =>
    Success(
      PgStatAllIndexesViewRow(
        relid = row(idx + 0)(PgClassId.column),
        indexrelid = row(idx + 1)(PgClassId.column),
        schemaname = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        relname = row(idx + 3)(Column.columnToString),
        indexrelname = row(idx + 4)(Column.columnToString),
        idxScan = row(idx + 5)(Column.columnToOption(Column.columnToLong)),
        idxTupRead = row(idx + 6)(Column.columnToOption(Column.columnToLong)),
        idxTupFetch = row(idx + 7)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatAllIndexesViewRow] = OWrites[PgStatAllIndexesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "relid" -> PgClassId.writes.writes(o.relid),
      "indexrelid" -> PgClassId.writes.writes(o.indexrelid),
      "schemaname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.schemaname),
      "relname" -> Writes.StringWrites.writes(o.relname),
      "indexrelname" -> Writes.StringWrites.writes(o.indexrelname),
      "idx_scan" -> Writes.OptionWrites(Writes.LongWrites).writes(o.idxScan),
      "idx_tup_read" -> Writes.OptionWrites(Writes.LongWrites).writes(o.idxTupRead),
      "idx_tup_fetch" -> Writes.OptionWrites(Writes.LongWrites).writes(o.idxTupFetch)
    ))
  )
}
