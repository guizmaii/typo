/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policy

import adventureworks.customtypes.TypoPgNodeTree
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgPolicyRepoImpl extends PgPolicyRepo {
  override def delete(oid: PgPolicyId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_policy where oid = ${ParameterValue(oid, null, PgPolicyId.toStatement)}".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgPolicyFields, PgPolicyRow] = {
    DeleteBuilder("pg_catalog.pg_policy", PgPolicyFields)
  }
  override def insert(unsaved: PgPolicyRow)(implicit c: Connection): PgPolicyRow = {
    SQL"""insert into pg_catalog.pg_policy(oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck)
          values (${ParameterValue(unsaved.oid, null, PgPolicyId.toStatement)}::oid, ${ParameterValue(unsaved.polname, null, ToStatement.stringToStatement)}::name, ${ParameterValue(unsaved.polrelid, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.polcmd, null, ToStatement.stringToStatement)}::char, ${ParameterValue(unsaved.polpermissive, null, ToStatement.booleanToStatement)}, ${ParameterValue(unsaved.polroles, null, adventureworks.LongArrayToStatement)}::_oid, ${ParameterValue(unsaved.polqual, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree, ${ParameterValue(unsaved.polwithcheck, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree)
          returning oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck
       """
      .executeInsert(PgPolicyRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgPolicyFields, PgPolicyRow] = {
    SelectBuilderSql("pg_catalog.pg_policy", PgPolicyFields, PgPolicyRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgPolicyRow] = {
    SQL"""select oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck
          from pg_catalog.pg_policy
       """.as(PgPolicyRow.rowParser(1).*)
  }
  override def selectById(oid: PgPolicyId)(implicit c: Connection): Option[PgPolicyRow] = {
    SQL"""select oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck
          from pg_catalog.pg_policy
          where oid = ${ParameterValue(oid, null, PgPolicyId.toStatement)}
       """.as(PgPolicyRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgPolicyId])(implicit c: Connection): List[PgPolicyRow] = {
    SQL"""select oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck
          from pg_catalog.pg_policy
          where oid = ANY(${oids})
       """.as(PgPolicyRow.rowParser(1).*)
    
  }
  override def selectByUnique(polrelid: /* oid */ Long, polname: String)(implicit c: Connection): Option[PgPolicyRow] = {
    SQL"""select polrelid, polname
          from pg_catalog.pg_policy
          where polrelid = ${ParameterValue(polrelid, null, ToStatement.longToStatement)} AND polname = ${ParameterValue(polname, null, ToStatement.stringToStatement)}
       """.as(PgPolicyRow.rowParser(1).singleOpt)
    
  }
  override def update(row: PgPolicyRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_policy
          set polname = ${ParameterValue(row.polname, null, ToStatement.stringToStatement)}::name,
              polrelid = ${ParameterValue(row.polrelid, null, ToStatement.longToStatement)}::oid,
              polcmd = ${ParameterValue(row.polcmd, null, ToStatement.stringToStatement)}::char,
              polpermissive = ${ParameterValue(row.polpermissive, null, ToStatement.booleanToStatement)},
              polroles = ${ParameterValue(row.polroles, null, adventureworks.LongArrayToStatement)}::_oid,
              polqual = ${ParameterValue(row.polqual, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree,
              polwithcheck = ${ParameterValue(row.polwithcheck, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree
          where oid = ${ParameterValue(oid, null, PgPolicyId.toStatement)}
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgPolicyFields, PgPolicyRow] = {
    UpdateBuilder("pg_catalog.pg_policy", PgPolicyFields, PgPolicyRow.rowParser)
  }
  override def upsert(unsaved: PgPolicyRow)(implicit c: Connection): PgPolicyRow = {
    SQL"""insert into pg_catalog.pg_policy(oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck)
          values (
            ${ParameterValue(unsaved.oid, null, PgPolicyId.toStatement)}::oid,
            ${ParameterValue(unsaved.polname, null, ToStatement.stringToStatement)}::name,
            ${ParameterValue(unsaved.polrelid, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.polcmd, null, ToStatement.stringToStatement)}::char,
            ${ParameterValue(unsaved.polpermissive, null, ToStatement.booleanToStatement)},
            ${ParameterValue(unsaved.polroles, null, adventureworks.LongArrayToStatement)}::_oid,
            ${ParameterValue(unsaved.polqual, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree,
            ${ParameterValue(unsaved.polwithcheck, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree
          )
          on conflict (oid)
          do update set
            polname = EXCLUDED.polname,
            polrelid = EXCLUDED.polrelid,
            polcmd = EXCLUDED.polcmd,
            polpermissive = EXCLUDED.polpermissive,
            polroles = EXCLUDED.polroles,
            polqual = EXCLUDED.polqual,
            polwithcheck = EXCLUDED.polwithcheck
          returning oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck
       """
      .executeInsert(PgPolicyRow.rowParser(1).single)
    
  }
}
