/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_available_extension_versions

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgAvailableExtensionVersionsViewRow(
  name: String,
  version: String,
  installed: Boolean,
  superuser: Boolean,
  trusted: Boolean,
  relocatable: Boolean,
  schema: String,
  requires: Array[String],
  comment: String
)

object PgAvailableExtensionVersionsViewRow {
  implicit lazy val reads: Reads[PgAvailableExtensionVersionsViewRow] = Reads[PgAvailableExtensionVersionsViewRow](json => JsResult.fromTry(
      Try(
        PgAvailableExtensionVersionsViewRow(
          name = json.\("name").as(Reads.StringReads),
          version = json.\("version").as(Reads.StringReads),
          installed = json.\("installed").as(Reads.BooleanReads),
          superuser = json.\("superuser").as(Reads.BooleanReads),
          trusted = json.\("trusted").as(Reads.BooleanReads),
          relocatable = json.\("relocatable").as(Reads.BooleanReads),
          schema = json.\("schema").as(Reads.StringReads),
          requires = json.\("requires").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          comment = json.\("comment").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgAvailableExtensionVersionsViewRow] = RowParser[PgAvailableExtensionVersionsViewRow] { row =>
    Success(
      PgAvailableExtensionVersionsViewRow(
        name = row(idx + 0)(Column.columnToString),
        version = row(idx + 1)(Column.columnToString),
        installed = row(idx + 2)(Column.columnToBoolean),
        superuser = row(idx + 3)(Column.columnToBoolean),
        trusted = row(idx + 4)(Column.columnToBoolean),
        relocatable = row(idx + 5)(Column.columnToBoolean),
        schema = row(idx + 6)(Column.columnToString),
        requires = row(idx + 7)(Column.columnToArray[String](Column.columnToString, implicitly)),
        comment = row(idx + 8)(Column.columnToString)
      )
    )
  }
  implicit lazy val writes: OWrites[PgAvailableExtensionVersionsViewRow] = OWrites[PgAvailableExtensionVersionsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Writes.StringWrites.writes(o.name),
      "version" -> Writes.StringWrites.writes(o.version),
      "installed" -> Writes.BooleanWrites.writes(o.installed),
      "superuser" -> Writes.BooleanWrites.writes(o.superuser),
      "trusted" -> Writes.BooleanWrites.writes(o.trusted),
      "relocatable" -> Writes.BooleanWrites.writes(o.relocatable),
      "schema" -> Writes.StringWrites.writes(o.schema),
      "requires" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.requires),
      "comment" -> Writes.StringWrites.writes(o.comment)
    ))
  )
}
