/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_database

import adventureworks.customtypes.TypoOffsetDateTime
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatDatabaseViewRow(
  datid: /* oid */ Long,
  datname: String,
  numbackends: Int,
  xactCommit: Long,
  xactRollback: Long,
  blksRead: Long,
  blksHit: Long,
  tupReturned: Long,
  tupFetched: Long,
  tupInserted: Long,
  tupUpdated: Long,
  tupDeleted: Long,
  conflicts: Long,
  tempFiles: Long,
  tempBytes: Long,
  deadlocks: Long,
  checksumFailures: Long,
  checksumLastFailure: TypoOffsetDateTime,
  blkReadTime: Double,
  blkWriteTime: Double,
  sessionTime: Double,
  activeTime: Double,
  idleInTransactionTime: Double,
  sessions: Long,
  sessionsAbandoned: Long,
  sessionsFatal: Long,
  sessionsKilled: Long,
  statsReset: TypoOffsetDateTime
)

object PgStatDatabaseViewRow {
  implicit lazy val reads: Reads[PgStatDatabaseViewRow] = Reads[PgStatDatabaseViewRow](json => JsResult.fromTry(
      Try(
        PgStatDatabaseViewRow(
          datid = json.\("datid").as(Reads.LongReads),
          datname = json.\("datname").as(Reads.StringReads),
          numbackends = json.\("numbackends").as(Reads.IntReads),
          xactCommit = json.\("xact_commit").as(Reads.LongReads),
          xactRollback = json.\("xact_rollback").as(Reads.LongReads),
          blksRead = json.\("blks_read").as(Reads.LongReads),
          blksHit = json.\("blks_hit").as(Reads.LongReads),
          tupReturned = json.\("tup_returned").as(Reads.LongReads),
          tupFetched = json.\("tup_fetched").as(Reads.LongReads),
          tupInserted = json.\("tup_inserted").as(Reads.LongReads),
          tupUpdated = json.\("tup_updated").as(Reads.LongReads),
          tupDeleted = json.\("tup_deleted").as(Reads.LongReads),
          conflicts = json.\("conflicts").as(Reads.LongReads),
          tempFiles = json.\("temp_files").as(Reads.LongReads),
          tempBytes = json.\("temp_bytes").as(Reads.LongReads),
          deadlocks = json.\("deadlocks").as(Reads.LongReads),
          checksumFailures = json.\("checksum_failures").as(Reads.LongReads),
          checksumLastFailure = json.\("checksum_last_failure").as(TypoOffsetDateTime.reads),
          blkReadTime = json.\("blk_read_time").as(Reads.DoubleReads),
          blkWriteTime = json.\("blk_write_time").as(Reads.DoubleReads),
          sessionTime = json.\("session_time").as(Reads.DoubleReads),
          activeTime = json.\("active_time").as(Reads.DoubleReads),
          idleInTransactionTime = json.\("idle_in_transaction_time").as(Reads.DoubleReads),
          sessions = json.\("sessions").as(Reads.LongReads),
          sessionsAbandoned = json.\("sessions_abandoned").as(Reads.LongReads),
          sessionsFatal = json.\("sessions_fatal").as(Reads.LongReads),
          sessionsKilled = json.\("sessions_killed").as(Reads.LongReads),
          statsReset = json.\("stats_reset").as(TypoOffsetDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatDatabaseViewRow] = RowParser[PgStatDatabaseViewRow] { row =>
    Success(
      PgStatDatabaseViewRow(
        datid = row(idx + 0)(Column.columnToLong),
        datname = row(idx + 1)(Column.columnToString),
        numbackends = row(idx + 2)(Column.columnToInt),
        xactCommit = row(idx + 3)(Column.columnToLong),
        xactRollback = row(idx + 4)(Column.columnToLong),
        blksRead = row(idx + 5)(Column.columnToLong),
        blksHit = row(idx + 6)(Column.columnToLong),
        tupReturned = row(idx + 7)(Column.columnToLong),
        tupFetched = row(idx + 8)(Column.columnToLong),
        tupInserted = row(idx + 9)(Column.columnToLong),
        tupUpdated = row(idx + 10)(Column.columnToLong),
        tupDeleted = row(idx + 11)(Column.columnToLong),
        conflicts = row(idx + 12)(Column.columnToLong),
        tempFiles = row(idx + 13)(Column.columnToLong),
        tempBytes = row(idx + 14)(Column.columnToLong),
        deadlocks = row(idx + 15)(Column.columnToLong),
        checksumFailures = row(idx + 16)(Column.columnToLong),
        checksumLastFailure = row(idx + 17)(TypoOffsetDateTime.column),
        blkReadTime = row(idx + 18)(Column.columnToDouble),
        blkWriteTime = row(idx + 19)(Column.columnToDouble),
        sessionTime = row(idx + 20)(Column.columnToDouble),
        activeTime = row(idx + 21)(Column.columnToDouble),
        idleInTransactionTime = row(idx + 22)(Column.columnToDouble),
        sessions = row(idx + 23)(Column.columnToLong),
        sessionsAbandoned = row(idx + 24)(Column.columnToLong),
        sessionsFatal = row(idx + 25)(Column.columnToLong),
        sessionsKilled = row(idx + 26)(Column.columnToLong),
        statsReset = row(idx + 27)(TypoOffsetDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatDatabaseViewRow] = OWrites[PgStatDatabaseViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "datid" -> Writes.LongWrites.writes(o.datid),
      "datname" -> Writes.StringWrites.writes(o.datname),
      "numbackends" -> Writes.IntWrites.writes(o.numbackends),
      "xact_commit" -> Writes.LongWrites.writes(o.xactCommit),
      "xact_rollback" -> Writes.LongWrites.writes(o.xactRollback),
      "blks_read" -> Writes.LongWrites.writes(o.blksRead),
      "blks_hit" -> Writes.LongWrites.writes(o.blksHit),
      "tup_returned" -> Writes.LongWrites.writes(o.tupReturned),
      "tup_fetched" -> Writes.LongWrites.writes(o.tupFetched),
      "tup_inserted" -> Writes.LongWrites.writes(o.tupInserted),
      "tup_updated" -> Writes.LongWrites.writes(o.tupUpdated),
      "tup_deleted" -> Writes.LongWrites.writes(o.tupDeleted),
      "conflicts" -> Writes.LongWrites.writes(o.conflicts),
      "temp_files" -> Writes.LongWrites.writes(o.tempFiles),
      "temp_bytes" -> Writes.LongWrites.writes(o.tempBytes),
      "deadlocks" -> Writes.LongWrites.writes(o.deadlocks),
      "checksum_failures" -> Writes.LongWrites.writes(o.checksumFailures),
      "checksum_last_failure" -> TypoOffsetDateTime.writes.writes(o.checksumLastFailure),
      "blk_read_time" -> Writes.DoubleWrites.writes(o.blkReadTime),
      "blk_write_time" -> Writes.DoubleWrites.writes(o.blkWriteTime),
      "session_time" -> Writes.DoubleWrites.writes(o.sessionTime),
      "active_time" -> Writes.DoubleWrites.writes(o.activeTime),
      "idle_in_transaction_time" -> Writes.DoubleWrites.writes(o.idleInTransactionTime),
      "sessions" -> Writes.LongWrites.writes(o.sessions),
      "sessions_abandoned" -> Writes.LongWrites.writes(o.sessionsAbandoned),
      "sessions_fatal" -> Writes.LongWrites.writes(o.sessionsFatal),
      "sessions_killed" -> Writes.LongWrites.writes(o.sessionsKilled),
      "stats_reset" -> TypoOffsetDateTime.writes.writes(o.statsReset)
    ))
  )
}
