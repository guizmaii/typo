/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stats_ext

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatsExtViewRow(
  schemaname: String,
  tablename: String,
  statisticsSchemaname: Option[String],
  statisticsName: String,
  statisticsOwner: String,
  attnames: Array[String],
  exprs: Array[String],
  kinds: Array[String],
  nDistinct: String,
  dependencies: String,
  mostCommonVals: Array[String],
  mostCommonValNulls: Array[Boolean],
  mostCommonFreqs: Array[Double],
  mostCommonBaseFreqs: Array[Double]
)

object PgStatsExtViewRow {
  implicit lazy val reads: Reads[PgStatsExtViewRow] = Reads[PgStatsExtViewRow](json => JsResult.fromTry(
      Try(
        PgStatsExtViewRow(
          schemaname = json.\("schemaname").as(Reads.StringReads),
          tablename = json.\("tablename").as(Reads.StringReads),
          statisticsSchemaname = json.\("statistics_schemaname").toOption.map(_.as(Reads.StringReads)),
          statisticsName = json.\("statistics_name").as(Reads.StringReads),
          statisticsOwner = json.\("statistics_owner").as(Reads.StringReads),
          attnames = json.\("attnames").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          exprs = json.\("exprs").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          kinds = json.\("kinds").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          nDistinct = json.\("n_distinct").as(Reads.StringReads),
          dependencies = json.\("dependencies").as(Reads.StringReads),
          mostCommonVals = json.\("most_common_vals").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          mostCommonValNulls = json.\("most_common_val_nulls").as(Reads.ArrayReads[Boolean](Reads.BooleanReads, implicitly)),
          mostCommonFreqs = json.\("most_common_freqs").as(Reads.ArrayReads[Double](Reads.DoubleReads, implicitly)),
          mostCommonBaseFreqs = json.\("most_common_base_freqs").as(Reads.ArrayReads[Double](Reads.DoubleReads, implicitly))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatsExtViewRow] = RowParser[PgStatsExtViewRow] { row =>
    Success(
      PgStatsExtViewRow(
        schemaname = row(idx + 0)(Column.columnToString),
        tablename = row(idx + 1)(Column.columnToString),
        statisticsSchemaname = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        statisticsName = row(idx + 3)(Column.columnToString),
        statisticsOwner = row(idx + 4)(Column.columnToString),
        attnames = row(idx + 5)(Column.columnToArray[String](Column.columnToString, implicitly)),
        exprs = row(idx + 6)(Column.columnToArray[String](Column.columnToString, implicitly)),
        kinds = row(idx + 7)(Column.columnToArray[String](Column.columnToString, implicitly)),
        nDistinct = row(idx + 8)(Column.columnToString),
        dependencies = row(idx + 9)(Column.columnToString),
        mostCommonVals = row(idx + 10)(Column.columnToArray[String](Column.columnToString, implicitly)),
        mostCommonValNulls = row(idx + 11)(Column.columnToArray[Boolean](Column.columnToBoolean, implicitly)),
        mostCommonFreqs = row(idx + 12)(Column.columnToArray[Double](Column.columnToDouble, implicitly)),
        mostCommonBaseFreqs = row(idx + 13)(Column.columnToArray[Double](Column.columnToDouble, implicitly))
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatsExtViewRow] = OWrites[PgStatsExtViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "schemaname" -> Writes.StringWrites.writes(o.schemaname),
      "tablename" -> Writes.StringWrites.writes(o.tablename),
      "statistics_schemaname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.statisticsSchemaname),
      "statistics_name" -> Writes.StringWrites.writes(o.statisticsName),
      "statistics_owner" -> Writes.StringWrites.writes(o.statisticsOwner),
      "attnames" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.attnames),
      "exprs" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.exprs),
      "kinds" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.kinds),
      "n_distinct" -> Writes.StringWrites.writes(o.nDistinct),
      "dependencies" -> Writes.StringWrites.writes(o.dependencies),
      "most_common_vals" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.mostCommonVals),
      "most_common_val_nulls" -> Writes.arrayWrites[Boolean](implicitly, Writes.BooleanWrites).writes(o.mostCommonValNulls),
      "most_common_freqs" -> Writes.arrayWrites[Double](implicitly, Writes.DoubleWrites).writes(o.mostCommonFreqs),
      "most_common_base_freqs" -> Writes.arrayWrites[Double](implicitly, Writes.DoubleWrites).writes(o.mostCommonBaseFreqs)
    ))
  )
}
