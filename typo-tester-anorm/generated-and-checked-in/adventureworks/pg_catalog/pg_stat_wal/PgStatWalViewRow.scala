/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_wal

import adventureworks.customtypes.TypoOffsetDateTime
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatWalViewRow(
  walRecords: Long,
  walFpi: Long,
  walBytes: BigDecimal,
  walBuffersFull: Long,
  walWrite: Long,
  walSync: Long,
  walWriteTime: Double,
  walSyncTime: Double,
  statsReset: TypoOffsetDateTime
)

object PgStatWalViewRow {
  implicit lazy val reads: Reads[PgStatWalViewRow] = Reads[PgStatWalViewRow](json => JsResult.fromTry(
      Try(
        PgStatWalViewRow(
          walRecords = json.\("wal_records").as(Reads.LongReads),
          walFpi = json.\("wal_fpi").as(Reads.LongReads),
          walBytes = json.\("wal_bytes").as(Reads.bigDecReads),
          walBuffersFull = json.\("wal_buffers_full").as(Reads.LongReads),
          walWrite = json.\("wal_write").as(Reads.LongReads),
          walSync = json.\("wal_sync").as(Reads.LongReads),
          walWriteTime = json.\("wal_write_time").as(Reads.DoubleReads),
          walSyncTime = json.\("wal_sync_time").as(Reads.DoubleReads),
          statsReset = json.\("stats_reset").as(TypoOffsetDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatWalViewRow] = RowParser[PgStatWalViewRow] { row =>
    Success(
      PgStatWalViewRow(
        walRecords = row(idx + 0)(Column.columnToLong),
        walFpi = row(idx + 1)(Column.columnToLong),
        walBytes = row(idx + 2)(Column.columnToScalaBigDecimal),
        walBuffersFull = row(idx + 3)(Column.columnToLong),
        walWrite = row(idx + 4)(Column.columnToLong),
        walSync = row(idx + 5)(Column.columnToLong),
        walWriteTime = row(idx + 6)(Column.columnToDouble),
        walSyncTime = row(idx + 7)(Column.columnToDouble),
        statsReset = row(idx + 8)(TypoOffsetDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatWalViewRow] = OWrites[PgStatWalViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "wal_records" -> Writes.LongWrites.writes(o.walRecords),
      "wal_fpi" -> Writes.LongWrites.writes(o.walFpi),
      "wal_bytes" -> Writes.BigDecimalWrites.writes(o.walBytes),
      "wal_buffers_full" -> Writes.LongWrites.writes(o.walBuffersFull),
      "wal_write" -> Writes.LongWrites.writes(o.walWrite),
      "wal_sync" -> Writes.LongWrites.writes(o.walSync),
      "wal_write_time" -> Writes.DoubleWrites.writes(o.walWriteTime),
      "wal_sync_time" -> Writes.DoubleWrites.writes(o.walSyncTime),
      "stats_reset" -> TypoOffsetDateTime.writes.writes(o.statsReset)
    ))
  )
}
