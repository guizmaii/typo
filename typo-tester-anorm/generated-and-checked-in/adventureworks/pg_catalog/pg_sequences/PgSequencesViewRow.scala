/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequences

import adventureworks.customtypes.TypoRegtype
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgSequencesViewRow(
  schemaname: String,
  sequencename: String,
  sequenceowner: String,
  dataType: TypoRegtype,
  startValue: Long,
  minValue: Long,
  maxValue: Long,
  incrementBy: Long,
  cycle: Boolean,
  cacheSize: Long,
  lastValue: Long
)

object PgSequencesViewRow {
  implicit lazy val reads: Reads[PgSequencesViewRow] = Reads[PgSequencesViewRow](json => JsResult.fromTry(
      Try(
        PgSequencesViewRow(
          schemaname = json.\("schemaname").as(Reads.StringReads),
          sequencename = json.\("sequencename").as(Reads.StringReads),
          sequenceowner = json.\("sequenceowner").as(Reads.StringReads),
          dataType = json.\("data_type").as(TypoRegtype.reads),
          startValue = json.\("start_value").as(Reads.LongReads),
          minValue = json.\("min_value").as(Reads.LongReads),
          maxValue = json.\("max_value").as(Reads.LongReads),
          incrementBy = json.\("increment_by").as(Reads.LongReads),
          cycle = json.\("cycle").as(Reads.BooleanReads),
          cacheSize = json.\("cache_size").as(Reads.LongReads),
          lastValue = json.\("last_value").as(Reads.LongReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgSequencesViewRow] = RowParser[PgSequencesViewRow] { row =>
    Success(
      PgSequencesViewRow(
        schemaname = row(idx + 0)(Column.columnToString),
        sequencename = row(idx + 1)(Column.columnToString),
        sequenceowner = row(idx + 2)(Column.columnToString),
        dataType = row(idx + 3)(TypoRegtype.column),
        startValue = row(idx + 4)(Column.columnToLong),
        minValue = row(idx + 5)(Column.columnToLong),
        maxValue = row(idx + 6)(Column.columnToLong),
        incrementBy = row(idx + 7)(Column.columnToLong),
        cycle = row(idx + 8)(Column.columnToBoolean),
        cacheSize = row(idx + 9)(Column.columnToLong),
        lastValue = row(idx + 10)(Column.columnToLong)
      )
    )
  }
  implicit lazy val writes: OWrites[PgSequencesViewRow] = OWrites[PgSequencesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "schemaname" -> Writes.StringWrites.writes(o.schemaname),
      "sequencename" -> Writes.StringWrites.writes(o.sequencename),
      "sequenceowner" -> Writes.StringWrites.writes(o.sequenceowner),
      "data_type" -> TypoRegtype.writes.writes(o.dataType),
      "start_value" -> Writes.LongWrites.writes(o.startValue),
      "min_value" -> Writes.LongWrites.writes(o.minValue),
      "max_value" -> Writes.LongWrites.writes(o.maxValue),
      "increment_by" -> Writes.LongWrites.writes(o.incrementBy),
      "cycle" -> Writes.BooleanWrites.writes(o.cycle),
      "cache_size" -> Writes.LongWrites.writes(o.cacheSize),
      "last_value" -> Writes.LongWrites.writes(o.lastValue)
    ))
  )
}
