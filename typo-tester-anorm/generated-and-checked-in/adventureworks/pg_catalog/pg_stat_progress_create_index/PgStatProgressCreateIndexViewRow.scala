/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_create_index

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatProgressCreateIndexViewRow(
  pid: Int,
  datid: /* oid */ Long,
  datname: Option[String],
  relid: /* oid */ Long,
  indexRelid: /* oid */ Long,
  command: String,
  phase: String,
  lockersTotal: Long,
  lockersDone: Long,
  currentLockerPid: Long,
  blocksTotal: Long,
  blocksDone: Long,
  tuplesTotal: Long,
  tuplesDone: Long,
  partitionsTotal: Long,
  partitionsDone: Long
)

object PgStatProgressCreateIndexViewRow {
  implicit lazy val reads: Reads[PgStatProgressCreateIndexViewRow] = Reads[PgStatProgressCreateIndexViewRow](json => JsResult.fromTry(
      Try(
        PgStatProgressCreateIndexViewRow(
          pid = json.\("pid").as(Reads.IntReads),
          datid = json.\("datid").as(Reads.LongReads),
          datname = json.\("datname").toOption.map(_.as(Reads.StringReads)),
          relid = json.\("relid").as(Reads.LongReads),
          indexRelid = json.\("index_relid").as(Reads.LongReads),
          command = json.\("command").as(Reads.StringReads),
          phase = json.\("phase").as(Reads.StringReads),
          lockersTotal = json.\("lockers_total").as(Reads.LongReads),
          lockersDone = json.\("lockers_done").as(Reads.LongReads),
          currentLockerPid = json.\("current_locker_pid").as(Reads.LongReads),
          blocksTotal = json.\("blocks_total").as(Reads.LongReads),
          blocksDone = json.\("blocks_done").as(Reads.LongReads),
          tuplesTotal = json.\("tuples_total").as(Reads.LongReads),
          tuplesDone = json.\("tuples_done").as(Reads.LongReads),
          partitionsTotal = json.\("partitions_total").as(Reads.LongReads),
          partitionsDone = json.\("partitions_done").as(Reads.LongReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatProgressCreateIndexViewRow] = RowParser[PgStatProgressCreateIndexViewRow] { row =>
    Success(
      PgStatProgressCreateIndexViewRow(
        pid = row(idx + 0)(Column.columnToInt),
        datid = row(idx + 1)(Column.columnToLong),
        datname = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        relid = row(idx + 3)(Column.columnToLong),
        indexRelid = row(idx + 4)(Column.columnToLong),
        command = row(idx + 5)(Column.columnToString),
        phase = row(idx + 6)(Column.columnToString),
        lockersTotal = row(idx + 7)(Column.columnToLong),
        lockersDone = row(idx + 8)(Column.columnToLong),
        currentLockerPid = row(idx + 9)(Column.columnToLong),
        blocksTotal = row(idx + 10)(Column.columnToLong),
        blocksDone = row(idx + 11)(Column.columnToLong),
        tuplesTotal = row(idx + 12)(Column.columnToLong),
        tuplesDone = row(idx + 13)(Column.columnToLong),
        partitionsTotal = row(idx + 14)(Column.columnToLong),
        partitionsDone = row(idx + 15)(Column.columnToLong)
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatProgressCreateIndexViewRow] = OWrites[PgStatProgressCreateIndexViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Writes.IntWrites.writes(o.pid),
      "datid" -> Writes.LongWrites.writes(o.datid),
      "datname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.datname),
      "relid" -> Writes.LongWrites.writes(o.relid),
      "index_relid" -> Writes.LongWrites.writes(o.indexRelid),
      "command" -> Writes.StringWrites.writes(o.command),
      "phase" -> Writes.StringWrites.writes(o.phase),
      "lockers_total" -> Writes.LongWrites.writes(o.lockersTotal),
      "lockers_done" -> Writes.LongWrites.writes(o.lockersDone),
      "current_locker_pid" -> Writes.LongWrites.writes(o.currentLockerPid),
      "blocks_total" -> Writes.LongWrites.writes(o.blocksTotal),
      "blocks_done" -> Writes.LongWrites.writes(o.blocksDone),
      "tuples_total" -> Writes.LongWrites.writes(o.tuplesTotal),
      "tuples_done" -> Writes.LongWrites.writes(o.tuplesDone),
      "partitions_total" -> Writes.LongWrites.writes(o.partitionsTotal),
      "partitions_done" -> Writes.LongWrites.writes(o.partitionsDone)
    ))
  )
}
