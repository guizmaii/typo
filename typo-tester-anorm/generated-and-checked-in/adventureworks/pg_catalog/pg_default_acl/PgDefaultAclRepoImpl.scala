/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_default_acl

import adventureworks.customtypes.TypoAclItem
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgDefaultAclRepoImpl extends PgDefaultAclRepo {
  override def delete(oid: PgDefaultAclId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_default_acl where oid = ${ParameterValue(oid, null, PgDefaultAclId.toStatement)}".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    DeleteBuilder("pg_catalog.pg_default_acl", PgDefaultAclFields)
  }
  override def insert(unsaved: PgDefaultAclRow)(implicit c: Connection): PgDefaultAclRow = {
    SQL"""insert into pg_catalog.pg_default_acl(oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl)
          values (${ParameterValue(unsaved.oid, null, PgDefaultAclId.toStatement)}::oid, ${ParameterValue(unsaved.defaclrole, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.defaclnamespace, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.defaclobjtype, null, ToStatement.stringToStatement)}::char, ${ParameterValue(unsaved.defaclacl, null, TypoAclItem.arrayToStatement)}::_aclitem)
          returning oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl
       """
      .executeInsert(PgDefaultAclRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    SelectBuilderSql("pg_catalog.pg_default_acl", PgDefaultAclFields, PgDefaultAclRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgDefaultAclRow] = {
    SQL"""select oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl
          from pg_catalog.pg_default_acl
       """.as(PgDefaultAclRow.rowParser(1).*)
  }
  override def selectById(oid: PgDefaultAclId)(implicit c: Connection): Option[PgDefaultAclRow] = {
    SQL"""select oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl
          from pg_catalog.pg_default_acl
          where oid = ${ParameterValue(oid, null, PgDefaultAclId.toStatement)}
       """.as(PgDefaultAclRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgDefaultAclId])(implicit c: Connection): List[PgDefaultAclRow] = {
    SQL"""select oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl
          from pg_catalog.pg_default_acl
          where oid = ANY(${oids})
       """.as(PgDefaultAclRow.rowParser(1).*)
    
  }
  override def selectByUnique(defaclrole: /* oid */ Long, defaclnamespace: /* oid */ Long, defaclobjtype: String)(implicit c: Connection): Option[PgDefaultAclRow] = {
    SQL"""select defaclrole, defaclnamespace, defaclobjtype
          from pg_catalog.pg_default_acl
          where defaclrole = ${ParameterValue(defaclrole, null, ToStatement.longToStatement)} AND defaclnamespace = ${ParameterValue(defaclnamespace, null, ToStatement.longToStatement)} AND defaclobjtype = ${ParameterValue(defaclobjtype, null, ToStatement.stringToStatement)}
       """.as(PgDefaultAclRow.rowParser(1).singleOpt)
    
  }
  override def update(row: PgDefaultAclRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_default_acl
          set defaclrole = ${ParameterValue(row.defaclrole, null, ToStatement.longToStatement)}::oid,
              defaclnamespace = ${ParameterValue(row.defaclnamespace, null, ToStatement.longToStatement)}::oid,
              defaclobjtype = ${ParameterValue(row.defaclobjtype, null, ToStatement.stringToStatement)}::char,
              defaclacl = ${ParameterValue(row.defaclacl, null, TypoAclItem.arrayToStatement)}::_aclitem
          where oid = ${ParameterValue(oid, null, PgDefaultAclId.toStatement)}
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    UpdateBuilder("pg_catalog.pg_default_acl", PgDefaultAclFields, PgDefaultAclRow.rowParser)
  }
  override def upsert(unsaved: PgDefaultAclRow)(implicit c: Connection): PgDefaultAclRow = {
    SQL"""insert into pg_catalog.pg_default_acl(oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl)
          values (
            ${ParameterValue(unsaved.oid, null, PgDefaultAclId.toStatement)}::oid,
            ${ParameterValue(unsaved.defaclrole, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.defaclnamespace, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.defaclobjtype, null, ToStatement.stringToStatement)}::char,
            ${ParameterValue(unsaved.defaclacl, null, TypoAclItem.arrayToStatement)}::_aclitem
          )
          on conflict (oid)
          do update set
            defaclrole = EXCLUDED.defaclrole,
            defaclnamespace = EXCLUDED.defaclnamespace,
            defaclobjtype = EXCLUDED.defaclobjtype,
            defaclacl = EXCLUDED.defaclacl
          returning oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl
       """
      .executeInsert(PgDefaultAclRow.rowParser(1).single)
    
  }
}
