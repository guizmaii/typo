/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_database_conflicts

import adventureworks.pg_catalog.pg_database.PgDatabaseId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatDatabaseConflictsViewRow(
  /** Points to [[pg_database.PgDatabaseRow.oid]] */
  datid: PgDatabaseId,
  /** Points to [[pg_database.PgDatabaseRow.datname]] */
  datname: String,
  conflTablespace: /* nullability unknown */ Option[Long],
  conflLock: /* nullability unknown */ Option[Long],
  conflSnapshot: /* nullability unknown */ Option[Long],
  conflBufferpin: /* nullability unknown */ Option[Long],
  conflDeadlock: /* nullability unknown */ Option[Long]
)

object PgStatDatabaseConflictsViewRow {
  implicit lazy val reads: Reads[PgStatDatabaseConflictsViewRow] = Reads[PgStatDatabaseConflictsViewRow](json => JsResult.fromTry(
      Try(
        PgStatDatabaseConflictsViewRow(
          datid = json.\("datid").as(PgDatabaseId.reads),
          datname = json.\("datname").as(Reads.StringReads),
          conflTablespace = json.\("confl_tablespace").toOption.map(_.as(Reads.LongReads)),
          conflLock = json.\("confl_lock").toOption.map(_.as(Reads.LongReads)),
          conflSnapshot = json.\("confl_snapshot").toOption.map(_.as(Reads.LongReads)),
          conflBufferpin = json.\("confl_bufferpin").toOption.map(_.as(Reads.LongReads)),
          conflDeadlock = json.\("confl_deadlock").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatDatabaseConflictsViewRow] = RowParser[PgStatDatabaseConflictsViewRow] { row =>
    Success(
      PgStatDatabaseConflictsViewRow(
        datid = row(idx + 0)(PgDatabaseId.column),
        datname = row(idx + 1)(Column.columnToString),
        conflTablespace = row(idx + 2)(Column.columnToOption(Column.columnToLong)),
        conflLock = row(idx + 3)(Column.columnToOption(Column.columnToLong)),
        conflSnapshot = row(idx + 4)(Column.columnToOption(Column.columnToLong)),
        conflBufferpin = row(idx + 5)(Column.columnToOption(Column.columnToLong)),
        conflDeadlock = row(idx + 6)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatDatabaseConflictsViewRow] = OWrites[PgStatDatabaseConflictsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "datid" -> PgDatabaseId.writes.writes(o.datid),
      "datname" -> Writes.StringWrites.writes(o.datname),
      "confl_tablespace" -> Writes.OptionWrites(Writes.LongWrites).writes(o.conflTablespace),
      "confl_lock" -> Writes.OptionWrites(Writes.LongWrites).writes(o.conflLock),
      "confl_snapshot" -> Writes.OptionWrites(Writes.LongWrites).writes(o.conflSnapshot),
      "confl_bufferpin" -> Writes.OptionWrites(Writes.LongWrites).writes(o.conflBufferpin),
      "confl_deadlock" -> Writes.OptionWrites(Writes.LongWrites).writes(o.conflDeadlock)
    ))
  )
}
