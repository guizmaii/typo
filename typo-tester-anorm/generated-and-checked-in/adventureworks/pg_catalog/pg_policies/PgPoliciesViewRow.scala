/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policies

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgPoliciesViewRow(
  schemaname: String,
  tablename: String,
  policyname: String,
  permissive: String,
  roles: Array[String],
  cmd: String,
  qual: String,
  withCheck: String
)

object PgPoliciesViewRow {
  implicit lazy val reads: Reads[PgPoliciesViewRow] = Reads[PgPoliciesViewRow](json => JsResult.fromTry(
      Try(
        PgPoliciesViewRow(
          schemaname = json.\("schemaname").as(Reads.StringReads),
          tablename = json.\("tablename").as(Reads.StringReads),
          policyname = json.\("policyname").as(Reads.StringReads),
          permissive = json.\("permissive").as(Reads.StringReads),
          roles = json.\("roles").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          cmd = json.\("cmd").as(Reads.StringReads),
          qual = json.\("qual").as(Reads.StringReads),
          withCheck = json.\("with_check").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgPoliciesViewRow] = RowParser[PgPoliciesViewRow] { row =>
    Success(
      PgPoliciesViewRow(
        schemaname = row(idx + 0)(Column.columnToString),
        tablename = row(idx + 1)(Column.columnToString),
        policyname = row(idx + 2)(Column.columnToString),
        permissive = row(idx + 3)(Column.columnToString),
        roles = row(idx + 4)(Column.columnToArray[String](Column.columnToString, implicitly)),
        cmd = row(idx + 5)(Column.columnToString),
        qual = row(idx + 6)(Column.columnToString),
        withCheck = row(idx + 7)(Column.columnToString)
      )
    )
  }
  implicit lazy val writes: OWrites[PgPoliciesViewRow] = OWrites[PgPoliciesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "schemaname" -> Writes.StringWrites.writes(o.schemaname),
      "tablename" -> Writes.StringWrites.writes(o.tablename),
      "policyname" -> Writes.StringWrites.writes(o.policyname),
      "permissive" -> Writes.StringWrites.writes(o.permissive),
      "roles" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.roles),
      "cmd" -> Writes.StringWrites.writes(o.cmd),
      "qual" -> Writes.StringWrites.writes(o.qual),
      "with_check" -> Writes.StringWrites.writes(o.withCheck)
    ))
  )
}
