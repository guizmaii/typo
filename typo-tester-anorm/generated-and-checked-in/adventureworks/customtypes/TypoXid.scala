/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.jdbc.PgArray
import org.postgresql.util.PGobject
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** xid (via PGObject) */
case class TypoXid(value: String)

object TypoXid {
  implicit lazy val arrayColumn: Column[Array[TypoXid]] = Column.nonNull[Array[TypoXid]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoXid(v.asInstanceOf[String])))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoXid, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val arrayToStatement: ToStatement[Array[TypoXid]] = ToStatement[Array[TypoXid]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("xid", v.map(v => {
                                                                                                                   val obj = new PGobject
                                                                                                                   obj.setType("xid")
                                                                                                                   obj.setValue(v.value)
                                                                                                                   obj
                                                                                                                 }))))
  implicit lazy val bijection: Bijection[TypoXid, String] = Bijection[TypoXid, String](_.value)(TypoXid.apply)
  implicit lazy val column: Column[TypoXid] = Column.nonNull[TypoXid]((v1: Any, _) =>
    v1 match {
      case v: PGobject => Right(TypoXid(v.getValue))
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.util.PGobject, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val ordering: Ordering[TypoXid] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TypoXid] = new ParameterMetaData[TypoXid] {
    override def sqlType: String = "xid"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[TypoXid] = Reads.StringReads.map(TypoXid.apply)
  implicit lazy val toStatement: ToStatement[TypoXid] = ToStatement[TypoXid]((s, index, v) => s.setObject(index, {
                                                             val obj = new PGobject
                                                             obj.setType("xid")
                                                             obj.setValue(v.value)
                                                             obj
                                                           }))
  implicit lazy val writes: Writes[TypoXid] = Writes.StringWrites.contramap(_.value)
}
