/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateemployment

import adventureworks.customtypes.TypoLocalDate
import adventureworks.humanresources.jobcandidate.JobcandidateId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class VjobcandidateemploymentViewRow(
  /** Points to [[jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: JobcandidateId,
  `Emp.StartDate`: TypoLocalDate,
  `Emp.EndDate`: TypoLocalDate,
  `Emp.OrgName`: /* max 100 chars */ String,
  `Emp.JobTitle`: /* max 100 chars */ String,
  `Emp.Responsibility`: String,
  `Emp.FunctionCategory`: String,
  `Emp.IndustryCategory`: String,
  `Emp.Loc.CountryRegion`: String,
  `Emp.Loc.State`: String,
  `Emp.Loc.City`: String
)

object VjobcandidateemploymentViewRow {
  implicit lazy val reads: Reads[VjobcandidateemploymentViewRow] = Reads[VjobcandidateemploymentViewRow](json => JsResult.fromTry(
      Try(
        VjobcandidateemploymentViewRow(
          jobcandidateid = json.\("jobcandidateid").as(JobcandidateId.reads),
          `Emp.StartDate` = json.\("Emp.StartDate").as(TypoLocalDate.reads),
          `Emp.EndDate` = json.\("Emp.EndDate").as(TypoLocalDate.reads),
          `Emp.OrgName` = json.\("Emp.OrgName").as(Reads.StringReads),
          `Emp.JobTitle` = json.\("Emp.JobTitle").as(Reads.StringReads),
          `Emp.Responsibility` = json.\("Emp.Responsibility").as(Reads.StringReads),
          `Emp.FunctionCategory` = json.\("Emp.FunctionCategory").as(Reads.StringReads),
          `Emp.IndustryCategory` = json.\("Emp.IndustryCategory").as(Reads.StringReads),
          `Emp.Loc.CountryRegion` = json.\("Emp.Loc.CountryRegion").as(Reads.StringReads),
          `Emp.Loc.State` = json.\("Emp.Loc.State").as(Reads.StringReads),
          `Emp.Loc.City` = json.\("Emp.Loc.City").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VjobcandidateemploymentViewRow] = RowParser[VjobcandidateemploymentViewRow] { row =>
    Success(
      VjobcandidateemploymentViewRow(
        jobcandidateid = row(idx + 0)(JobcandidateId.column),
        `Emp.StartDate` = row(idx + 1)(TypoLocalDate.column),
        `Emp.EndDate` = row(idx + 2)(TypoLocalDate.column),
        `Emp.OrgName` = row(idx + 3)(Column.columnToString),
        `Emp.JobTitle` = row(idx + 4)(Column.columnToString),
        `Emp.Responsibility` = row(idx + 5)(Column.columnToString),
        `Emp.FunctionCategory` = row(idx + 6)(Column.columnToString),
        `Emp.IndustryCategory` = row(idx + 7)(Column.columnToString),
        `Emp.Loc.CountryRegion` = row(idx + 8)(Column.columnToString),
        `Emp.Loc.State` = row(idx + 9)(Column.columnToString),
        `Emp.Loc.City` = row(idx + 10)(Column.columnToString)
      )
    )
  }
  implicit lazy val writes: OWrites[VjobcandidateemploymentViewRow] = OWrites[VjobcandidateemploymentViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "jobcandidateid" -> JobcandidateId.writes.writes(o.jobcandidateid),
      "Emp.StartDate" -> TypoLocalDate.writes.writes(o.`Emp.StartDate`),
      "Emp.EndDate" -> TypoLocalDate.writes.writes(o.`Emp.EndDate`),
      "Emp.OrgName" -> Writes.StringWrites.writes(o.`Emp.OrgName`),
      "Emp.JobTitle" -> Writes.StringWrites.writes(o.`Emp.JobTitle`),
      "Emp.Responsibility" -> Writes.StringWrites.writes(o.`Emp.Responsibility`),
      "Emp.FunctionCategory" -> Writes.StringWrites.writes(o.`Emp.FunctionCategory`),
      "Emp.IndustryCategory" -> Writes.StringWrites.writes(o.`Emp.IndustryCategory`),
      "Emp.Loc.CountryRegion" -> Writes.StringWrites.writes(o.`Emp.Loc.CountryRegion`),
      "Emp.Loc.State" -> Writes.StringWrites.writes(o.`Emp.Loc.State`),
      "Emp.Loc.City" -> Writes.StringWrites.writes(o.`Emp.Loc.City`)
    ))
  )
}
