/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateeducation

import adventureworks.customtypes.TypoLocalDate
import adventureworks.humanresources.jobcandidate.JobcandidateId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class VjobcandidateeducationViewRow(
  /** Points to [[jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: JobcandidateId,
  `Edu.Level`: /* max 50 chars */ String,
  `Edu.StartDate`: TypoLocalDate,
  `Edu.EndDate`: TypoLocalDate,
  `Edu.Degree`: /* max 50 chars */ String,
  `Edu.Major`: /* max 50 chars */ String,
  `Edu.Minor`: /* max 50 chars */ String,
  `Edu.GPA`: /* max 5 chars */ String,
  `Edu.GPAScale`: /* max 5 chars */ String,
  `Edu.School`: /* max 100 chars */ String,
  `Edu.Loc.CountryRegion`: /* max 100 chars */ String,
  `Edu.Loc.State`: /* max 100 chars */ String,
  `Edu.Loc.City`: /* max 100 chars */ String
)

object VjobcandidateeducationViewRow {
  implicit lazy val reads: Reads[VjobcandidateeducationViewRow] = Reads[VjobcandidateeducationViewRow](json => JsResult.fromTry(
      Try(
        VjobcandidateeducationViewRow(
          jobcandidateid = json.\("jobcandidateid").as(JobcandidateId.reads),
          `Edu.Level` = json.\("Edu.Level").as(Reads.StringReads),
          `Edu.StartDate` = json.\("Edu.StartDate").as(TypoLocalDate.reads),
          `Edu.EndDate` = json.\("Edu.EndDate").as(TypoLocalDate.reads),
          `Edu.Degree` = json.\("Edu.Degree").as(Reads.StringReads),
          `Edu.Major` = json.\("Edu.Major").as(Reads.StringReads),
          `Edu.Minor` = json.\("Edu.Minor").as(Reads.StringReads),
          `Edu.GPA` = json.\("Edu.GPA").as(Reads.StringReads),
          `Edu.GPAScale` = json.\("Edu.GPAScale").as(Reads.StringReads),
          `Edu.School` = json.\("Edu.School").as(Reads.StringReads),
          `Edu.Loc.CountryRegion` = json.\("Edu.Loc.CountryRegion").as(Reads.StringReads),
          `Edu.Loc.State` = json.\("Edu.Loc.State").as(Reads.StringReads),
          `Edu.Loc.City` = json.\("Edu.Loc.City").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VjobcandidateeducationViewRow] = RowParser[VjobcandidateeducationViewRow] { row =>
    Success(
      VjobcandidateeducationViewRow(
        jobcandidateid = row(idx + 0)(JobcandidateId.column),
        `Edu.Level` = row(idx + 1)(Column.columnToString),
        `Edu.StartDate` = row(idx + 2)(TypoLocalDate.column),
        `Edu.EndDate` = row(idx + 3)(TypoLocalDate.column),
        `Edu.Degree` = row(idx + 4)(Column.columnToString),
        `Edu.Major` = row(idx + 5)(Column.columnToString),
        `Edu.Minor` = row(idx + 6)(Column.columnToString),
        `Edu.GPA` = row(idx + 7)(Column.columnToString),
        `Edu.GPAScale` = row(idx + 8)(Column.columnToString),
        `Edu.School` = row(idx + 9)(Column.columnToString),
        `Edu.Loc.CountryRegion` = row(idx + 10)(Column.columnToString),
        `Edu.Loc.State` = row(idx + 11)(Column.columnToString),
        `Edu.Loc.City` = row(idx + 12)(Column.columnToString)
      )
    )
  }
  implicit lazy val writes: OWrites[VjobcandidateeducationViewRow] = OWrites[VjobcandidateeducationViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "jobcandidateid" -> JobcandidateId.writes.writes(o.jobcandidateid),
      "Edu.Level" -> Writes.StringWrites.writes(o.`Edu.Level`),
      "Edu.StartDate" -> TypoLocalDate.writes.writes(o.`Edu.StartDate`),
      "Edu.EndDate" -> TypoLocalDate.writes.writes(o.`Edu.EndDate`),
      "Edu.Degree" -> Writes.StringWrites.writes(o.`Edu.Degree`),
      "Edu.Major" -> Writes.StringWrites.writes(o.`Edu.Major`),
      "Edu.Minor" -> Writes.StringWrites.writes(o.`Edu.Minor`),
      "Edu.GPA" -> Writes.StringWrites.writes(o.`Edu.GPA`),
      "Edu.GPAScale" -> Writes.StringWrites.writes(o.`Edu.GPAScale`),
      "Edu.School" -> Writes.StringWrites.writes(o.`Edu.School`),
      "Edu.Loc.CountryRegion" -> Writes.StringWrites.writes(o.`Edu.Loc.CountryRegion`),
      "Edu.Loc.State" -> Writes.StringWrites.writes(o.`Edu.Loc.State`),
      "Edu.Loc.City" -> Writes.StringWrites.writes(o.`Edu.Loc.City`)
    ))
  )
}
