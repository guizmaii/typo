/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package transforms

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class TransformsViewRow(
  udtCatalog: SqlIdentifier,
  udtSchema: SqlIdentifier,
  udtName: SqlIdentifier,
  specificCatalog: SqlIdentifier,
  specificSchema: SqlIdentifier,
  specificName: SqlIdentifier,
  groupName: SqlIdentifier,
  transformType: CharacterData
)

object TransformsViewRow {
  implicit lazy val reads: Reads[TransformsViewRow] = Reads[TransformsViewRow](json => JsResult.fromTry(
      Try(
        TransformsViewRow(
          udtCatalog = json.\("udt_catalog").as(SqlIdentifier.reads),
          udtSchema = json.\("udt_schema").as(SqlIdentifier.reads),
          udtName = json.\("udt_name").as(SqlIdentifier.reads),
          specificCatalog = json.\("specific_catalog").as(SqlIdentifier.reads),
          specificSchema = json.\("specific_schema").as(SqlIdentifier.reads),
          specificName = json.\("specific_name").as(SqlIdentifier.reads),
          groupName = json.\("group_name").as(SqlIdentifier.reads),
          transformType = json.\("transform_type").as(CharacterData.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TransformsViewRow] = RowParser[TransformsViewRow] { row =>
    Success(
      TransformsViewRow(
        udtCatalog = row(idx + 0)(SqlIdentifier.column),
        udtSchema = row(idx + 1)(SqlIdentifier.column),
        udtName = row(idx + 2)(SqlIdentifier.column),
        specificCatalog = row(idx + 3)(SqlIdentifier.column),
        specificSchema = row(idx + 4)(SqlIdentifier.column),
        specificName = row(idx + 5)(SqlIdentifier.column),
        groupName = row(idx + 6)(SqlIdentifier.column),
        transformType = row(idx + 7)(CharacterData.column)
      )
    )
  }
  implicit lazy val writes: OWrites[TransformsViewRow] = OWrites[TransformsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "udt_catalog" -> SqlIdentifier.writes.writes(o.udtCatalog),
      "udt_schema" -> SqlIdentifier.writes.writes(o.udtSchema),
      "udt_name" -> SqlIdentifier.writes.writes(o.udtName),
      "specific_catalog" -> SqlIdentifier.writes.writes(o.specificCatalog),
      "specific_schema" -> SqlIdentifier.writes.writes(o.specificSchema),
      "specific_name" -> SqlIdentifier.writes.writes(o.specificName),
      "group_name" -> SqlIdentifier.writes.writes(o.groupName),
      "transform_type" -> CharacterData.writes.writes(o.transformType)
    ))
  )
}
