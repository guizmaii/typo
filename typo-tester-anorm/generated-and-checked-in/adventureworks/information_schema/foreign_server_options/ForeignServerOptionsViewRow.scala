/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_server_options

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ForeignServerOptionsViewRow(
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerCatalog]] */
  foreignServerCatalog: SqlIdentifier,
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerName]] */
  foreignServerName: SqlIdentifier,
  optionName: SqlIdentifier,
  optionValue: CharacterData
)

object ForeignServerOptionsViewRow {
  implicit lazy val reads: Reads[ForeignServerOptionsViewRow] = Reads[ForeignServerOptionsViewRow](json => JsResult.fromTry(
      Try(
        ForeignServerOptionsViewRow(
          foreignServerCatalog = json.\("foreign_server_catalog").as(SqlIdentifier.reads),
          foreignServerName = json.\("foreign_server_name").as(SqlIdentifier.reads),
          optionName = json.\("option_name").as(SqlIdentifier.reads),
          optionValue = json.\("option_value").as(CharacterData.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ForeignServerOptionsViewRow] = RowParser[ForeignServerOptionsViewRow] { row =>
    Success(
      ForeignServerOptionsViewRow(
        foreignServerCatalog = row(idx + 0)(SqlIdentifier.column),
        foreignServerName = row(idx + 1)(SqlIdentifier.column),
        optionName = row(idx + 2)(SqlIdentifier.column),
        optionValue = row(idx + 3)(CharacterData.column)
      )
    )
  }
  implicit lazy val writes: OWrites[ForeignServerOptionsViewRow] = OWrites[ForeignServerOptionsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "foreign_server_catalog" -> SqlIdentifier.writes.writes(o.foreignServerCatalog),
      "foreign_server_name" -> SqlIdentifier.writes.writes(o.foreignServerName),
      "option_name" -> SqlIdentifier.writes.writes(o.optionName),
      "option_value" -> CharacterData.writes.writes(o.optionValue)
    ))
  )
}
