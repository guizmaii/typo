/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package tables

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class TablesViewRow(
  tableCatalog: SqlIdentifier,
  tableSchema: SqlIdentifier,
  tableName: SqlIdentifier,
  tableType: CharacterData,
  selfReferencingColumnName: SqlIdentifier,
  referenceGeneration: CharacterData,
  userDefinedTypeCatalog: SqlIdentifier,
  userDefinedTypeSchema: SqlIdentifier,
  userDefinedTypeName: SqlIdentifier,
  isInsertableInto: YesOrNo,
  isTyped: YesOrNo,
  commitAction: CharacterData
)

object TablesViewRow {
  implicit lazy val reads: Reads[TablesViewRow] = Reads[TablesViewRow](json => JsResult.fromTry(
      Try(
        TablesViewRow(
          tableCatalog = json.\("table_catalog").as(SqlIdentifier.reads),
          tableSchema = json.\("table_schema").as(SqlIdentifier.reads),
          tableName = json.\("table_name").as(SqlIdentifier.reads),
          tableType = json.\("table_type").as(CharacterData.reads),
          selfReferencingColumnName = json.\("self_referencing_column_name").as(SqlIdentifier.reads),
          referenceGeneration = json.\("reference_generation").as(CharacterData.reads),
          userDefinedTypeCatalog = json.\("user_defined_type_catalog").as(SqlIdentifier.reads),
          userDefinedTypeSchema = json.\("user_defined_type_schema").as(SqlIdentifier.reads),
          userDefinedTypeName = json.\("user_defined_type_name").as(SqlIdentifier.reads),
          isInsertableInto = json.\("is_insertable_into").as(YesOrNo.reads),
          isTyped = json.\("is_typed").as(YesOrNo.reads),
          commitAction = json.\("commit_action").as(CharacterData.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TablesViewRow] = RowParser[TablesViewRow] { row =>
    Success(
      TablesViewRow(
        tableCatalog = row(idx + 0)(SqlIdentifier.column),
        tableSchema = row(idx + 1)(SqlIdentifier.column),
        tableName = row(idx + 2)(SqlIdentifier.column),
        tableType = row(idx + 3)(CharacterData.column),
        selfReferencingColumnName = row(idx + 4)(SqlIdentifier.column),
        referenceGeneration = row(idx + 5)(CharacterData.column),
        userDefinedTypeCatalog = row(idx + 6)(SqlIdentifier.column),
        userDefinedTypeSchema = row(idx + 7)(SqlIdentifier.column),
        userDefinedTypeName = row(idx + 8)(SqlIdentifier.column),
        isInsertableInto = row(idx + 9)(YesOrNo.column),
        isTyped = row(idx + 10)(YesOrNo.column),
        commitAction = row(idx + 11)(CharacterData.column)
      )
    )
  }
  implicit lazy val writes: OWrites[TablesViewRow] = OWrites[TablesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "table_catalog" -> SqlIdentifier.writes.writes(o.tableCatalog),
      "table_schema" -> SqlIdentifier.writes.writes(o.tableSchema),
      "table_name" -> SqlIdentifier.writes.writes(o.tableName),
      "table_type" -> CharacterData.writes.writes(o.tableType),
      "self_referencing_column_name" -> SqlIdentifier.writes.writes(o.selfReferencingColumnName),
      "reference_generation" -> CharacterData.writes.writes(o.referenceGeneration),
      "user_defined_type_catalog" -> SqlIdentifier.writes.writes(o.userDefinedTypeCatalog),
      "user_defined_type_schema" -> SqlIdentifier.writes.writes(o.userDefinedTypeSchema),
      "user_defined_type_name" -> SqlIdentifier.writes.writes(o.userDefinedTypeName),
      "is_insertable_into" -> YesOrNo.writes.writes(o.isInsertableInto),
      "is_typed" -> YesOrNo.writes.writes(o.isTyped),
      "commit_action" -> CharacterData.writes.writes(o.commitAction)
    ))
  )
}
