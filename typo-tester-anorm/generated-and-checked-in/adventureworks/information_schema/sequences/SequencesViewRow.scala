/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sequences

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SequencesViewRow(
  sequenceCatalog: SqlIdentifier,
  sequenceSchema: SqlIdentifier,
  sequenceName: SqlIdentifier,
  dataType: CharacterData,
  numericPrecision: CardinalNumber,
  numericPrecisionRadix: CardinalNumber,
  numericScale: CardinalNumber,
  startValue: CharacterData,
  minimumValue: CharacterData,
  maximumValue: CharacterData,
  increment: CharacterData,
  cycleOption: YesOrNo
)

object SequencesViewRow {
  implicit lazy val reads: Reads[SequencesViewRow] = Reads[SequencesViewRow](json => JsResult.fromTry(
      Try(
        SequencesViewRow(
          sequenceCatalog = json.\("sequence_catalog").as(SqlIdentifier.reads),
          sequenceSchema = json.\("sequence_schema").as(SqlIdentifier.reads),
          sequenceName = json.\("sequence_name").as(SqlIdentifier.reads),
          dataType = json.\("data_type").as(CharacterData.reads),
          numericPrecision = json.\("numeric_precision").as(CardinalNumber.reads),
          numericPrecisionRadix = json.\("numeric_precision_radix").as(CardinalNumber.reads),
          numericScale = json.\("numeric_scale").as(CardinalNumber.reads),
          startValue = json.\("start_value").as(CharacterData.reads),
          minimumValue = json.\("minimum_value").as(CharacterData.reads),
          maximumValue = json.\("maximum_value").as(CharacterData.reads),
          increment = json.\("increment").as(CharacterData.reads),
          cycleOption = json.\("cycle_option").as(YesOrNo.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SequencesViewRow] = RowParser[SequencesViewRow] { row =>
    Success(
      SequencesViewRow(
        sequenceCatalog = row(idx + 0)(SqlIdentifier.column),
        sequenceSchema = row(idx + 1)(SqlIdentifier.column),
        sequenceName = row(idx + 2)(SqlIdentifier.column),
        dataType = row(idx + 3)(CharacterData.column),
        numericPrecision = row(idx + 4)(CardinalNumber.column),
        numericPrecisionRadix = row(idx + 5)(CardinalNumber.column),
        numericScale = row(idx + 6)(CardinalNumber.column),
        startValue = row(idx + 7)(CharacterData.column),
        minimumValue = row(idx + 8)(CharacterData.column),
        maximumValue = row(idx + 9)(CharacterData.column),
        increment = row(idx + 10)(CharacterData.column),
        cycleOption = row(idx + 11)(YesOrNo.column)
      )
    )
  }
  implicit lazy val writes: OWrites[SequencesViewRow] = OWrites[SequencesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "sequence_catalog" -> SqlIdentifier.writes.writes(o.sequenceCatalog),
      "sequence_schema" -> SqlIdentifier.writes.writes(o.sequenceSchema),
      "sequence_name" -> SqlIdentifier.writes.writes(o.sequenceName),
      "data_type" -> CharacterData.writes.writes(o.dataType),
      "numeric_precision" -> CardinalNumber.writes.writes(o.numericPrecision),
      "numeric_precision_radix" -> CardinalNumber.writes.writes(o.numericPrecisionRadix),
      "numeric_scale" -> CardinalNumber.writes.writes(o.numericScale),
      "start_value" -> CharacterData.writes.writes(o.startValue),
      "minimum_value" -> CharacterData.writes.writes(o.minimumValue),
      "maximum_value" -> CharacterData.writes.writes(o.maximumValue),
      "increment" -> CharacterData.writes.writes(o.increment),
      "cycle_option" -> YesOrNo.writes.writes(o.cycleOption)
    ))
  )
}
