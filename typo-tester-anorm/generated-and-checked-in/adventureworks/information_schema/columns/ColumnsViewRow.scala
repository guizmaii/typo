/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package columns

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ColumnsViewRow(
  tableCatalog: SqlIdentifier,
  tableSchema: SqlIdentifier,
  tableName: SqlIdentifier,
  columnName: SqlIdentifier,
  ordinalPosition: CardinalNumber,
  columnDefault: CharacterData,
  isNullable: YesOrNo,
  dataType: CharacterData,
  characterMaximumLength: CardinalNumber,
  characterOctetLength: CardinalNumber,
  numericPrecision: CardinalNumber,
  numericPrecisionRadix: CardinalNumber,
  numericScale: CardinalNumber,
  datetimePrecision: CardinalNumber,
  intervalType: CharacterData,
  intervalPrecision: CardinalNumber,
  characterSetCatalog: SqlIdentifier,
  characterSetSchema: SqlIdentifier,
  characterSetName: SqlIdentifier,
  collationCatalog: SqlIdentifier,
  collationSchema: SqlIdentifier,
  collationName: SqlIdentifier,
  domainCatalog: SqlIdentifier,
  domainSchema: SqlIdentifier,
  domainName: SqlIdentifier,
  udtCatalog: SqlIdentifier,
  udtSchema: SqlIdentifier,
  udtName: SqlIdentifier,
  scopeCatalog: SqlIdentifier,
  scopeSchema: SqlIdentifier,
  scopeName: SqlIdentifier,
  maximumCardinality: CardinalNumber,
  dtdIdentifier: SqlIdentifier,
  isSelfReferencing: YesOrNo,
  isIdentity: YesOrNo,
  identityGeneration: CharacterData,
  identityStart: CharacterData,
  identityIncrement: CharacterData,
  identityMaximum: CharacterData,
  identityMinimum: CharacterData,
  identityCycle: YesOrNo,
  isGenerated: CharacterData,
  generationExpression: CharacterData,
  isUpdatable: YesOrNo
)

object ColumnsViewRow {
  implicit lazy val reads: Reads[ColumnsViewRow] = Reads[ColumnsViewRow](json => JsResult.fromTry(
      Try(
        ColumnsViewRow(
          tableCatalog = json.\("table_catalog").as(SqlIdentifier.reads),
          tableSchema = json.\("table_schema").as(SqlIdentifier.reads),
          tableName = json.\("table_name").as(SqlIdentifier.reads),
          columnName = json.\("column_name").as(SqlIdentifier.reads),
          ordinalPosition = json.\("ordinal_position").as(CardinalNumber.reads),
          columnDefault = json.\("column_default").as(CharacterData.reads),
          isNullable = json.\("is_nullable").as(YesOrNo.reads),
          dataType = json.\("data_type").as(CharacterData.reads),
          characterMaximumLength = json.\("character_maximum_length").as(CardinalNumber.reads),
          characterOctetLength = json.\("character_octet_length").as(CardinalNumber.reads),
          numericPrecision = json.\("numeric_precision").as(CardinalNumber.reads),
          numericPrecisionRadix = json.\("numeric_precision_radix").as(CardinalNumber.reads),
          numericScale = json.\("numeric_scale").as(CardinalNumber.reads),
          datetimePrecision = json.\("datetime_precision").as(CardinalNumber.reads),
          intervalType = json.\("interval_type").as(CharacterData.reads),
          intervalPrecision = json.\("interval_precision").as(CardinalNumber.reads),
          characterSetCatalog = json.\("character_set_catalog").as(SqlIdentifier.reads),
          characterSetSchema = json.\("character_set_schema").as(SqlIdentifier.reads),
          characterSetName = json.\("character_set_name").as(SqlIdentifier.reads),
          collationCatalog = json.\("collation_catalog").as(SqlIdentifier.reads),
          collationSchema = json.\("collation_schema").as(SqlIdentifier.reads),
          collationName = json.\("collation_name").as(SqlIdentifier.reads),
          domainCatalog = json.\("domain_catalog").as(SqlIdentifier.reads),
          domainSchema = json.\("domain_schema").as(SqlIdentifier.reads),
          domainName = json.\("domain_name").as(SqlIdentifier.reads),
          udtCatalog = json.\("udt_catalog").as(SqlIdentifier.reads),
          udtSchema = json.\("udt_schema").as(SqlIdentifier.reads),
          udtName = json.\("udt_name").as(SqlIdentifier.reads),
          scopeCatalog = json.\("scope_catalog").as(SqlIdentifier.reads),
          scopeSchema = json.\("scope_schema").as(SqlIdentifier.reads),
          scopeName = json.\("scope_name").as(SqlIdentifier.reads),
          maximumCardinality = json.\("maximum_cardinality").as(CardinalNumber.reads),
          dtdIdentifier = json.\("dtd_identifier").as(SqlIdentifier.reads),
          isSelfReferencing = json.\("is_self_referencing").as(YesOrNo.reads),
          isIdentity = json.\("is_identity").as(YesOrNo.reads),
          identityGeneration = json.\("identity_generation").as(CharacterData.reads),
          identityStart = json.\("identity_start").as(CharacterData.reads),
          identityIncrement = json.\("identity_increment").as(CharacterData.reads),
          identityMaximum = json.\("identity_maximum").as(CharacterData.reads),
          identityMinimum = json.\("identity_minimum").as(CharacterData.reads),
          identityCycle = json.\("identity_cycle").as(YesOrNo.reads),
          isGenerated = json.\("is_generated").as(CharacterData.reads),
          generationExpression = json.\("generation_expression").as(CharacterData.reads),
          isUpdatable = json.\("is_updatable").as(YesOrNo.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ColumnsViewRow] = RowParser[ColumnsViewRow] { row =>
    Success(
      ColumnsViewRow(
        tableCatalog = row(idx + 0)(SqlIdentifier.column),
        tableSchema = row(idx + 1)(SqlIdentifier.column),
        tableName = row(idx + 2)(SqlIdentifier.column),
        columnName = row(idx + 3)(SqlIdentifier.column),
        ordinalPosition = row(idx + 4)(CardinalNumber.column),
        columnDefault = row(idx + 5)(CharacterData.column),
        isNullable = row(idx + 6)(YesOrNo.column),
        dataType = row(idx + 7)(CharacterData.column),
        characterMaximumLength = row(idx + 8)(CardinalNumber.column),
        characterOctetLength = row(idx + 9)(CardinalNumber.column),
        numericPrecision = row(idx + 10)(CardinalNumber.column),
        numericPrecisionRadix = row(idx + 11)(CardinalNumber.column),
        numericScale = row(idx + 12)(CardinalNumber.column),
        datetimePrecision = row(idx + 13)(CardinalNumber.column),
        intervalType = row(idx + 14)(CharacterData.column),
        intervalPrecision = row(idx + 15)(CardinalNumber.column),
        characterSetCatalog = row(idx + 16)(SqlIdentifier.column),
        characterSetSchema = row(idx + 17)(SqlIdentifier.column),
        characterSetName = row(idx + 18)(SqlIdentifier.column),
        collationCatalog = row(idx + 19)(SqlIdentifier.column),
        collationSchema = row(idx + 20)(SqlIdentifier.column),
        collationName = row(idx + 21)(SqlIdentifier.column),
        domainCatalog = row(idx + 22)(SqlIdentifier.column),
        domainSchema = row(idx + 23)(SqlIdentifier.column),
        domainName = row(idx + 24)(SqlIdentifier.column),
        udtCatalog = row(idx + 25)(SqlIdentifier.column),
        udtSchema = row(idx + 26)(SqlIdentifier.column),
        udtName = row(idx + 27)(SqlIdentifier.column),
        scopeCatalog = row(idx + 28)(SqlIdentifier.column),
        scopeSchema = row(idx + 29)(SqlIdentifier.column),
        scopeName = row(idx + 30)(SqlIdentifier.column),
        maximumCardinality = row(idx + 31)(CardinalNumber.column),
        dtdIdentifier = row(idx + 32)(SqlIdentifier.column),
        isSelfReferencing = row(idx + 33)(YesOrNo.column),
        isIdentity = row(idx + 34)(YesOrNo.column),
        identityGeneration = row(idx + 35)(CharacterData.column),
        identityStart = row(idx + 36)(CharacterData.column),
        identityIncrement = row(idx + 37)(CharacterData.column),
        identityMaximum = row(idx + 38)(CharacterData.column),
        identityMinimum = row(idx + 39)(CharacterData.column),
        identityCycle = row(idx + 40)(YesOrNo.column),
        isGenerated = row(idx + 41)(CharacterData.column),
        generationExpression = row(idx + 42)(CharacterData.column),
        isUpdatable = row(idx + 43)(YesOrNo.column)
      )
    )
  }
  implicit lazy val writes: OWrites[ColumnsViewRow] = OWrites[ColumnsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "table_catalog" -> SqlIdentifier.writes.writes(o.tableCatalog),
      "table_schema" -> SqlIdentifier.writes.writes(o.tableSchema),
      "table_name" -> SqlIdentifier.writes.writes(o.tableName),
      "column_name" -> SqlIdentifier.writes.writes(o.columnName),
      "ordinal_position" -> CardinalNumber.writes.writes(o.ordinalPosition),
      "column_default" -> CharacterData.writes.writes(o.columnDefault),
      "is_nullable" -> YesOrNo.writes.writes(o.isNullable),
      "data_type" -> CharacterData.writes.writes(o.dataType),
      "character_maximum_length" -> CardinalNumber.writes.writes(o.characterMaximumLength),
      "character_octet_length" -> CardinalNumber.writes.writes(o.characterOctetLength),
      "numeric_precision" -> CardinalNumber.writes.writes(o.numericPrecision),
      "numeric_precision_radix" -> CardinalNumber.writes.writes(o.numericPrecisionRadix),
      "numeric_scale" -> CardinalNumber.writes.writes(o.numericScale),
      "datetime_precision" -> CardinalNumber.writes.writes(o.datetimePrecision),
      "interval_type" -> CharacterData.writes.writes(o.intervalType),
      "interval_precision" -> CardinalNumber.writes.writes(o.intervalPrecision),
      "character_set_catalog" -> SqlIdentifier.writes.writes(o.characterSetCatalog),
      "character_set_schema" -> SqlIdentifier.writes.writes(o.characterSetSchema),
      "character_set_name" -> SqlIdentifier.writes.writes(o.characterSetName),
      "collation_catalog" -> SqlIdentifier.writes.writes(o.collationCatalog),
      "collation_schema" -> SqlIdentifier.writes.writes(o.collationSchema),
      "collation_name" -> SqlIdentifier.writes.writes(o.collationName),
      "domain_catalog" -> SqlIdentifier.writes.writes(o.domainCatalog),
      "domain_schema" -> SqlIdentifier.writes.writes(o.domainSchema),
      "domain_name" -> SqlIdentifier.writes.writes(o.domainName),
      "udt_catalog" -> SqlIdentifier.writes.writes(o.udtCatalog),
      "udt_schema" -> SqlIdentifier.writes.writes(o.udtSchema),
      "udt_name" -> SqlIdentifier.writes.writes(o.udtName),
      "scope_catalog" -> SqlIdentifier.writes.writes(o.scopeCatalog),
      "scope_schema" -> SqlIdentifier.writes.writes(o.scopeSchema),
      "scope_name" -> SqlIdentifier.writes.writes(o.scopeName),
      "maximum_cardinality" -> CardinalNumber.writes.writes(o.maximumCardinality),
      "dtd_identifier" -> SqlIdentifier.writes.writes(o.dtdIdentifier),
      "is_self_referencing" -> YesOrNo.writes.writes(o.isSelfReferencing),
      "is_identity" -> YesOrNo.writes.writes(o.isIdentity),
      "identity_generation" -> CharacterData.writes.writes(o.identityGeneration),
      "identity_start" -> CharacterData.writes.writes(o.identityStart),
      "identity_increment" -> CharacterData.writes.writes(o.identityIncrement),
      "identity_maximum" -> CharacterData.writes.writes(o.identityMaximum),
      "identity_minimum" -> CharacterData.writes.writes(o.identityMinimum),
      "identity_cycle" -> YesOrNo.writes.writes(o.identityCycle),
      "is_generated" -> CharacterData.writes.writes(o.isGenerated),
      "generation_expression" -> CharacterData.writes.writes(o.generationExpression),
      "is_updatable" -> YesOrNo.writes.writes(o.isUpdatable)
    ))
  )
}
