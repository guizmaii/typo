/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package schemata

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SchemataViewRow(
  catalogName: SqlIdentifier,
  schemaName: SqlIdentifier,
  schemaOwner: SqlIdentifier,
  defaultCharacterSetCatalog: SqlIdentifier,
  defaultCharacterSetSchema: SqlIdentifier,
  defaultCharacterSetName: SqlIdentifier,
  sqlPath: CharacterData
)

object SchemataViewRow {
  implicit lazy val reads: Reads[SchemataViewRow] = Reads[SchemataViewRow](json => JsResult.fromTry(
      Try(
        SchemataViewRow(
          catalogName = json.\("catalog_name").as(SqlIdentifier.reads),
          schemaName = json.\("schema_name").as(SqlIdentifier.reads),
          schemaOwner = json.\("schema_owner").as(SqlIdentifier.reads),
          defaultCharacterSetCatalog = json.\("default_character_set_catalog").as(SqlIdentifier.reads),
          defaultCharacterSetSchema = json.\("default_character_set_schema").as(SqlIdentifier.reads),
          defaultCharacterSetName = json.\("default_character_set_name").as(SqlIdentifier.reads),
          sqlPath = json.\("sql_path").as(CharacterData.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SchemataViewRow] = RowParser[SchemataViewRow] { row =>
    Success(
      SchemataViewRow(
        catalogName = row(idx + 0)(SqlIdentifier.column),
        schemaName = row(idx + 1)(SqlIdentifier.column),
        schemaOwner = row(idx + 2)(SqlIdentifier.column),
        defaultCharacterSetCatalog = row(idx + 3)(SqlIdentifier.column),
        defaultCharacterSetSchema = row(idx + 4)(SqlIdentifier.column),
        defaultCharacterSetName = row(idx + 5)(SqlIdentifier.column),
        sqlPath = row(idx + 6)(CharacterData.column)
      )
    )
  }
  implicit lazy val writes: OWrites[SchemataViewRow] = OWrites[SchemataViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "catalog_name" -> SqlIdentifier.writes.writes(o.catalogName),
      "schema_name" -> SqlIdentifier.writes.writes(o.schemaName),
      "schema_owner" -> SqlIdentifier.writes.writes(o.schemaOwner),
      "default_character_set_catalog" -> SqlIdentifier.writes.writes(o.defaultCharacterSetCatalog),
      "default_character_set_schema" -> SqlIdentifier.writes.writes(o.defaultCharacterSetSchema),
      "default_character_set_name" -> SqlIdentifier.writes.writes(o.defaultCharacterSetName),
      "sql_path" -> CharacterData.writes.writes(o.sqlPath)
    ))
  )
}
