/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package schemata

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class SchemataViewRow(
  catalogName: /* nullability unknown */ Option[String],
  schemaName: /* nullability unknown */ Option[String],
  schemaOwner: /* nullability unknown */ Option[String],
  defaultCharacterSetCatalog: /* nullability unknown */ Option[String],
  defaultCharacterSetSchema: /* nullability unknown */ Option[String],
  defaultCharacterSetName: /* nullability unknown */ Option[String],
  sqlPath: /* nullability unknown */ Option[String]
)

object SchemataViewRow {
  implicit lazy val reads: Reads[SchemataViewRow] = Reads[SchemataViewRow](json => JsResult.fromTry(
      Try(
        SchemataViewRow(
          catalogName = json.\("catalog_name").toOption.map(_.as(Reads.StringReads)),
          schemaName = json.\("schema_name").toOption.map(_.as(Reads.StringReads)),
          schemaOwner = json.\("schema_owner").toOption.map(_.as(Reads.StringReads)),
          defaultCharacterSetCatalog = json.\("default_character_set_catalog").toOption.map(_.as(Reads.StringReads)),
          defaultCharacterSetSchema = json.\("default_character_set_schema").toOption.map(_.as(Reads.StringReads)),
          defaultCharacterSetName = json.\("default_character_set_name").toOption.map(_.as(Reads.StringReads)),
          sqlPath = json.\("sql_path").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SchemataViewRow] = RowParser[SchemataViewRow] { row =>
    Success(
      SchemataViewRow(
        catalogName = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        schemaName = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        schemaOwner = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        defaultCharacterSetCatalog = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        defaultCharacterSetSchema = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        defaultCharacterSetName = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        sqlPath = row(idx + 6)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[SchemataViewRow] = OWrites[SchemataViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "catalog_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.catalogName),
      "schema_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.schemaName),
      "schema_owner" -> Writes.OptionWrites(Writes.StringWrites).writes(o.schemaOwner),
      "default_character_set_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.defaultCharacterSetCatalog),
      "default_character_set_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.defaultCharacterSetSchema),
      "default_character_set_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.defaultCharacterSetName),
      "sql_path" -> Writes.OptionWrites(Writes.StringWrites).writes(o.sqlPath)
    ))
  )
}
