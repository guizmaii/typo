/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package attributes

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class AttributesViewRow(
  udtCatalog: SqlIdentifier,
  udtSchema: SqlIdentifier,
  udtName: SqlIdentifier,
  attributeName: SqlIdentifier,
  ordinalPosition: CardinalNumber,
  attributeDefault: CharacterData,
  isNullable: YesOrNo,
  dataType: CharacterData,
  characterMaximumLength: CardinalNumber,
  characterOctetLength: CardinalNumber,
  characterSetCatalog: SqlIdentifier,
  characterSetSchema: SqlIdentifier,
  characterSetName: SqlIdentifier,
  collationCatalog: SqlIdentifier,
  collationSchema: SqlIdentifier,
  collationName: SqlIdentifier,
  numericPrecision: CardinalNumber,
  numericPrecisionRadix: CardinalNumber,
  numericScale: CardinalNumber,
  datetimePrecision: CardinalNumber,
  intervalType: CharacterData,
  intervalPrecision: CardinalNumber,
  attributeUdtCatalog: SqlIdentifier,
  attributeUdtSchema: SqlIdentifier,
  attributeUdtName: SqlIdentifier,
  scopeCatalog: SqlIdentifier,
  scopeSchema: SqlIdentifier,
  scopeName: SqlIdentifier,
  maximumCardinality: CardinalNumber,
  dtdIdentifier: SqlIdentifier,
  isDerivedReferenceAttribute: YesOrNo
)

object AttributesViewRow {
  implicit lazy val reads: Reads[AttributesViewRow] = Reads[AttributesViewRow](json => JsResult.fromTry(
      Try(
        AttributesViewRow(
          udtCatalog = json.\("udt_catalog").as(SqlIdentifier.reads),
          udtSchema = json.\("udt_schema").as(SqlIdentifier.reads),
          udtName = json.\("udt_name").as(SqlIdentifier.reads),
          attributeName = json.\("attribute_name").as(SqlIdentifier.reads),
          ordinalPosition = json.\("ordinal_position").as(CardinalNumber.reads),
          attributeDefault = json.\("attribute_default").as(CharacterData.reads),
          isNullable = json.\("is_nullable").as(YesOrNo.reads),
          dataType = json.\("data_type").as(CharacterData.reads),
          characterMaximumLength = json.\("character_maximum_length").as(CardinalNumber.reads),
          characterOctetLength = json.\("character_octet_length").as(CardinalNumber.reads),
          characterSetCatalog = json.\("character_set_catalog").as(SqlIdentifier.reads),
          characterSetSchema = json.\("character_set_schema").as(SqlIdentifier.reads),
          characterSetName = json.\("character_set_name").as(SqlIdentifier.reads),
          collationCatalog = json.\("collation_catalog").as(SqlIdentifier.reads),
          collationSchema = json.\("collation_schema").as(SqlIdentifier.reads),
          collationName = json.\("collation_name").as(SqlIdentifier.reads),
          numericPrecision = json.\("numeric_precision").as(CardinalNumber.reads),
          numericPrecisionRadix = json.\("numeric_precision_radix").as(CardinalNumber.reads),
          numericScale = json.\("numeric_scale").as(CardinalNumber.reads),
          datetimePrecision = json.\("datetime_precision").as(CardinalNumber.reads),
          intervalType = json.\("interval_type").as(CharacterData.reads),
          intervalPrecision = json.\("interval_precision").as(CardinalNumber.reads),
          attributeUdtCatalog = json.\("attribute_udt_catalog").as(SqlIdentifier.reads),
          attributeUdtSchema = json.\("attribute_udt_schema").as(SqlIdentifier.reads),
          attributeUdtName = json.\("attribute_udt_name").as(SqlIdentifier.reads),
          scopeCatalog = json.\("scope_catalog").as(SqlIdentifier.reads),
          scopeSchema = json.\("scope_schema").as(SqlIdentifier.reads),
          scopeName = json.\("scope_name").as(SqlIdentifier.reads),
          maximumCardinality = json.\("maximum_cardinality").as(CardinalNumber.reads),
          dtdIdentifier = json.\("dtd_identifier").as(SqlIdentifier.reads),
          isDerivedReferenceAttribute = json.\("is_derived_reference_attribute").as(YesOrNo.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[AttributesViewRow] = RowParser[AttributesViewRow] { row =>
    Success(
      AttributesViewRow(
        udtCatalog = row(idx + 0)(SqlIdentifier.column),
        udtSchema = row(idx + 1)(SqlIdentifier.column),
        udtName = row(idx + 2)(SqlIdentifier.column),
        attributeName = row(idx + 3)(SqlIdentifier.column),
        ordinalPosition = row(idx + 4)(CardinalNumber.column),
        attributeDefault = row(idx + 5)(CharacterData.column),
        isNullable = row(idx + 6)(YesOrNo.column),
        dataType = row(idx + 7)(CharacterData.column),
        characterMaximumLength = row(idx + 8)(CardinalNumber.column),
        characterOctetLength = row(idx + 9)(CardinalNumber.column),
        characterSetCatalog = row(idx + 10)(SqlIdentifier.column),
        characterSetSchema = row(idx + 11)(SqlIdentifier.column),
        characterSetName = row(idx + 12)(SqlIdentifier.column),
        collationCatalog = row(idx + 13)(SqlIdentifier.column),
        collationSchema = row(idx + 14)(SqlIdentifier.column),
        collationName = row(idx + 15)(SqlIdentifier.column),
        numericPrecision = row(idx + 16)(CardinalNumber.column),
        numericPrecisionRadix = row(idx + 17)(CardinalNumber.column),
        numericScale = row(idx + 18)(CardinalNumber.column),
        datetimePrecision = row(idx + 19)(CardinalNumber.column),
        intervalType = row(idx + 20)(CharacterData.column),
        intervalPrecision = row(idx + 21)(CardinalNumber.column),
        attributeUdtCatalog = row(idx + 22)(SqlIdentifier.column),
        attributeUdtSchema = row(idx + 23)(SqlIdentifier.column),
        attributeUdtName = row(idx + 24)(SqlIdentifier.column),
        scopeCatalog = row(idx + 25)(SqlIdentifier.column),
        scopeSchema = row(idx + 26)(SqlIdentifier.column),
        scopeName = row(idx + 27)(SqlIdentifier.column),
        maximumCardinality = row(idx + 28)(CardinalNumber.column),
        dtdIdentifier = row(idx + 29)(SqlIdentifier.column),
        isDerivedReferenceAttribute = row(idx + 30)(YesOrNo.column)
      )
    )
  }
  implicit lazy val writes: OWrites[AttributesViewRow] = OWrites[AttributesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "udt_catalog" -> SqlIdentifier.writes.writes(o.udtCatalog),
      "udt_schema" -> SqlIdentifier.writes.writes(o.udtSchema),
      "udt_name" -> SqlIdentifier.writes.writes(o.udtName),
      "attribute_name" -> SqlIdentifier.writes.writes(o.attributeName),
      "ordinal_position" -> CardinalNumber.writes.writes(o.ordinalPosition),
      "attribute_default" -> CharacterData.writes.writes(o.attributeDefault),
      "is_nullable" -> YesOrNo.writes.writes(o.isNullable),
      "data_type" -> CharacterData.writes.writes(o.dataType),
      "character_maximum_length" -> CardinalNumber.writes.writes(o.characterMaximumLength),
      "character_octet_length" -> CardinalNumber.writes.writes(o.characterOctetLength),
      "character_set_catalog" -> SqlIdentifier.writes.writes(o.characterSetCatalog),
      "character_set_schema" -> SqlIdentifier.writes.writes(o.characterSetSchema),
      "character_set_name" -> SqlIdentifier.writes.writes(o.characterSetName),
      "collation_catalog" -> SqlIdentifier.writes.writes(o.collationCatalog),
      "collation_schema" -> SqlIdentifier.writes.writes(o.collationSchema),
      "collation_name" -> SqlIdentifier.writes.writes(o.collationName),
      "numeric_precision" -> CardinalNumber.writes.writes(o.numericPrecision),
      "numeric_precision_radix" -> CardinalNumber.writes.writes(o.numericPrecisionRadix),
      "numeric_scale" -> CardinalNumber.writes.writes(o.numericScale),
      "datetime_precision" -> CardinalNumber.writes.writes(o.datetimePrecision),
      "interval_type" -> CharacterData.writes.writes(o.intervalType),
      "interval_precision" -> CardinalNumber.writes.writes(o.intervalPrecision),
      "attribute_udt_catalog" -> SqlIdentifier.writes.writes(o.attributeUdtCatalog),
      "attribute_udt_schema" -> SqlIdentifier.writes.writes(o.attributeUdtSchema),
      "attribute_udt_name" -> SqlIdentifier.writes.writes(o.attributeUdtName),
      "scope_catalog" -> SqlIdentifier.writes.writes(o.scopeCatalog),
      "scope_schema" -> SqlIdentifier.writes.writes(o.scopeSchema),
      "scope_name" -> SqlIdentifier.writes.writes(o.scopeName),
      "maximum_cardinality" -> CardinalNumber.writes.writes(o.maximumCardinality),
      "dtd_identifier" -> SqlIdentifier.writes.writes(o.dtdIdentifier),
      "is_derived_reference_attribute" -> YesOrNo.writes.writes(o.isDerivedReferenceAttribute)
    ))
  )
}
