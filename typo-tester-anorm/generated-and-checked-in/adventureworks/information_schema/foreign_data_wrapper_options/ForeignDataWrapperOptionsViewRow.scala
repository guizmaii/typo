/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_data_wrapper_options

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class ForeignDataWrapperOptionsViewRow(
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperCatalog]] */
  foreignDataWrapperCatalog: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperName]] */
  foreignDataWrapperName: Option[/* nullability unknown */ String],
  optionName: /* nullability unknown */ Option[String],
  optionValue: /* nullability unknown */ Option[String]
)

object ForeignDataWrapperOptionsViewRow {
  implicit lazy val reads: Reads[ForeignDataWrapperOptionsViewRow] = Reads[ForeignDataWrapperOptionsViewRow](json => JsResult.fromTry(
      Try(
        ForeignDataWrapperOptionsViewRow(
          foreignDataWrapperCatalog = json.\("foreign_data_wrapper_catalog").toOption.map(_.as(Reads.StringReads)),
          foreignDataWrapperName = json.\("foreign_data_wrapper_name").toOption.map(_.as(Reads.StringReads)),
          optionName = json.\("option_name").toOption.map(_.as(Reads.StringReads)),
          optionValue = json.\("option_value").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ForeignDataWrapperOptionsViewRow] = RowParser[ForeignDataWrapperOptionsViewRow] { row =>
    Success(
      ForeignDataWrapperOptionsViewRow(
        foreignDataWrapperCatalog = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        foreignDataWrapperName = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        optionName = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        optionValue = row(idx + 3)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[ForeignDataWrapperOptionsViewRow] = OWrites[ForeignDataWrapperOptionsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "foreign_data_wrapper_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.foreignDataWrapperCatalog),
      "foreign_data_wrapper_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.foreignDataWrapperName),
      "option_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.optionName),
      "option_value" -> Writes.OptionWrites(Writes.StringWrites).writes(o.optionValue)
    ))
  )
}
