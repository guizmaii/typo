/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package triggers

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.TimeStamp
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class TriggersViewRow(
  triggerCatalog: SqlIdentifier,
  triggerSchema: SqlIdentifier,
  triggerName: SqlIdentifier,
  eventManipulation: CharacterData,
  eventObjectCatalog: SqlIdentifier,
  eventObjectSchema: SqlIdentifier,
  eventObjectTable: SqlIdentifier,
  actionOrder: CardinalNumber,
  actionCondition: CharacterData,
  actionStatement: CharacterData,
  actionOrientation: CharacterData,
  actionTiming: CharacterData,
  actionReferenceOldTable: SqlIdentifier,
  actionReferenceNewTable: SqlIdentifier,
  actionReferenceOldRow: SqlIdentifier,
  actionReferenceNewRow: SqlIdentifier,
  created: TimeStamp
)

object TriggersViewRow {
  implicit lazy val reads: Reads[TriggersViewRow] = Reads[TriggersViewRow](json => JsResult.fromTry(
      Try(
        TriggersViewRow(
          triggerCatalog = json.\("trigger_catalog").as(SqlIdentifier.reads),
          triggerSchema = json.\("trigger_schema").as(SqlIdentifier.reads),
          triggerName = json.\("trigger_name").as(SqlIdentifier.reads),
          eventManipulation = json.\("event_manipulation").as(CharacterData.reads),
          eventObjectCatalog = json.\("event_object_catalog").as(SqlIdentifier.reads),
          eventObjectSchema = json.\("event_object_schema").as(SqlIdentifier.reads),
          eventObjectTable = json.\("event_object_table").as(SqlIdentifier.reads),
          actionOrder = json.\("action_order").as(CardinalNumber.reads),
          actionCondition = json.\("action_condition").as(CharacterData.reads),
          actionStatement = json.\("action_statement").as(CharacterData.reads),
          actionOrientation = json.\("action_orientation").as(CharacterData.reads),
          actionTiming = json.\("action_timing").as(CharacterData.reads),
          actionReferenceOldTable = json.\("action_reference_old_table").as(SqlIdentifier.reads),
          actionReferenceNewTable = json.\("action_reference_new_table").as(SqlIdentifier.reads),
          actionReferenceOldRow = json.\("action_reference_old_row").as(SqlIdentifier.reads),
          actionReferenceNewRow = json.\("action_reference_new_row").as(SqlIdentifier.reads),
          created = json.\("created").as(TimeStamp.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TriggersViewRow] = RowParser[TriggersViewRow] { row =>
    Success(
      TriggersViewRow(
        triggerCatalog = row(idx + 0)(SqlIdentifier.column),
        triggerSchema = row(idx + 1)(SqlIdentifier.column),
        triggerName = row(idx + 2)(SqlIdentifier.column),
        eventManipulation = row(idx + 3)(CharacterData.column),
        eventObjectCatalog = row(idx + 4)(SqlIdentifier.column),
        eventObjectSchema = row(idx + 5)(SqlIdentifier.column),
        eventObjectTable = row(idx + 6)(SqlIdentifier.column),
        actionOrder = row(idx + 7)(CardinalNumber.column),
        actionCondition = row(idx + 8)(CharacterData.column),
        actionStatement = row(idx + 9)(CharacterData.column),
        actionOrientation = row(idx + 10)(CharacterData.column),
        actionTiming = row(idx + 11)(CharacterData.column),
        actionReferenceOldTable = row(idx + 12)(SqlIdentifier.column),
        actionReferenceNewTable = row(idx + 13)(SqlIdentifier.column),
        actionReferenceOldRow = row(idx + 14)(SqlIdentifier.column),
        actionReferenceNewRow = row(idx + 15)(SqlIdentifier.column),
        created = row(idx + 16)(TimeStamp.column)
      )
    )
  }
  implicit lazy val writes: OWrites[TriggersViewRow] = OWrites[TriggersViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "trigger_catalog" -> SqlIdentifier.writes.writes(o.triggerCatalog),
      "trigger_schema" -> SqlIdentifier.writes.writes(o.triggerSchema),
      "trigger_name" -> SqlIdentifier.writes.writes(o.triggerName),
      "event_manipulation" -> CharacterData.writes.writes(o.eventManipulation),
      "event_object_catalog" -> SqlIdentifier.writes.writes(o.eventObjectCatalog),
      "event_object_schema" -> SqlIdentifier.writes.writes(o.eventObjectSchema),
      "event_object_table" -> SqlIdentifier.writes.writes(o.eventObjectTable),
      "action_order" -> CardinalNumber.writes.writes(o.actionOrder),
      "action_condition" -> CharacterData.writes.writes(o.actionCondition),
      "action_statement" -> CharacterData.writes.writes(o.actionStatement),
      "action_orientation" -> CharacterData.writes.writes(o.actionOrientation),
      "action_timing" -> CharacterData.writes.writes(o.actionTiming),
      "action_reference_old_table" -> SqlIdentifier.writes.writes(o.actionReferenceOldTable),
      "action_reference_new_table" -> SqlIdentifier.writes.writes(o.actionReferenceNewTable),
      "action_reference_old_row" -> SqlIdentifier.writes.writes(o.actionReferenceOldRow),
      "action_reference_new_row" -> SqlIdentifier.writes.writes(o.actionReferenceNewRow),
      "created" -> TimeStamp.writes.writes(o.created)
    ))
  )
}
