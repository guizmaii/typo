/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package views

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ViewsViewRow(
  tableCatalog: SqlIdentifier,
  tableSchema: SqlIdentifier,
  tableName: SqlIdentifier,
  viewDefinition: CharacterData,
  checkOption: CharacterData,
  isUpdatable: YesOrNo,
  isInsertableInto: YesOrNo,
  isTriggerUpdatable: YesOrNo,
  isTriggerDeletable: YesOrNo,
  isTriggerInsertableInto: YesOrNo
)

object ViewsViewRow {
  implicit lazy val reads: Reads[ViewsViewRow] = Reads[ViewsViewRow](json => JsResult.fromTry(
      Try(
        ViewsViewRow(
          tableCatalog = json.\("table_catalog").as(SqlIdentifier.reads),
          tableSchema = json.\("table_schema").as(SqlIdentifier.reads),
          tableName = json.\("table_name").as(SqlIdentifier.reads),
          viewDefinition = json.\("view_definition").as(CharacterData.reads),
          checkOption = json.\("check_option").as(CharacterData.reads),
          isUpdatable = json.\("is_updatable").as(YesOrNo.reads),
          isInsertableInto = json.\("is_insertable_into").as(YesOrNo.reads),
          isTriggerUpdatable = json.\("is_trigger_updatable").as(YesOrNo.reads),
          isTriggerDeletable = json.\("is_trigger_deletable").as(YesOrNo.reads),
          isTriggerInsertableInto = json.\("is_trigger_insertable_into").as(YesOrNo.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ViewsViewRow] = RowParser[ViewsViewRow] { row =>
    Success(
      ViewsViewRow(
        tableCatalog = row(idx + 0)(SqlIdentifier.column),
        tableSchema = row(idx + 1)(SqlIdentifier.column),
        tableName = row(idx + 2)(SqlIdentifier.column),
        viewDefinition = row(idx + 3)(CharacterData.column),
        checkOption = row(idx + 4)(CharacterData.column),
        isUpdatable = row(idx + 5)(YesOrNo.column),
        isInsertableInto = row(idx + 6)(YesOrNo.column),
        isTriggerUpdatable = row(idx + 7)(YesOrNo.column),
        isTriggerDeletable = row(idx + 8)(YesOrNo.column),
        isTriggerInsertableInto = row(idx + 9)(YesOrNo.column)
      )
    )
  }
  implicit lazy val writes: OWrites[ViewsViewRow] = OWrites[ViewsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "table_catalog" -> SqlIdentifier.writes.writes(o.tableCatalog),
      "table_schema" -> SqlIdentifier.writes.writes(o.tableSchema),
      "table_name" -> SqlIdentifier.writes.writes(o.tableName),
      "view_definition" -> CharacterData.writes.writes(o.viewDefinition),
      "check_option" -> CharacterData.writes.writes(o.checkOption),
      "is_updatable" -> YesOrNo.writes.writes(o.isUpdatable),
      "is_insertable_into" -> YesOrNo.writes.writes(o.isInsertableInto),
      "is_trigger_updatable" -> YesOrNo.writes.writes(o.isTriggerUpdatable),
      "is_trigger_deletable" -> YesOrNo.writes.writes(o.isTriggerDeletable),
      "is_trigger_insertable_into" -> YesOrNo.writes.writes(o.isTriggerInsertableInto)
    ))
  )
}
