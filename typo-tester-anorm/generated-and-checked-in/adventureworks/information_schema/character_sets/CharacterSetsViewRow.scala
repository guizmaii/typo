/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package character_sets

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class CharacterSetsViewRow(
  characterSetCatalog: /* nullability unknown */ Option[String],
  characterSetSchema: /* nullability unknown */ Option[String],
  characterSetName: /* nullability unknown */ Option[String],
  characterRepertoire: /* nullability unknown */ Option[String],
  formOfUse: /* nullability unknown */ Option[String],
  defaultCollateCatalog: /* nullability unknown */ Option[String],
  defaultCollateSchema: /* nullability unknown */ Option[String],
  defaultCollateName: /* nullability unknown */ Option[String]
)

object CharacterSetsViewRow {
  implicit lazy val reads: Reads[CharacterSetsViewRow] = Reads[CharacterSetsViewRow](json => JsResult.fromTry(
      Try(
        CharacterSetsViewRow(
          characterSetCatalog = json.\("character_set_catalog").toOption.map(_.as(Reads.StringReads)),
          characterSetSchema = json.\("character_set_schema").toOption.map(_.as(Reads.StringReads)),
          characterSetName = json.\("character_set_name").toOption.map(_.as(Reads.StringReads)),
          characterRepertoire = json.\("character_repertoire").toOption.map(_.as(Reads.StringReads)),
          formOfUse = json.\("form_of_use").toOption.map(_.as(Reads.StringReads)),
          defaultCollateCatalog = json.\("default_collate_catalog").toOption.map(_.as(Reads.StringReads)),
          defaultCollateSchema = json.\("default_collate_schema").toOption.map(_.as(Reads.StringReads)),
          defaultCollateName = json.\("default_collate_name").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[CharacterSetsViewRow] = RowParser[CharacterSetsViewRow] { row =>
    Success(
      CharacterSetsViewRow(
        characterSetCatalog = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        characterSetSchema = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        characterSetName = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        characterRepertoire = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        formOfUse = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        defaultCollateCatalog = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        defaultCollateSchema = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        defaultCollateName = row(idx + 7)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[CharacterSetsViewRow] = OWrites[CharacterSetsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "character_set_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetCatalog),
      "character_set_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetSchema),
      "character_set_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetName),
      "character_repertoire" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterRepertoire),
      "form_of_use" -> Writes.OptionWrites(Writes.StringWrites).writes(o.formOfUse),
      "default_collate_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.defaultCollateCatalog),
      "default_collate_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.defaultCollateSchema),
      "default_collate_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.defaultCollateName)
    ))
  )
}
