/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package key_column_usage

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class KeyColumnUsageViewRow(
  constraintCatalog: SqlIdentifier,
  constraintSchema: SqlIdentifier,
  constraintName: SqlIdentifier,
  tableCatalog: SqlIdentifier,
  tableSchema: SqlIdentifier,
  tableName: SqlIdentifier,
  columnName: SqlIdentifier,
  ordinalPosition: CardinalNumber,
  positionInUniqueConstraint: CardinalNumber
)

object KeyColumnUsageViewRow {
  implicit lazy val reads: Reads[KeyColumnUsageViewRow] = Reads[KeyColumnUsageViewRow](json => JsResult.fromTry(
      Try(
        KeyColumnUsageViewRow(
          constraintCatalog = json.\("constraint_catalog").as(SqlIdentifier.reads),
          constraintSchema = json.\("constraint_schema").as(SqlIdentifier.reads),
          constraintName = json.\("constraint_name").as(SqlIdentifier.reads),
          tableCatalog = json.\("table_catalog").as(SqlIdentifier.reads),
          tableSchema = json.\("table_schema").as(SqlIdentifier.reads),
          tableName = json.\("table_name").as(SqlIdentifier.reads),
          columnName = json.\("column_name").as(SqlIdentifier.reads),
          ordinalPosition = json.\("ordinal_position").as(CardinalNumber.reads),
          positionInUniqueConstraint = json.\("position_in_unique_constraint").as(CardinalNumber.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[KeyColumnUsageViewRow] = RowParser[KeyColumnUsageViewRow] { row =>
    Success(
      KeyColumnUsageViewRow(
        constraintCatalog = row(idx + 0)(SqlIdentifier.column),
        constraintSchema = row(idx + 1)(SqlIdentifier.column),
        constraintName = row(idx + 2)(SqlIdentifier.column),
        tableCatalog = row(idx + 3)(SqlIdentifier.column),
        tableSchema = row(idx + 4)(SqlIdentifier.column),
        tableName = row(idx + 5)(SqlIdentifier.column),
        columnName = row(idx + 6)(SqlIdentifier.column),
        ordinalPosition = row(idx + 7)(CardinalNumber.column),
        positionInUniqueConstraint = row(idx + 8)(CardinalNumber.column)
      )
    )
  }
  implicit lazy val writes: OWrites[KeyColumnUsageViewRow] = OWrites[KeyColumnUsageViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "constraint_catalog" -> SqlIdentifier.writes.writes(o.constraintCatalog),
      "constraint_schema" -> SqlIdentifier.writes.writes(o.constraintSchema),
      "constraint_name" -> SqlIdentifier.writes.writes(o.constraintName),
      "table_catalog" -> SqlIdentifier.writes.writes(o.tableCatalog),
      "table_schema" -> SqlIdentifier.writes.writes(o.tableSchema),
      "table_name" -> SqlIdentifier.writes.writes(o.tableName),
      "column_name" -> SqlIdentifier.writes.writes(o.columnName),
      "ordinal_position" -> CardinalNumber.writes.writes(o.ordinalPosition),
      "position_in_unique_constraint" -> CardinalNumber.writes.writes(o.positionInUniqueConstraint)
    ))
  )
}
