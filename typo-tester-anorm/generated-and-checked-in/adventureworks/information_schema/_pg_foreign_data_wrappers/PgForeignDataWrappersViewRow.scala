/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_data_wrappers`

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgForeignDataWrappersViewRow(
  oid: /* oid */ Long,
  fdwowner: /* oid */ Long,
  fdwoptions: Array[String],
  foreignDataWrapperCatalog: SqlIdentifier,
  foreignDataWrapperName: SqlIdentifier,
  authorizationIdentifier: SqlIdentifier,
  foreignDataWrapperLanguage: CharacterData
)

object PgForeignDataWrappersViewRow {
  implicit lazy val reads: Reads[PgForeignDataWrappersViewRow] = Reads[PgForeignDataWrappersViewRow](json => JsResult.fromTry(
      Try(
        PgForeignDataWrappersViewRow(
          oid = json.\("oid").as(Reads.LongReads),
          fdwowner = json.\("fdwowner").as(Reads.LongReads),
          fdwoptions = json.\("fdwoptions").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          foreignDataWrapperCatalog = json.\("foreign_data_wrapper_catalog").as(SqlIdentifier.reads),
          foreignDataWrapperName = json.\("foreign_data_wrapper_name").as(SqlIdentifier.reads),
          authorizationIdentifier = json.\("authorization_identifier").as(SqlIdentifier.reads),
          foreignDataWrapperLanguage = json.\("foreign_data_wrapper_language").as(CharacterData.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgForeignDataWrappersViewRow] = RowParser[PgForeignDataWrappersViewRow] { row =>
    Success(
      PgForeignDataWrappersViewRow(
        oid = row(idx + 0)(Column.columnToLong),
        fdwowner = row(idx + 1)(Column.columnToLong),
        fdwoptions = row(idx + 2)(Column.columnToArray[String](Column.columnToString, implicitly)),
        foreignDataWrapperCatalog = row(idx + 3)(SqlIdentifier.column),
        foreignDataWrapperName = row(idx + 4)(SqlIdentifier.column),
        authorizationIdentifier = row(idx + 5)(SqlIdentifier.column),
        foreignDataWrapperLanguage = row(idx + 6)(CharacterData.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PgForeignDataWrappersViewRow] = OWrites[PgForeignDataWrappersViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Writes.LongWrites.writes(o.oid),
      "fdwowner" -> Writes.LongWrites.writes(o.fdwowner),
      "fdwoptions" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.fdwoptions),
      "foreign_data_wrapper_catalog" -> SqlIdentifier.writes.writes(o.foreignDataWrapperCatalog),
      "foreign_data_wrapper_name" -> SqlIdentifier.writes.writes(o.foreignDataWrapperName),
      "authorization_identifier" -> SqlIdentifier.writes.writes(o.authorizationIdentifier),
      "foreign_data_wrapper_language" -> CharacterData.writes.writes(o.foreignDataWrapperLanguage)
    ))
  )
}
