/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package referential_constraints

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ReferentialConstraintsViewRow(
  constraintCatalog: SqlIdentifier,
  constraintSchema: SqlIdentifier,
  constraintName: SqlIdentifier,
  uniqueConstraintCatalog: SqlIdentifier,
  uniqueConstraintSchema: SqlIdentifier,
  uniqueConstraintName: SqlIdentifier,
  matchOption: CharacterData,
  updateRule: CharacterData,
  deleteRule: CharacterData
)

object ReferentialConstraintsViewRow {
  implicit lazy val reads: Reads[ReferentialConstraintsViewRow] = Reads[ReferentialConstraintsViewRow](json => JsResult.fromTry(
      Try(
        ReferentialConstraintsViewRow(
          constraintCatalog = json.\("constraint_catalog").as(SqlIdentifier.reads),
          constraintSchema = json.\("constraint_schema").as(SqlIdentifier.reads),
          constraintName = json.\("constraint_name").as(SqlIdentifier.reads),
          uniqueConstraintCatalog = json.\("unique_constraint_catalog").as(SqlIdentifier.reads),
          uniqueConstraintSchema = json.\("unique_constraint_schema").as(SqlIdentifier.reads),
          uniqueConstraintName = json.\("unique_constraint_name").as(SqlIdentifier.reads),
          matchOption = json.\("match_option").as(CharacterData.reads),
          updateRule = json.\("update_rule").as(CharacterData.reads),
          deleteRule = json.\("delete_rule").as(CharacterData.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ReferentialConstraintsViewRow] = RowParser[ReferentialConstraintsViewRow] { row =>
    Success(
      ReferentialConstraintsViewRow(
        constraintCatalog = row(idx + 0)(SqlIdentifier.column),
        constraintSchema = row(idx + 1)(SqlIdentifier.column),
        constraintName = row(idx + 2)(SqlIdentifier.column),
        uniqueConstraintCatalog = row(idx + 3)(SqlIdentifier.column),
        uniqueConstraintSchema = row(idx + 4)(SqlIdentifier.column),
        uniqueConstraintName = row(idx + 5)(SqlIdentifier.column),
        matchOption = row(idx + 6)(CharacterData.column),
        updateRule = row(idx + 7)(CharacterData.column),
        deleteRule = row(idx + 8)(CharacterData.column)
      )
    )
  }
  implicit lazy val writes: OWrites[ReferentialConstraintsViewRow] = OWrites[ReferentialConstraintsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "constraint_catalog" -> SqlIdentifier.writes.writes(o.constraintCatalog),
      "constraint_schema" -> SqlIdentifier.writes.writes(o.constraintSchema),
      "constraint_name" -> SqlIdentifier.writes.writes(o.constraintName),
      "unique_constraint_catalog" -> SqlIdentifier.writes.writes(o.uniqueConstraintCatalog),
      "unique_constraint_schema" -> SqlIdentifier.writes.writes(o.uniqueConstraintSchema),
      "unique_constraint_name" -> SqlIdentifier.writes.writes(o.uniqueConstraintName),
      "match_option" -> CharacterData.writes.writes(o.matchOption),
      "update_rule" -> CharacterData.writes.writes(o.updateRule),
      "delete_rule" -> CharacterData.writes.writes(o.deleteRule)
    ))
  )
}
