/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routine_sequence_usage

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class RoutineSequenceUsageViewRow(
  specificCatalog: /* nullability unknown */ Option[String],
  specificSchema: /* nullability unknown */ Option[String],
  specificName: /* nullability unknown */ Option[String],
  routineCatalog: /* nullability unknown */ Option[String],
  routineSchema: /* nullability unknown */ Option[String],
  routineName: /* nullability unknown */ Option[String],
  sequenceCatalog: /* nullability unknown */ Option[String],
  sequenceSchema: /* nullability unknown */ Option[String],
  sequenceName: /* nullability unknown */ Option[String]
)

object RoutineSequenceUsageViewRow {
  implicit lazy val reads: Reads[RoutineSequenceUsageViewRow] = Reads[RoutineSequenceUsageViewRow](json => JsResult.fromTry(
      Try(
        RoutineSequenceUsageViewRow(
          specificCatalog = json.\("specific_catalog").toOption.map(_.as(Reads.StringReads)),
          specificSchema = json.\("specific_schema").toOption.map(_.as(Reads.StringReads)),
          specificName = json.\("specific_name").toOption.map(_.as(Reads.StringReads)),
          routineCatalog = json.\("routine_catalog").toOption.map(_.as(Reads.StringReads)),
          routineSchema = json.\("routine_schema").toOption.map(_.as(Reads.StringReads)),
          routineName = json.\("routine_name").toOption.map(_.as(Reads.StringReads)),
          sequenceCatalog = json.\("sequence_catalog").toOption.map(_.as(Reads.StringReads)),
          sequenceSchema = json.\("sequence_schema").toOption.map(_.as(Reads.StringReads)),
          sequenceName = json.\("sequence_name").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[RoutineSequenceUsageViewRow] = RowParser[RoutineSequenceUsageViewRow] { row =>
    Success(
      RoutineSequenceUsageViewRow(
        specificCatalog = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        specificSchema = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        specificName = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        routineCatalog = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        routineSchema = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        routineName = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        sequenceCatalog = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        sequenceSchema = row(idx + 7)(Column.columnToOption(Column.columnToString)),
        sequenceName = row(idx + 8)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[RoutineSequenceUsageViewRow] = OWrites[RoutineSequenceUsageViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "specific_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificCatalog),
      "specific_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificSchema),
      "specific_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificName),
      "routine_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineCatalog),
      "routine_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineSchema),
      "routine_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineName),
      "sequence_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.sequenceCatalog),
      "sequence_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.sequenceSchema),
      "sequence_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.sequenceName)
    ))
  )
}
