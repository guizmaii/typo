/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_tables

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ForeignTablesViewRow(
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableCatalog]] */
  foreignTableCatalog: SqlIdentifier,
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableSchema]] */
  foreignTableSchema: SqlIdentifier,
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableName]] */
  foreignTableName: SqlIdentifier,
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignServerCatalog]] */
  foreignServerCatalog: SqlIdentifier,
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignServerName]] */
  foreignServerName: SqlIdentifier
)

object ForeignTablesViewRow {
  implicit lazy val reads: Reads[ForeignTablesViewRow] = Reads[ForeignTablesViewRow](json => JsResult.fromTry(
      Try(
        ForeignTablesViewRow(
          foreignTableCatalog = json.\("foreign_table_catalog").as(SqlIdentifier.reads),
          foreignTableSchema = json.\("foreign_table_schema").as(SqlIdentifier.reads),
          foreignTableName = json.\("foreign_table_name").as(SqlIdentifier.reads),
          foreignServerCatalog = json.\("foreign_server_catalog").as(SqlIdentifier.reads),
          foreignServerName = json.\("foreign_server_name").as(SqlIdentifier.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ForeignTablesViewRow] = RowParser[ForeignTablesViewRow] { row =>
    Success(
      ForeignTablesViewRow(
        foreignTableCatalog = row(idx + 0)(SqlIdentifier.column),
        foreignTableSchema = row(idx + 1)(SqlIdentifier.column),
        foreignTableName = row(idx + 2)(SqlIdentifier.column),
        foreignServerCatalog = row(idx + 3)(SqlIdentifier.column),
        foreignServerName = row(idx + 4)(SqlIdentifier.column)
      )
    )
  }
  implicit lazy val writes: OWrites[ForeignTablesViewRow] = OWrites[ForeignTablesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "foreign_table_catalog" -> SqlIdentifier.writes.writes(o.foreignTableCatalog),
      "foreign_table_schema" -> SqlIdentifier.writes.writes(o.foreignTableSchema),
      "foreign_table_name" -> SqlIdentifier.writes.writes(o.foreignTableName),
      "foreign_server_catalog" -> SqlIdentifier.writes.writes(o.foreignServerCatalog),
      "foreign_server_name" -> SqlIdentifier.writes.writes(o.foreignServerName)
    ))
  )
}
