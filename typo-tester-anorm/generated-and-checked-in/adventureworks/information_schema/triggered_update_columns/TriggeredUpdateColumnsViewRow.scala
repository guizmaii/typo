/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package triggered_update_columns

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class TriggeredUpdateColumnsViewRow(
  triggerCatalog: SqlIdentifier,
  triggerSchema: SqlIdentifier,
  triggerName: SqlIdentifier,
  eventObjectCatalog: SqlIdentifier,
  eventObjectSchema: SqlIdentifier,
  eventObjectTable: SqlIdentifier,
  eventObjectColumn: SqlIdentifier
)

object TriggeredUpdateColumnsViewRow {
  implicit lazy val reads: Reads[TriggeredUpdateColumnsViewRow] = Reads[TriggeredUpdateColumnsViewRow](json => JsResult.fromTry(
      Try(
        TriggeredUpdateColumnsViewRow(
          triggerCatalog = json.\("trigger_catalog").as(SqlIdentifier.reads),
          triggerSchema = json.\("trigger_schema").as(SqlIdentifier.reads),
          triggerName = json.\("trigger_name").as(SqlIdentifier.reads),
          eventObjectCatalog = json.\("event_object_catalog").as(SqlIdentifier.reads),
          eventObjectSchema = json.\("event_object_schema").as(SqlIdentifier.reads),
          eventObjectTable = json.\("event_object_table").as(SqlIdentifier.reads),
          eventObjectColumn = json.\("event_object_column").as(SqlIdentifier.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TriggeredUpdateColumnsViewRow] = RowParser[TriggeredUpdateColumnsViewRow] { row =>
    Success(
      TriggeredUpdateColumnsViewRow(
        triggerCatalog = row(idx + 0)(SqlIdentifier.column),
        triggerSchema = row(idx + 1)(SqlIdentifier.column),
        triggerName = row(idx + 2)(SqlIdentifier.column),
        eventObjectCatalog = row(idx + 3)(SqlIdentifier.column),
        eventObjectSchema = row(idx + 4)(SqlIdentifier.column),
        eventObjectTable = row(idx + 5)(SqlIdentifier.column),
        eventObjectColumn = row(idx + 6)(SqlIdentifier.column)
      )
    )
  }
  implicit lazy val writes: OWrites[TriggeredUpdateColumnsViewRow] = OWrites[TriggeredUpdateColumnsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "trigger_catalog" -> SqlIdentifier.writes.writes(o.triggerCatalog),
      "trigger_schema" -> SqlIdentifier.writes.writes(o.triggerSchema),
      "trigger_name" -> SqlIdentifier.writes.writes(o.triggerName),
      "event_object_catalog" -> SqlIdentifier.writes.writes(o.eventObjectCatalog),
      "event_object_schema" -> SqlIdentifier.writes.writes(o.eventObjectSchema),
      "event_object_table" -> SqlIdentifier.writes.writes(o.eventObjectTable),
      "event_object_column" -> SqlIdentifier.writes.writes(o.eventObjectColumn)
    ))
  )
}
