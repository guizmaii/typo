/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package check_constraints

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class CheckConstraintsViewRow(
  constraintCatalog: SqlIdentifier,
  constraintSchema: SqlIdentifier,
  constraintName: SqlIdentifier,
  checkClause: CharacterData
)

object CheckConstraintsViewRow {
  implicit lazy val reads: Reads[CheckConstraintsViewRow] = Reads[CheckConstraintsViewRow](json => JsResult.fromTry(
      Try(
        CheckConstraintsViewRow(
          constraintCatalog = json.\("constraint_catalog").as(SqlIdentifier.reads),
          constraintSchema = json.\("constraint_schema").as(SqlIdentifier.reads),
          constraintName = json.\("constraint_name").as(SqlIdentifier.reads),
          checkClause = json.\("check_clause").as(CharacterData.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[CheckConstraintsViewRow] = RowParser[CheckConstraintsViewRow] { row =>
    Success(
      CheckConstraintsViewRow(
        constraintCatalog = row(idx + 0)(SqlIdentifier.column),
        constraintSchema = row(idx + 1)(SqlIdentifier.column),
        constraintName = row(idx + 2)(SqlIdentifier.column),
        checkClause = row(idx + 3)(CharacterData.column)
      )
    )
  }
  implicit lazy val writes: OWrites[CheckConstraintsViewRow] = OWrites[CheckConstraintsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "constraint_catalog" -> SqlIdentifier.writes.writes(o.constraintCatalog),
      "constraint_schema" -> SqlIdentifier.writes.writes(o.constraintSchema),
      "constraint_name" -> SqlIdentifier.writes.writes(o.constraintName),
      "check_clause" -> CharacterData.writes.writes(o.checkClause)
    ))
  )
}
