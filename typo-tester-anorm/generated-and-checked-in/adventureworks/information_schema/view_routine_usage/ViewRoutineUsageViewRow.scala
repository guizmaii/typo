/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package view_routine_usage

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class ViewRoutineUsageViewRow(
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  specificCatalog: /* nullability unknown */ Option[String],
  specificSchema: /* nullability unknown */ Option[String],
  specificName: /* nullability unknown */ Option[String]
)

object ViewRoutineUsageViewRow {
  implicit lazy val reads: Reads[ViewRoutineUsageViewRow] = Reads[ViewRoutineUsageViewRow](json => JsResult.fromTry(
      Try(
        ViewRoutineUsageViewRow(
          tableCatalog = json.\("table_catalog").toOption.map(_.as(Reads.StringReads)),
          tableSchema = json.\("table_schema").toOption.map(_.as(Reads.StringReads)),
          tableName = json.\("table_name").toOption.map(_.as(Reads.StringReads)),
          specificCatalog = json.\("specific_catalog").toOption.map(_.as(Reads.StringReads)),
          specificSchema = json.\("specific_schema").toOption.map(_.as(Reads.StringReads)),
          specificName = json.\("specific_name").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ViewRoutineUsageViewRow] = RowParser[ViewRoutineUsageViewRow] { row =>
    Success(
      ViewRoutineUsageViewRow(
        tableCatalog = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        tableSchema = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        tableName = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        specificCatalog = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        specificSchema = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        specificName = row(idx + 5)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[ViewRoutineUsageViewRow] = OWrites[ViewRoutineUsageViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "table_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.tableCatalog),
      "table_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.tableSchema),
      "table_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.tableName),
      "specific_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificCatalog),
      "specific_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificSchema),
      "specific_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificName)
    ))
  )
}
