/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package data_type_privileges

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class DataTypePrivilegesViewRow(
  objectCatalog: SqlIdentifier,
  objectSchema: SqlIdentifier,
  objectName: SqlIdentifier,
  objectType: CharacterData,
  /** Points to [[attributes.AttributesViewRow.dtdIdentifier]] */
  dtdIdentifier: SqlIdentifier
)

object DataTypePrivilegesViewRow {
  implicit lazy val reads: Reads[DataTypePrivilegesViewRow] = Reads[DataTypePrivilegesViewRow](json => JsResult.fromTry(
      Try(
        DataTypePrivilegesViewRow(
          objectCatalog = json.\("object_catalog").as(SqlIdentifier.reads),
          objectSchema = json.\("object_schema").as(SqlIdentifier.reads),
          objectName = json.\("object_name").as(SqlIdentifier.reads),
          objectType = json.\("object_type").as(CharacterData.reads),
          dtdIdentifier = json.\("dtd_identifier").as(SqlIdentifier.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[DataTypePrivilegesViewRow] = RowParser[DataTypePrivilegesViewRow] { row =>
    Success(
      DataTypePrivilegesViewRow(
        objectCatalog = row(idx + 0)(SqlIdentifier.column),
        objectSchema = row(idx + 1)(SqlIdentifier.column),
        objectName = row(idx + 2)(SqlIdentifier.column),
        objectType = row(idx + 3)(CharacterData.column),
        dtdIdentifier = row(idx + 4)(SqlIdentifier.column)
      )
    )
  }
  implicit lazy val writes: OWrites[DataTypePrivilegesViewRow] = OWrites[DataTypePrivilegesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "object_catalog" -> SqlIdentifier.writes.writes(o.objectCatalog),
      "object_schema" -> SqlIdentifier.writes.writes(o.objectSchema),
      "object_name" -> SqlIdentifier.writes.writes(o.objectName),
      "object_type" -> CharacterData.writes.writes(o.objectType),
      "dtd_identifier" -> SqlIdentifier.writes.writes(o.dtdIdentifier)
    ))
  )
}
