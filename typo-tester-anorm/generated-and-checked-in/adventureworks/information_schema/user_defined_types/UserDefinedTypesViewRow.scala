/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: SqlIdentifier,
  userDefinedTypeSchema: SqlIdentifier,
  userDefinedTypeName: SqlIdentifier,
  userDefinedTypeCategory: CharacterData,
  isInstantiable: YesOrNo,
  isFinal: YesOrNo,
  orderingForm: CharacterData,
  orderingCategory: CharacterData,
  orderingRoutineCatalog: SqlIdentifier,
  orderingRoutineSchema: SqlIdentifier,
  orderingRoutineName: SqlIdentifier,
  referenceType: CharacterData,
  dataType: CharacterData,
  characterMaximumLength: CardinalNumber,
  characterOctetLength: CardinalNumber,
  characterSetCatalog: SqlIdentifier,
  characterSetSchema: SqlIdentifier,
  characterSetName: SqlIdentifier,
  collationCatalog: SqlIdentifier,
  collationSchema: SqlIdentifier,
  collationName: SqlIdentifier,
  numericPrecision: CardinalNumber,
  numericPrecisionRadix: CardinalNumber,
  numericScale: CardinalNumber,
  datetimePrecision: CardinalNumber,
  intervalType: CharacterData,
  intervalPrecision: CardinalNumber,
  sourceDtdIdentifier: SqlIdentifier,
  refDtdIdentifier: SqlIdentifier
)

object UserDefinedTypesViewRow {
  implicit lazy val reads: Reads[UserDefinedTypesViewRow] = Reads[UserDefinedTypesViewRow](json => JsResult.fromTry(
      Try(
        UserDefinedTypesViewRow(
          userDefinedTypeCatalog = json.\("user_defined_type_catalog").as(SqlIdentifier.reads),
          userDefinedTypeSchema = json.\("user_defined_type_schema").as(SqlIdentifier.reads),
          userDefinedTypeName = json.\("user_defined_type_name").as(SqlIdentifier.reads),
          userDefinedTypeCategory = json.\("user_defined_type_category").as(CharacterData.reads),
          isInstantiable = json.\("is_instantiable").as(YesOrNo.reads),
          isFinal = json.\("is_final").as(YesOrNo.reads),
          orderingForm = json.\("ordering_form").as(CharacterData.reads),
          orderingCategory = json.\("ordering_category").as(CharacterData.reads),
          orderingRoutineCatalog = json.\("ordering_routine_catalog").as(SqlIdentifier.reads),
          orderingRoutineSchema = json.\("ordering_routine_schema").as(SqlIdentifier.reads),
          orderingRoutineName = json.\("ordering_routine_name").as(SqlIdentifier.reads),
          referenceType = json.\("reference_type").as(CharacterData.reads),
          dataType = json.\("data_type").as(CharacterData.reads),
          characterMaximumLength = json.\("character_maximum_length").as(CardinalNumber.reads),
          characterOctetLength = json.\("character_octet_length").as(CardinalNumber.reads),
          characterSetCatalog = json.\("character_set_catalog").as(SqlIdentifier.reads),
          characterSetSchema = json.\("character_set_schema").as(SqlIdentifier.reads),
          characterSetName = json.\("character_set_name").as(SqlIdentifier.reads),
          collationCatalog = json.\("collation_catalog").as(SqlIdentifier.reads),
          collationSchema = json.\("collation_schema").as(SqlIdentifier.reads),
          collationName = json.\("collation_name").as(SqlIdentifier.reads),
          numericPrecision = json.\("numeric_precision").as(CardinalNumber.reads),
          numericPrecisionRadix = json.\("numeric_precision_radix").as(CardinalNumber.reads),
          numericScale = json.\("numeric_scale").as(CardinalNumber.reads),
          datetimePrecision = json.\("datetime_precision").as(CardinalNumber.reads),
          intervalType = json.\("interval_type").as(CharacterData.reads),
          intervalPrecision = json.\("interval_precision").as(CardinalNumber.reads),
          sourceDtdIdentifier = json.\("source_dtd_identifier").as(SqlIdentifier.reads),
          refDtdIdentifier = json.\("ref_dtd_identifier").as(SqlIdentifier.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[UserDefinedTypesViewRow] = RowParser[UserDefinedTypesViewRow] { row =>
    Success(
      UserDefinedTypesViewRow(
        userDefinedTypeCatalog = row(idx + 0)(SqlIdentifier.column),
        userDefinedTypeSchema = row(idx + 1)(SqlIdentifier.column),
        userDefinedTypeName = row(idx + 2)(SqlIdentifier.column),
        userDefinedTypeCategory = row(idx + 3)(CharacterData.column),
        isInstantiable = row(idx + 4)(YesOrNo.column),
        isFinal = row(idx + 5)(YesOrNo.column),
        orderingForm = row(idx + 6)(CharacterData.column),
        orderingCategory = row(idx + 7)(CharacterData.column),
        orderingRoutineCatalog = row(idx + 8)(SqlIdentifier.column),
        orderingRoutineSchema = row(idx + 9)(SqlIdentifier.column),
        orderingRoutineName = row(idx + 10)(SqlIdentifier.column),
        referenceType = row(idx + 11)(CharacterData.column),
        dataType = row(idx + 12)(CharacterData.column),
        characterMaximumLength = row(idx + 13)(CardinalNumber.column),
        characterOctetLength = row(idx + 14)(CardinalNumber.column),
        characterSetCatalog = row(idx + 15)(SqlIdentifier.column),
        characterSetSchema = row(idx + 16)(SqlIdentifier.column),
        characterSetName = row(idx + 17)(SqlIdentifier.column),
        collationCatalog = row(idx + 18)(SqlIdentifier.column),
        collationSchema = row(idx + 19)(SqlIdentifier.column),
        collationName = row(idx + 20)(SqlIdentifier.column),
        numericPrecision = row(idx + 21)(CardinalNumber.column),
        numericPrecisionRadix = row(idx + 22)(CardinalNumber.column),
        numericScale = row(idx + 23)(CardinalNumber.column),
        datetimePrecision = row(idx + 24)(CardinalNumber.column),
        intervalType = row(idx + 25)(CharacterData.column),
        intervalPrecision = row(idx + 26)(CardinalNumber.column),
        sourceDtdIdentifier = row(idx + 27)(SqlIdentifier.column),
        refDtdIdentifier = row(idx + 28)(SqlIdentifier.column)
      )
    )
  }
  implicit lazy val writes: OWrites[UserDefinedTypesViewRow] = OWrites[UserDefinedTypesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "user_defined_type_catalog" -> SqlIdentifier.writes.writes(o.userDefinedTypeCatalog),
      "user_defined_type_schema" -> SqlIdentifier.writes.writes(o.userDefinedTypeSchema),
      "user_defined_type_name" -> SqlIdentifier.writes.writes(o.userDefinedTypeName),
      "user_defined_type_category" -> CharacterData.writes.writes(o.userDefinedTypeCategory),
      "is_instantiable" -> YesOrNo.writes.writes(o.isInstantiable),
      "is_final" -> YesOrNo.writes.writes(o.isFinal),
      "ordering_form" -> CharacterData.writes.writes(o.orderingForm),
      "ordering_category" -> CharacterData.writes.writes(o.orderingCategory),
      "ordering_routine_catalog" -> SqlIdentifier.writes.writes(o.orderingRoutineCatalog),
      "ordering_routine_schema" -> SqlIdentifier.writes.writes(o.orderingRoutineSchema),
      "ordering_routine_name" -> SqlIdentifier.writes.writes(o.orderingRoutineName),
      "reference_type" -> CharacterData.writes.writes(o.referenceType),
      "data_type" -> CharacterData.writes.writes(o.dataType),
      "character_maximum_length" -> CardinalNumber.writes.writes(o.characterMaximumLength),
      "character_octet_length" -> CardinalNumber.writes.writes(o.characterOctetLength),
      "character_set_catalog" -> SqlIdentifier.writes.writes(o.characterSetCatalog),
      "character_set_schema" -> SqlIdentifier.writes.writes(o.characterSetSchema),
      "character_set_name" -> SqlIdentifier.writes.writes(o.characterSetName),
      "collation_catalog" -> SqlIdentifier.writes.writes(o.collationCatalog),
      "collation_schema" -> SqlIdentifier.writes.writes(o.collationSchema),
      "collation_name" -> SqlIdentifier.writes.writes(o.collationName),
      "numeric_precision" -> CardinalNumber.writes.writes(o.numericPrecision),
      "numeric_precision_radix" -> CardinalNumber.writes.writes(o.numericPrecisionRadix),
      "numeric_scale" -> CardinalNumber.writes.writes(o.numericScale),
      "datetime_precision" -> CardinalNumber.writes.writes(o.datetimePrecision),
      "interval_type" -> CharacterData.writes.writes(o.intervalType),
      "interval_precision" -> CardinalNumber.writes.writes(o.intervalPrecision),
      "source_dtd_identifier" -> SqlIdentifier.writes.writes(o.sourceDtdIdentifier),
      "ref_dtd_identifier" -> SqlIdentifier.writes.writes(o.refDtdIdentifier)
    ))
  )
}
