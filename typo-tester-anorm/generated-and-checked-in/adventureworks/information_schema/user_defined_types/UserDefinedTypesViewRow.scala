/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: /* nullability unknown */ Option[String],
  userDefinedTypeSchema: /* nullability unknown */ Option[String],
  userDefinedTypeName: /* nullability unknown */ Option[String],
  userDefinedTypeCategory: /* nullability unknown */ Option[String],
  isInstantiable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isFinal: /* nullability unknown */ Option[/* max 3 chars */ String],
  orderingForm: /* nullability unknown */ Option[String],
  orderingCategory: /* nullability unknown */ Option[String],
  orderingRoutineCatalog: /* nullability unknown */ Option[String],
  orderingRoutineSchema: /* nullability unknown */ Option[String],
  orderingRoutineName: /* nullability unknown */ Option[String],
  referenceType: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[String],
  characterMaximumLength: /* nullability unknown */ Option[Int],
  characterOctetLength: /* nullability unknown */ Option[Int],
  characterSetCatalog: /* nullability unknown */ Option[String],
  characterSetSchema: /* nullability unknown */ Option[String],
  characterSetName: /* nullability unknown */ Option[String],
  collationCatalog: /* nullability unknown */ Option[String],
  collationSchema: /* nullability unknown */ Option[String],
  collationName: /* nullability unknown */ Option[String],
  numericPrecision: /* nullability unknown */ Option[Int],
  numericPrecisionRadix: /* nullability unknown */ Option[Int],
  numericScale: /* nullability unknown */ Option[Int],
  datetimePrecision: /* nullability unknown */ Option[Int],
  intervalType: /* nullability unknown */ Option[String],
  intervalPrecision: /* nullability unknown */ Option[Int],
  sourceDtdIdentifier: /* nullability unknown */ Option[String],
  refDtdIdentifier: /* nullability unknown */ Option[String]
)

object UserDefinedTypesViewRow {
  implicit lazy val reads: Reads[UserDefinedTypesViewRow] = Reads[UserDefinedTypesViewRow](json => JsResult.fromTry(
      Try(
        UserDefinedTypesViewRow(
          userDefinedTypeCatalog = json.\("user_defined_type_catalog").toOption.map(_.as(Reads.StringReads)),
          userDefinedTypeSchema = json.\("user_defined_type_schema").toOption.map(_.as(Reads.StringReads)),
          userDefinedTypeName = json.\("user_defined_type_name").toOption.map(_.as(Reads.StringReads)),
          userDefinedTypeCategory = json.\("user_defined_type_category").toOption.map(_.as(Reads.StringReads)),
          isInstantiable = json.\("is_instantiable").toOption.map(_.as(Reads.StringReads)),
          isFinal = json.\("is_final").toOption.map(_.as(Reads.StringReads)),
          orderingForm = json.\("ordering_form").toOption.map(_.as(Reads.StringReads)),
          orderingCategory = json.\("ordering_category").toOption.map(_.as(Reads.StringReads)),
          orderingRoutineCatalog = json.\("ordering_routine_catalog").toOption.map(_.as(Reads.StringReads)),
          orderingRoutineSchema = json.\("ordering_routine_schema").toOption.map(_.as(Reads.StringReads)),
          orderingRoutineName = json.\("ordering_routine_name").toOption.map(_.as(Reads.StringReads)),
          referenceType = json.\("reference_type").toOption.map(_.as(Reads.StringReads)),
          dataType = json.\("data_type").toOption.map(_.as(Reads.StringReads)),
          characterMaximumLength = json.\("character_maximum_length").toOption.map(_.as(Reads.IntReads)),
          characterOctetLength = json.\("character_octet_length").toOption.map(_.as(Reads.IntReads)),
          characterSetCatalog = json.\("character_set_catalog").toOption.map(_.as(Reads.StringReads)),
          characterSetSchema = json.\("character_set_schema").toOption.map(_.as(Reads.StringReads)),
          characterSetName = json.\("character_set_name").toOption.map(_.as(Reads.StringReads)),
          collationCatalog = json.\("collation_catalog").toOption.map(_.as(Reads.StringReads)),
          collationSchema = json.\("collation_schema").toOption.map(_.as(Reads.StringReads)),
          collationName = json.\("collation_name").toOption.map(_.as(Reads.StringReads)),
          numericPrecision = json.\("numeric_precision").toOption.map(_.as(Reads.IntReads)),
          numericPrecisionRadix = json.\("numeric_precision_radix").toOption.map(_.as(Reads.IntReads)),
          numericScale = json.\("numeric_scale").toOption.map(_.as(Reads.IntReads)),
          datetimePrecision = json.\("datetime_precision").toOption.map(_.as(Reads.IntReads)),
          intervalType = json.\("interval_type").toOption.map(_.as(Reads.StringReads)),
          intervalPrecision = json.\("interval_precision").toOption.map(_.as(Reads.IntReads)),
          sourceDtdIdentifier = json.\("source_dtd_identifier").toOption.map(_.as(Reads.StringReads)),
          refDtdIdentifier = json.\("ref_dtd_identifier").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[UserDefinedTypesViewRow] = RowParser[UserDefinedTypesViewRow] { row =>
    Success(
      UserDefinedTypesViewRow(
        userDefinedTypeCatalog = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        userDefinedTypeSchema = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        userDefinedTypeName = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        userDefinedTypeCategory = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        isInstantiable = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        isFinal = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        orderingForm = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        orderingCategory = row(idx + 7)(Column.columnToOption(Column.columnToString)),
        orderingRoutineCatalog = row(idx + 8)(Column.columnToOption(Column.columnToString)),
        orderingRoutineSchema = row(idx + 9)(Column.columnToOption(Column.columnToString)),
        orderingRoutineName = row(idx + 10)(Column.columnToOption(Column.columnToString)),
        referenceType = row(idx + 11)(Column.columnToOption(Column.columnToString)),
        dataType = row(idx + 12)(Column.columnToOption(Column.columnToString)),
        characterMaximumLength = row(idx + 13)(Column.columnToOption(Column.columnToInt)),
        characterOctetLength = row(idx + 14)(Column.columnToOption(Column.columnToInt)),
        characterSetCatalog = row(idx + 15)(Column.columnToOption(Column.columnToString)),
        characterSetSchema = row(idx + 16)(Column.columnToOption(Column.columnToString)),
        characterSetName = row(idx + 17)(Column.columnToOption(Column.columnToString)),
        collationCatalog = row(idx + 18)(Column.columnToOption(Column.columnToString)),
        collationSchema = row(idx + 19)(Column.columnToOption(Column.columnToString)),
        collationName = row(idx + 20)(Column.columnToOption(Column.columnToString)),
        numericPrecision = row(idx + 21)(Column.columnToOption(Column.columnToInt)),
        numericPrecisionRadix = row(idx + 22)(Column.columnToOption(Column.columnToInt)),
        numericScale = row(idx + 23)(Column.columnToOption(Column.columnToInt)),
        datetimePrecision = row(idx + 24)(Column.columnToOption(Column.columnToInt)),
        intervalType = row(idx + 25)(Column.columnToOption(Column.columnToString)),
        intervalPrecision = row(idx + 26)(Column.columnToOption(Column.columnToInt)),
        sourceDtdIdentifier = row(idx + 27)(Column.columnToOption(Column.columnToString)),
        refDtdIdentifier = row(idx + 28)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[UserDefinedTypesViewRow] = OWrites[UserDefinedTypesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "user_defined_type_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.userDefinedTypeCatalog),
      "user_defined_type_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.userDefinedTypeSchema),
      "user_defined_type_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.userDefinedTypeName),
      "user_defined_type_category" -> Writes.OptionWrites(Writes.StringWrites).writes(o.userDefinedTypeCategory),
      "is_instantiable" -> Writes.OptionWrites(Writes.StringWrites).writes(o.isInstantiable),
      "is_final" -> Writes.OptionWrites(Writes.StringWrites).writes(o.isFinal),
      "ordering_form" -> Writes.OptionWrites(Writes.StringWrites).writes(o.orderingForm),
      "ordering_category" -> Writes.OptionWrites(Writes.StringWrites).writes(o.orderingCategory),
      "ordering_routine_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.orderingRoutineCatalog),
      "ordering_routine_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.orderingRoutineSchema),
      "ordering_routine_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.orderingRoutineName),
      "reference_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.referenceType),
      "data_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.dataType),
      "character_maximum_length" -> Writes.OptionWrites(Writes.IntWrites).writes(o.characterMaximumLength),
      "character_octet_length" -> Writes.OptionWrites(Writes.IntWrites).writes(o.characterOctetLength),
      "character_set_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetCatalog),
      "character_set_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetSchema),
      "character_set_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetName),
      "collation_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.collationCatalog),
      "collation_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.collationSchema),
      "collation_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.collationName),
      "numeric_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.numericPrecision),
      "numeric_precision_radix" -> Writes.OptionWrites(Writes.IntWrites).writes(o.numericPrecisionRadix),
      "numeric_scale" -> Writes.OptionWrites(Writes.IntWrites).writes(o.numericScale),
      "datetime_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.datetimePrecision),
      "interval_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.intervalType),
      "interval_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.intervalPrecision),
      "source_dtd_identifier" -> Writes.OptionWrites(Writes.StringWrites).writes(o.sourceDtdIdentifier),
      "ref_dtd_identifier" -> Writes.OptionWrites(Writes.StringWrites).writes(o.refDtdIdentifier)
    ))
  )
}
