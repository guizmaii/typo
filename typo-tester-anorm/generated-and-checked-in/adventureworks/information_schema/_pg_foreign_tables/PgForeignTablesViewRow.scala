/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_tables`

import adventureworks.information_schema.SqlIdentifier
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgForeignTablesViewRow(
  foreignTableCatalog: SqlIdentifier,
  foreignTableSchema: SqlIdentifier,
  foreignTableName: SqlIdentifier,
  ftoptions: Array[String],
  foreignServerCatalog: SqlIdentifier,
  foreignServerName: SqlIdentifier,
  authorizationIdentifier: SqlIdentifier
)

object PgForeignTablesViewRow {
  implicit lazy val reads: Reads[PgForeignTablesViewRow] = Reads[PgForeignTablesViewRow](json => JsResult.fromTry(
      Try(
        PgForeignTablesViewRow(
          foreignTableCatalog = json.\("foreign_table_catalog").as(SqlIdentifier.reads),
          foreignTableSchema = json.\("foreign_table_schema").as(SqlIdentifier.reads),
          foreignTableName = json.\("foreign_table_name").as(SqlIdentifier.reads),
          ftoptions = json.\("ftoptions").as(Reads.ArrayReads[String](Reads.StringReads, implicitly)),
          foreignServerCatalog = json.\("foreign_server_catalog").as(SqlIdentifier.reads),
          foreignServerName = json.\("foreign_server_name").as(SqlIdentifier.reads),
          authorizationIdentifier = json.\("authorization_identifier").as(SqlIdentifier.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgForeignTablesViewRow] = RowParser[PgForeignTablesViewRow] { row =>
    Success(
      PgForeignTablesViewRow(
        foreignTableCatalog = row(idx + 0)(SqlIdentifier.column),
        foreignTableSchema = row(idx + 1)(SqlIdentifier.column),
        foreignTableName = row(idx + 2)(SqlIdentifier.column),
        ftoptions = row(idx + 3)(Column.columnToArray[String](Column.columnToString, implicitly)),
        foreignServerCatalog = row(idx + 4)(SqlIdentifier.column),
        foreignServerName = row(idx + 5)(SqlIdentifier.column),
        authorizationIdentifier = row(idx + 6)(SqlIdentifier.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PgForeignTablesViewRow] = OWrites[PgForeignTablesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "foreign_table_catalog" -> SqlIdentifier.writes.writes(o.foreignTableCatalog),
      "foreign_table_schema" -> SqlIdentifier.writes.writes(o.foreignTableSchema),
      "foreign_table_name" -> SqlIdentifier.writes.writes(o.foreignTableName),
      "ftoptions" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.ftoptions),
      "foreign_server_catalog" -> SqlIdentifier.writes.writes(o.foreignServerCatalog),
      "foreign_server_name" -> SqlIdentifier.writes.writes(o.foreignServerName),
      "authorization_identifier" -> SqlIdentifier.writes.writes(o.authorizationIdentifier)
    ))
  )
}
