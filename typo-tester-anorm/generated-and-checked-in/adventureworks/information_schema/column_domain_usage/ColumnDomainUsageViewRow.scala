/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_domain_usage

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ColumnDomainUsageViewRow(
  domainCatalog: SqlIdentifier,
  domainSchema: SqlIdentifier,
  domainName: SqlIdentifier,
  tableCatalog: SqlIdentifier,
  tableSchema: SqlIdentifier,
  tableName: SqlIdentifier,
  columnName: SqlIdentifier
)

object ColumnDomainUsageViewRow {
  implicit lazy val reads: Reads[ColumnDomainUsageViewRow] = Reads[ColumnDomainUsageViewRow](json => JsResult.fromTry(
      Try(
        ColumnDomainUsageViewRow(
          domainCatalog = json.\("domain_catalog").as(SqlIdentifier.reads),
          domainSchema = json.\("domain_schema").as(SqlIdentifier.reads),
          domainName = json.\("domain_name").as(SqlIdentifier.reads),
          tableCatalog = json.\("table_catalog").as(SqlIdentifier.reads),
          tableSchema = json.\("table_schema").as(SqlIdentifier.reads),
          tableName = json.\("table_name").as(SqlIdentifier.reads),
          columnName = json.\("column_name").as(SqlIdentifier.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ColumnDomainUsageViewRow] = RowParser[ColumnDomainUsageViewRow] { row =>
    Success(
      ColumnDomainUsageViewRow(
        domainCatalog = row(idx + 0)(SqlIdentifier.column),
        domainSchema = row(idx + 1)(SqlIdentifier.column),
        domainName = row(idx + 2)(SqlIdentifier.column),
        tableCatalog = row(idx + 3)(SqlIdentifier.column),
        tableSchema = row(idx + 4)(SqlIdentifier.column),
        tableName = row(idx + 5)(SqlIdentifier.column),
        columnName = row(idx + 6)(SqlIdentifier.column)
      )
    )
  }
  implicit lazy val writes: OWrites[ColumnDomainUsageViewRow] = OWrites[ColumnDomainUsageViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "domain_catalog" -> SqlIdentifier.writes.writes(o.domainCatalog),
      "domain_schema" -> SqlIdentifier.writes.writes(o.domainSchema),
      "domain_name" -> SqlIdentifier.writes.writes(o.domainName),
      "table_catalog" -> SqlIdentifier.writes.writes(o.tableCatalog),
      "table_schema" -> SqlIdentifier.writes.writes(o.tableSchema),
      "table_name" -> SqlIdentifier.writes.writes(o.tableName),
      "column_name" -> SqlIdentifier.writes.writes(o.columnName)
    ))
  )
}
