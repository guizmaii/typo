/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vpersondemographics

import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoMoney
import adventureworks.person.businessentity.BusinessentityId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class VpersondemographicsViewRow(
  /** Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  totalpurchaseytd: TypoMoney,
  datefirstpurchase: TypoLocalDate,
  birthdate: TypoLocalDate,
  maritalstatus: /* max 1 chars */ String,
  yearlyincome: /* max 30 chars */ String,
  gender: /* max 1 chars */ String,
  totalchildren: Int,
  numberchildrenathome: Int,
  education: /* max 30 chars */ String,
  occupation: /* max 30 chars */ String,
  homeownerflag: Boolean,
  numbercarsowned: Int
)

object VpersondemographicsViewRow {
  implicit lazy val reads: Reads[VpersondemographicsViewRow] = Reads[VpersondemographicsViewRow](json => JsResult.fromTry(
      Try(
        VpersondemographicsViewRow(
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          totalpurchaseytd = json.\("totalpurchaseytd").as(TypoMoney.reads),
          datefirstpurchase = json.\("datefirstpurchase").as(TypoLocalDate.reads),
          birthdate = json.\("birthdate").as(TypoLocalDate.reads),
          maritalstatus = json.\("maritalstatus").as(Reads.StringReads),
          yearlyincome = json.\("yearlyincome").as(Reads.StringReads),
          gender = json.\("gender").as(Reads.StringReads),
          totalchildren = json.\("totalchildren").as(Reads.IntReads),
          numberchildrenathome = json.\("numberchildrenathome").as(Reads.IntReads),
          education = json.\("education").as(Reads.StringReads),
          occupation = json.\("occupation").as(Reads.StringReads),
          homeownerflag = json.\("homeownerflag").as(Reads.BooleanReads),
          numbercarsowned = json.\("numbercarsowned").as(Reads.IntReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VpersondemographicsViewRow] = RowParser[VpersondemographicsViewRow] { row =>
    Success(
      VpersondemographicsViewRow(
        businessentityid = row(idx + 0)(BusinessentityId.column),
        totalpurchaseytd = row(idx + 1)(TypoMoney.column),
        datefirstpurchase = row(idx + 2)(TypoLocalDate.column),
        birthdate = row(idx + 3)(TypoLocalDate.column),
        maritalstatus = row(idx + 4)(Column.columnToString),
        yearlyincome = row(idx + 5)(Column.columnToString),
        gender = row(idx + 6)(Column.columnToString),
        totalchildren = row(idx + 7)(Column.columnToInt),
        numberchildrenathome = row(idx + 8)(Column.columnToInt),
        education = row(idx + 9)(Column.columnToString),
        occupation = row(idx + 10)(Column.columnToString),
        homeownerflag = row(idx + 11)(Column.columnToBoolean),
        numbercarsowned = row(idx + 12)(Column.columnToInt)
      )
    )
  }
  implicit lazy val writes: OWrites[VpersondemographicsViewRow] = OWrites[VpersondemographicsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "totalpurchaseytd" -> TypoMoney.writes.writes(o.totalpurchaseytd),
      "datefirstpurchase" -> TypoLocalDate.writes.writes(o.datefirstpurchase),
      "birthdate" -> TypoLocalDate.writes.writes(o.birthdate),
      "maritalstatus" -> Writes.StringWrites.writes(o.maritalstatus),
      "yearlyincome" -> Writes.StringWrites.writes(o.yearlyincome),
      "gender" -> Writes.StringWrites.writes(o.gender),
      "totalchildren" -> Writes.IntWrites.writes(o.totalchildren),
      "numberchildrenathome" -> Writes.IntWrites.writes(o.numberchildrenathome),
      "education" -> Writes.StringWrites.writes(o.education),
      "occupation" -> Writes.StringWrites.writes(o.occupation),
      "homeownerflag" -> Writes.BooleanWrites.writes(o.homeownerflag),
      "numbercarsowned" -> Writes.IntWrites.writes(o.numbercarsowned)
    ))
  )
}
