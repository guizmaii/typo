/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package um

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Name
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class UmViewRow(
  id: /* bpchar, max 3 chars */ String,
  /** Points to [[production.unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  unitmeasurecode: UnitmeasureId,
  /** Points to [[production.unitmeasure.UnitmeasureRow.name]] */
  name: Name,
  /** Points to [[production.unitmeasure.UnitmeasureRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object UmViewRow {
  implicit lazy val reads: Reads[UmViewRow] = Reads[UmViewRow](json => JsResult.fromTry(
      Try(
        UmViewRow(
          id = json.\("id").as(Reads.StringReads),
          unitmeasurecode = json.\("unitmeasurecode").as(UnitmeasureId.reads),
          name = json.\("name").as(Name.reads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[UmViewRow] = RowParser[UmViewRow] { row =>
    Success(
      UmViewRow(
        id = row(idx + 0)(Column.columnToString),
        unitmeasurecode = row(idx + 1)(UnitmeasureId.column),
        name = row(idx + 2)(Name.column),
        modifieddate = row(idx + 3)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[UmViewRow] = OWrites[UmViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Writes.StringWrites.writes(o.id),
      "unitmeasurecode" -> UnitmeasureId.writes.writes(o.unitmeasurecode),
      "name" -> Name.writes.writes(o.name),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
