/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pv

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PvViewRow(
  id: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.productid]] */
  productid: ProductId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.averageleadtime]] */
  averageleadtime: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.standardprice]] */
  standardprice: BigDecimal,
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptcost]] */
  lastreceiptcost: BigDecimal,
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptdate]] */
  lastreceiptdate: TypoLocalDateTime,
  /** Points to [[purchasing.productvendor.ProductvendorRow.minorderqty]] */
  minorderqty: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.maxorderqty]] */
  maxorderqty: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.onorderqty]] */
  onorderqty: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.unitmeasurecode]] */
  unitmeasurecode: UnitmeasureId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object PvViewRow {
  implicit lazy val reads: Reads[PvViewRow] = Reads[PvViewRow](json => JsResult.fromTry(
      Try(
        PvViewRow(
          id = json.\("id").as(Reads.IntReads),
          productid = json.\("productid").as(ProductId.reads),
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          averageleadtime = json.\("averageleadtime").as(Reads.IntReads),
          standardprice = json.\("standardprice").as(Reads.bigDecReads),
          lastreceiptcost = json.\("lastreceiptcost").as(Reads.bigDecReads),
          lastreceiptdate = json.\("lastreceiptdate").as(TypoLocalDateTime.reads),
          minorderqty = json.\("minorderqty").as(Reads.IntReads),
          maxorderqty = json.\("maxorderqty").as(Reads.IntReads),
          onorderqty = json.\("onorderqty").as(Reads.IntReads),
          unitmeasurecode = json.\("unitmeasurecode").as(UnitmeasureId.reads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PvViewRow] = RowParser[PvViewRow] { row =>
    Success(
      PvViewRow(
        id = row(idx + 0)(Column.columnToInt),
        productid = row(idx + 1)(ProductId.column),
        businessentityid = row(idx + 2)(BusinessentityId.column),
        averageleadtime = row(idx + 3)(Column.columnToInt),
        standardprice = row(idx + 4)(Column.columnToScalaBigDecimal),
        lastreceiptcost = row(idx + 5)(Column.columnToScalaBigDecimal),
        lastreceiptdate = row(idx + 6)(TypoLocalDateTime.column),
        minorderqty = row(idx + 7)(Column.columnToInt),
        maxorderqty = row(idx + 8)(Column.columnToInt),
        onorderqty = row(idx + 9)(Column.columnToInt),
        unitmeasurecode = row(idx + 10)(UnitmeasureId.column),
        modifieddate = row(idx + 11)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PvViewRow] = OWrites[PvViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Writes.IntWrites.writes(o.id),
      "productid" -> ProductId.writes.writes(o.productid),
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "averageleadtime" -> Writes.IntWrites.writes(o.averageleadtime),
      "standardprice" -> Writes.BigDecimalWrites.writes(o.standardprice),
      "lastreceiptcost" -> Writes.BigDecimalWrites.writes(o.lastreceiptcost),
      "lastreceiptdate" -> TypoLocalDateTime.writes.writes(o.lastreceiptdate),
      "minorderqty" -> Writes.IntWrites.writes(o.minorderqty),
      "maxorderqty" -> Writes.IntWrites.writes(o.maxorderqty),
      "onorderqty" -> Writes.IntWrites.writes(o.onorderqty),
      "unitmeasurecode" -> UnitmeasureId.writes.writes(o.unitmeasurecode),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
