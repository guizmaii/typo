/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Domain `information_schema.yes_or_no`
  * Constraint: CHECK (((VALUE)::text = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::text[])))
  */
case class YesOrNo(value: String) extends AnyVal
object YesOrNo {
  implicit lazy val arrayToStatement: ToStatement[Array[YesOrNo]] = implicitly[ToStatement[Array[String]]].contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[YesOrNo, String] = Bijection[YesOrNo, String](_.value)(YesOrNo.apply)
  implicit lazy val column: Column[YesOrNo] = implicitly[Column[String]].map(YesOrNo.apply)
  implicit lazy val ordering: Ordering[YesOrNo] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[YesOrNo] = new ParameterMetaData[YesOrNo] {
    override def sqlType: String = implicitly[ParameterMetaData[String]].sqlType
    override def jdbcType: Int = implicitly[ParameterMetaData[String]].jdbcType
  }
  implicit lazy val reads: Reads[YesOrNo] = Reads.StringReads.map(YesOrNo.apply)
  implicit lazy val toStatement: ToStatement[YesOrNo] = implicitly[ToStatement[String]].contramap(_.value)
  implicit lazy val writes: Writes[YesOrNo] = Writes.StringWrites.contramap(_.value)
}
