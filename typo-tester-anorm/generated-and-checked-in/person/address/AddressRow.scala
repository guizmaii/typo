/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import adventureworks.person.stateprovince.StateprovinceId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class AddressRow(
  /** Primary key for Address records. */
  addressid: AddressId,
  /** First street address line. */
  addressline1: /* max 60 chars */ String,
  /** Second street address line. */
  addressline2: Option[/* max 60 chars */ String],
  /** Name of the city. */
  city: /* max 30 chars */ String,
  /** Unique identification number for the state or province. Foreign key to StateProvince table.
      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** Postal code for the street address. */
  postalcode: /* max 15 chars */ String,
  /** Latitude and longitude of this address. */
  spatiallocation: Option[Array[Byte]],
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object AddressRow {
  val rowParser: RowParser[AddressRow] =
    RowParser[AddressRow] { row =>
      Success(
        AddressRow(
          addressid = row[AddressId]("addressid"),
          addressline1 = row[/* max 60 chars */ String]("addressline1"),
          addressline2 = row[Option[/* max 60 chars */ String]]("addressline2"),
          city = row[/* max 30 chars */ String]("city"),
          stateprovinceid = row[StateprovinceId]("stateprovinceid"),
          postalcode = row[/* max 15 chars */ String]("postalcode"),
          spatiallocation = row[Option[Array[Byte]]]("spatiallocation"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
  implicit val oFormat: OFormat[AddressRow] = new OFormat[AddressRow]{
    override def writes(o: AddressRow): JsObject =
      Json.obj(
        "addressid" -> o.addressid,
        "addressline1" -> o.addressline1,
        "addressline2" -> o.addressline2,
        "city" -> o.city,
        "stateprovinceid" -> o.stateprovinceid,
        "postalcode" -> o.postalcode,
        "spatiallocation" -> o.spatiallocation,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[AddressRow] = {
      JsResult.fromTry(
        Try(
          AddressRow(
            addressid = json.\("addressid").as[AddressId],
            addressline1 = json.\("addressline1").as[/* max 60 chars */ String],
            addressline2 = json.\("addressline2").toOption.map(_.as[/* max 60 chars */ String]),
            city = json.\("city").as[/* max 30 chars */ String],
            stateprovinceid = json.\("stateprovinceid").as[StateprovinceId],
            postalcode = json.\("postalcode").as[/* max 15 chars */ String],
            spatiallocation = json.\("spatiallocation").toOption.map(_.as[Array[Byte]]),
            rowguid = json.\("rowguid").as[UUID],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
