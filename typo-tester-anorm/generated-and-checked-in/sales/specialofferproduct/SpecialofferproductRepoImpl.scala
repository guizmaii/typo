/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialofferproduct

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SQL
import anorm.SimpleSql
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.util.UUID
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object SpecialofferproductRepoImpl extends SpecialofferproductRepo {
  override def delete(compositeId: SpecialofferproductId)(implicit c: Connection): Boolean = {
    SQL"delete from sales.specialofferproduct where specialofferid = ${compositeId.specialofferid} AND productid = ${compositeId.productid}".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[SpecialofferproductFields, SpecialofferproductRow] = {
    DeleteBuilder("sales.specialofferproduct", SpecialofferproductFields)
  }
  override def insert(unsaved: SpecialofferproductRow)(implicit c: Connection): SpecialofferproductRow = {
    SQL"""insert into sales.specialofferproduct(specialofferid, productid, rowguid, modifieddate)
          values (${unsaved.specialofferid}::int4, ${unsaved.productid}::int4, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning specialofferid, productid, rowguid, modifieddate::text
       """
      .executeInsert(SpecialofferproductRow.rowParser(1).single)
    
  }
  override def insert(unsaved: SpecialofferproductRowUnsaved)(implicit c: Connection): SpecialofferproductRow = {
    val namedParameters = List(
      Some((NamedParameter("specialofferid", ParameterValue.from(unsaved.specialofferid)), "::int4")),
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into sales.specialofferproduct default values
            returning specialofferid, productid, rowguid, modifieddate::text
         """
        .executeInsert(SpecialofferproductRow.rowParser(1).single)
    } else {
      val q = s"""insert into sales.specialofferproduct(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning specialofferid, productid, rowguid, modifieddate::text
               """
      SimpleSql(SQL(q), namedParameters.map { case (np, _) => np.tupled }.toMap, RowParser(Success(_)))
        .executeInsert(SpecialofferproductRow.rowParser(1).single)
    }
    
  }
  override def select: SelectBuilder[SpecialofferproductFields, SpecialofferproductRow] = {
    SelectBuilderSql("sales.specialofferproduct", SpecialofferproductFields, SpecialofferproductRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[SpecialofferproductRow] = {
    SQL"""select specialofferid, productid, rowguid, modifieddate::text
          from sales.specialofferproduct
       """.as(SpecialofferproductRow.rowParser(1).*)
  }
  override def selectById(compositeId: SpecialofferproductId)(implicit c: Connection): Option[SpecialofferproductRow] = {
    SQL"""select specialofferid, productid, rowguid, modifieddate::text
          from sales.specialofferproduct
          where specialofferid = ${compositeId.specialofferid} AND productid = ${compositeId.productid}
       """.as(SpecialofferproductRow.rowParser(1).singleOpt)
  }
  override def update(row: SpecialofferproductRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update sales.specialofferproduct
          set rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where specialofferid = ${compositeId.specialofferid} AND productid = ${compositeId.productid}
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[SpecialofferproductFields, SpecialofferproductRow] = {
    UpdateBuilder("sales.specialofferproduct", SpecialofferproductFields, SpecialofferproductRow.rowParser)
  }
  override def upsert(unsaved: SpecialofferproductRow)(implicit c: Connection): SpecialofferproductRow = {
    SQL"""insert into sales.specialofferproduct(specialofferid, productid, rowguid, modifieddate)
          values (
            ${unsaved.specialofferid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (specialofferid, productid)
          do update set
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning specialofferid, productid, rowguid, modifieddate::text
       """
      .executeInsert(SpecialofferproductRow.rowParser(1).single)
    
  }
}
