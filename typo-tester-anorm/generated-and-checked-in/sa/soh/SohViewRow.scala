/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package soh

import adventureworks.person.address.AddressId
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.OrderNumber
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.sales.creditcard.CreditcardId
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.salesterritory.SalesterritoryId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SohViewRow(
  id: Option[Int],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.salesorderid]] */
  salesorderid: Option[SalesorderheaderId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.revisionnumber]] */
  revisionnumber: Option[Int],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.orderdate]] */
  orderdate: Option[LocalDateTime],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.duedate]] */
  duedate: Option[LocalDateTime],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.shipdate]] */
  shipdate: Option[LocalDateTime],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.status]] */
  status: Option[Int],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.onlineorderflag]] */
  onlineorderflag: Flag,
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.purchaseordernumber]] */
  purchaseordernumber: Option[OrderNumber],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.accountnumber]] */
  accountnumber: Option[AccountNumber],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.customerid]] */
  customerid: Option[CustomerId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.salespersonid]] */
  salespersonid: Option[BusinessentityId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.billtoaddressid]] */
  billtoaddressid: Option[AddressId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.shiptoaddressid]] */
  shiptoaddressid: Option[AddressId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.shipmethodid]] */
  shipmethodid: Option[ShipmethodId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.creditcardid]] */
  creditcardid: Option[CreditcardId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.creditcardapprovalcode]] */
  creditcardapprovalcode: Option[/* max 15 chars */ String],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.currencyrateid]] */
  currencyrateid: Option[CurrencyrateId],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.subtotal]] */
  subtotal: Option[BigDecimal],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.taxamt]] */
  taxamt: Option[BigDecimal],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.freight]] */
  freight: Option[BigDecimal],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.totaldue]] */
  totaldue: Option[BigDecimal],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.comment]] */
  comment: Option[/* max 128 chars */ String],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[sales.salesorderheader.SalesorderheaderRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object SohViewRow {
  val rowParser: RowParser[SohViewRow] =
    RowParser[SohViewRow] { row =>
      Success(
        SohViewRow(
          id = row[Option[Int]]("id"),
          salesorderid = row[Option[SalesorderheaderId]]("salesorderid"),
          revisionnumber = row[Option[Int]]("revisionnumber"),
          orderdate = row[Option[LocalDateTime]]("orderdate"),
          duedate = row[Option[LocalDateTime]]("duedate"),
          shipdate = row[Option[LocalDateTime]]("shipdate"),
          status = row[Option[Int]]("status"),
          onlineorderflag = row[Flag]("onlineorderflag"),
          purchaseordernumber = row[Option[OrderNumber]]("purchaseordernumber"),
          accountnumber = row[Option[AccountNumber]]("accountnumber"),
          customerid = row[Option[CustomerId]]("customerid"),
          salespersonid = row[Option[BusinessentityId]]("salespersonid"),
          territoryid = row[Option[SalesterritoryId]]("territoryid"),
          billtoaddressid = row[Option[AddressId]]("billtoaddressid"),
          shiptoaddressid = row[Option[AddressId]]("shiptoaddressid"),
          shipmethodid = row[Option[ShipmethodId]]("shipmethodid"),
          creditcardid = row[Option[CreditcardId]]("creditcardid"),
          creditcardapprovalcode = row[Option[/* max 15 chars */ String]]("creditcardapprovalcode"),
          currencyrateid = row[Option[CurrencyrateId]]("currencyrateid"),
          subtotal = row[Option[BigDecimal]]("subtotal"),
          taxamt = row[Option[BigDecimal]]("taxamt"),
          freight = row[Option[BigDecimal]]("freight"),
          totaldue = row[Option[BigDecimal]]("totaldue"),
          comment = row[Option[/* max 128 chars */ String]]("comment"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
  implicit val oFormat: OFormat[SohViewRow] = new OFormat[SohViewRow]{
    override def writes(o: SohViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "salesorderid" -> o.salesorderid,
        "revisionnumber" -> o.revisionnumber,
        "orderdate" -> o.orderdate,
        "duedate" -> o.duedate,
        "shipdate" -> o.shipdate,
        "status" -> o.status,
        "onlineorderflag" -> o.onlineorderflag,
        "purchaseordernumber" -> o.purchaseordernumber,
        "accountnumber" -> o.accountnumber,
        "customerid" -> o.customerid,
        "salespersonid" -> o.salespersonid,
        "territoryid" -> o.territoryid,
        "billtoaddressid" -> o.billtoaddressid,
        "shiptoaddressid" -> o.shiptoaddressid,
        "shipmethodid" -> o.shipmethodid,
        "creditcardid" -> o.creditcardid,
        "creditcardapprovalcode" -> o.creditcardapprovalcode,
        "currencyrateid" -> o.currencyrateid,
        "subtotal" -> o.subtotal,
        "taxamt" -> o.taxamt,
        "freight" -> o.freight,
        "totaldue" -> o.totaldue,
        "comment" -> o.comment,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[SohViewRow] = {
      JsResult.fromTry(
        Try(
          SohViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            salesorderid = json.\("salesorderid").toOption.map(_.as[SalesorderheaderId]),
            revisionnumber = json.\("revisionnumber").toOption.map(_.as[Int]),
            orderdate = json.\("orderdate").toOption.map(_.as[LocalDateTime]),
            duedate = json.\("duedate").toOption.map(_.as[LocalDateTime]),
            shipdate = json.\("shipdate").toOption.map(_.as[LocalDateTime]),
            status = json.\("status").toOption.map(_.as[Int]),
            onlineorderflag = json.\("onlineorderflag").as[Flag],
            purchaseordernumber = json.\("purchaseordernumber").toOption.map(_.as[OrderNumber]),
            accountnumber = json.\("accountnumber").toOption.map(_.as[AccountNumber]),
            customerid = json.\("customerid").toOption.map(_.as[CustomerId]),
            salespersonid = json.\("salespersonid").toOption.map(_.as[BusinessentityId]),
            territoryid = json.\("territoryid").toOption.map(_.as[SalesterritoryId]),
            billtoaddressid = json.\("billtoaddressid").toOption.map(_.as[AddressId]),
            shiptoaddressid = json.\("shiptoaddressid").toOption.map(_.as[AddressId]),
            shipmethodid = json.\("shipmethodid").toOption.map(_.as[ShipmethodId]),
            creditcardid = json.\("creditcardid").toOption.map(_.as[CreditcardId]),
            creditcardapprovalcode = json.\("creditcardapprovalcode").toOption.map(_.as[/* max 15 chars */ String]),
            currencyrateid = json.\("currencyrateid").toOption.map(_.as[CurrencyrateId]),
            subtotal = json.\("subtotal").toOption.map(_.as[BigDecimal]),
            taxamt = json.\("taxamt").toOption.map(_.as[BigDecimal]),
            freight = json.\("freight").toOption.map(_.as[BigDecimal]),
            totaldue = json.\("totaldue").toOption.map(_.as[BigDecimal]),
            comment = json.\("comment").toOption.map(_.as[/* max 128 chars */ String]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
