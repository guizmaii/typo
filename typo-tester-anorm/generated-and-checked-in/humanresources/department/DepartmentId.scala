/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package department

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `humanresources.department` */
case class DepartmentId(value: Int) extends AnyVal
object DepartmentId {
  implicit lazy val arrayColumn: Column[Array[DepartmentId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[DepartmentId]] = implicitly[ToStatement[Array[Int]]].contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[DepartmentId, Int] = Bijection[DepartmentId, Int](_.value)(DepartmentId.apply)
  implicit lazy val column: Column[DepartmentId] = implicitly[Column[Int]].map(DepartmentId.apply)
  implicit lazy val ordering: Ordering[DepartmentId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[DepartmentId] = new ParameterMetaData[DepartmentId] {
    override def sqlType: String = implicitly[ParameterMetaData[Int]].sqlType
    override def jdbcType: Int = implicitly[ParameterMetaData[Int]].jdbcType
  }
  implicit lazy val reads: Reads[DepartmentId] = Reads.IntReads.map(DepartmentId.apply)
  implicit lazy val toStatement: ToStatement[DepartmentId] = implicitly[ToStatement[Int]].contramap(_.value)
  implicit lazy val writes: Writes[DepartmentId] = Writes.IntWrites.contramap(_.value)
}
