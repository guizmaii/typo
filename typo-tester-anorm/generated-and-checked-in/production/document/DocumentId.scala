/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `production.document` */
case class DocumentId(value: String) extends AnyVal
object DocumentId {
  implicit lazy val arrayToStatement: ToStatement[Array[DocumentId]] = implicitly[ToStatement[Array[String]]].contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[DocumentId, String] = Bijection[DocumentId, String](_.value)(DocumentId.apply)
  implicit lazy val column: Column[DocumentId] = implicitly[Column[String]].map(DocumentId.apply)
  implicit lazy val ordering: Ordering[DocumentId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[DocumentId] = new ParameterMetaData[DocumentId] {
    override def sqlType: String = implicitly[ParameterMetaData[String]].sqlType
    override def jdbcType: Int = implicitly[ParameterMetaData[String]].jdbcType
  }
  implicit lazy val reads: Reads[DocumentId] = Reads.StringReads.map(DocumentId.apply)
  implicit lazy val toStatement: ToStatement[DocumentId] = implicitly[ToStatement[String]].contramap(_.value)
  implicit lazy val writes: Writes[DocumentId] = Writes.StringWrites.contramap(_.value)
}
