/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_dict

import anorm.ParameterMetaData
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgTsDictRepoImpl extends PgTsDictRepo {
  override def delete(oid: PgTsDictId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_ts_dict where oid = ${ParameterValue(oid, null, PgTsDictId.toStatement)}".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgTsDictFields, PgTsDictRow] = {
    DeleteBuilder("pg_catalog.pg_ts_dict", PgTsDictFields)
  }
  override def insert(unsaved: PgTsDictRow)(implicit c: Connection): PgTsDictRow = {
    SQL"""insert into pg_catalog.pg_ts_dict(oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption)
          values (${ParameterValue(unsaved.oid, null, PgTsDictId.toStatement)}::oid, ${ParameterValue(unsaved.dictname, null, ToStatement.stringToStatement)}::name, ${ParameterValue(unsaved.dictnamespace, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.dictowner, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.dicttemplate, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.dictinitoption, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))})
          returning oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption
       """
      .executeInsert(PgTsDictRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgTsDictFields, PgTsDictRow] = {
    SelectBuilderSql("pg_catalog.pg_ts_dict", PgTsDictFields, PgTsDictRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgTsDictRow] = {
    SQL"""select oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption
          from pg_catalog.pg_ts_dict
       """.as(PgTsDictRow.rowParser(1).*)
  }
  override def selectById(oid: PgTsDictId)(implicit c: Connection): Option[PgTsDictRow] = {
    SQL"""select oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption
          from pg_catalog.pg_ts_dict
          where oid = ${ParameterValue(oid, null, PgTsDictId.toStatement)}
       """.as(PgTsDictRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgTsDictId])(implicit c: Connection): List[PgTsDictRow] = {
    SQL"""select oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption
          from pg_catalog.pg_ts_dict
          where oid = ANY(${oids})
       """.as(PgTsDictRow.rowParser(1).*)
    
  }
  override def selectByUnique(dictname: String, dictnamespace: /* oid */ Long)(implicit c: Connection): Option[PgTsDictRow] = {
    SQL"""select dictname, dictnamespace
          from pg_catalog.pg_ts_dict
          where dictname = ${ParameterValue(dictname, null, ToStatement.stringToStatement)} AND dictnamespace = ${ParameterValue(dictnamespace, null, ToStatement.longToStatement)}
       """.as(PgTsDictRow.rowParser(1).singleOpt)
    
  }
  override def update(row: PgTsDictRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_ts_dict
          set dictname = ${ParameterValue(row.dictname, null, ToStatement.stringToStatement)}::name,
              dictnamespace = ${ParameterValue(row.dictnamespace, null, ToStatement.longToStatement)}::oid,
              dictowner = ${ParameterValue(row.dictowner, null, ToStatement.longToStatement)}::oid,
              dicttemplate = ${ParameterValue(row.dicttemplate, null, ToStatement.longToStatement)}::oid,
              dictinitoption = ${ParameterValue(row.dictinitoption, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}
          where oid = ${ParameterValue(oid, null, PgTsDictId.toStatement)}
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgTsDictFields, PgTsDictRow] = {
    UpdateBuilder("pg_catalog.pg_ts_dict", PgTsDictFields, PgTsDictRow.rowParser)
  }
  override def upsert(unsaved: PgTsDictRow)(implicit c: Connection): PgTsDictRow = {
    SQL"""insert into pg_catalog.pg_ts_dict(oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption)
          values (
            ${ParameterValue(unsaved.oid, null, PgTsDictId.toStatement)}::oid,
            ${ParameterValue(unsaved.dictname, null, ToStatement.stringToStatement)}::name,
            ${ParameterValue(unsaved.dictnamespace, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.dictowner, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.dicttemplate, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.dictinitoption, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}
          )
          on conflict (oid)
          do update set
            dictname = EXCLUDED.dictname,
            dictnamespace = EXCLUDED.dictnamespace,
            dictowner = EXCLUDED.dictowner,
            dicttemplate = EXCLUDED.dicttemplate,
            dictinitoption = EXCLUDED.dictinitoption
          returning oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption
       """
      .executeInsert(PgTsDictRow.rowParser(1).single)
    
  }
}
