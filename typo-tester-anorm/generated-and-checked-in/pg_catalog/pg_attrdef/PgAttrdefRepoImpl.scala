/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attrdef

import adventureworks.TypoPgNodeTree
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgAttrdefRepoImpl extends PgAttrdefRepo {
  override def delete(oid: PgAttrdefId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_attrdef where oid = ${ParameterValue(oid, null, PgAttrdefId.toStatement)}".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgAttrdefFields, PgAttrdefRow] = {
    DeleteBuilder("pg_catalog.pg_attrdef", PgAttrdefFields)
  }
  override def insert(unsaved: PgAttrdefRow)(implicit c: Connection): PgAttrdefRow = {
    SQL"""insert into pg_catalog.pg_attrdef(oid, adrelid, adnum, adbin)
          values (${ParameterValue(unsaved.oid, null, PgAttrdefId.toStatement)}::oid, ${ParameterValue(unsaved.adrelid, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.adnum, null, ToStatement.intToStatement)}::int2, ${ParameterValue(unsaved.adbin, null, TypoPgNodeTree.toStatement)}::pg_node_tree)
          returning oid, adrelid, adnum, adbin
       """
      .executeInsert(PgAttrdefRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgAttrdefFields, PgAttrdefRow] = {
    SelectBuilderSql("pg_catalog.pg_attrdef", PgAttrdefFields, PgAttrdefRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgAttrdefRow] = {
    SQL"""select oid, adrelid, adnum, adbin
          from pg_catalog.pg_attrdef
       """.as(PgAttrdefRow.rowParser(1).*)
  }
  override def selectById(oid: PgAttrdefId)(implicit c: Connection): Option[PgAttrdefRow] = {
    SQL"""select oid, adrelid, adnum, adbin
          from pg_catalog.pg_attrdef
          where oid = ${ParameterValue(oid, null, PgAttrdefId.toStatement)}
       """.as(PgAttrdefRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgAttrdefId])(implicit c: Connection): List[PgAttrdefRow] = {
    SQL"""select oid, adrelid, adnum, adbin
          from pg_catalog.pg_attrdef
          where oid = ANY(${oids})
       """.as(PgAttrdefRow.rowParser(1).*)
    
  }
  override def update(row: PgAttrdefRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_attrdef
          set adrelid = ${ParameterValue(row.adrelid, null, ToStatement.longToStatement)}::oid,
              adnum = ${ParameterValue(row.adnum, null, ToStatement.intToStatement)}::int2,
              adbin = ${ParameterValue(row.adbin, null, TypoPgNodeTree.toStatement)}::pg_node_tree
          where oid = ${ParameterValue(oid, null, PgAttrdefId.toStatement)}
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgAttrdefFields, PgAttrdefRow] = {
    UpdateBuilder("pg_catalog.pg_attrdef", PgAttrdefFields, PgAttrdefRow.rowParser)
  }
  override def upsert(unsaved: PgAttrdefRow)(implicit c: Connection): PgAttrdefRow = {
    SQL"""insert into pg_catalog.pg_attrdef(oid, adrelid, adnum, adbin)
          values (
            ${ParameterValue(unsaved.oid, null, PgAttrdefId.toStatement)}::oid,
            ${ParameterValue(unsaved.adrelid, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.adnum, null, ToStatement.intToStatement)}::int2,
            ${ParameterValue(unsaved.adbin, null, TypoPgNodeTree.toStatement)}::pg_node_tree
          )
          on conflict (oid)
          do update set
            adrelid = EXCLUDED.adrelid,
            adnum = EXCLUDED.adnum,
            adbin = EXCLUDED.adbin
          returning oid, adrelid, adnum, adbin
       """
      .executeInsert(PgAttrdefRow.rowParser(1).single)
    
  }
}
