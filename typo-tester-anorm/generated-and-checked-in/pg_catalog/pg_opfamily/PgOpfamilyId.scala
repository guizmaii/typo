/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opfamily

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `pg_catalog.pg_opfamily` */
case class PgOpfamilyId(value: /* oid */ Long) extends AnyVal
object PgOpfamilyId {
  implicit lazy val arrayColumn: Column[Array[PgOpfamilyId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[PgOpfamilyId]] = adventureworks.LongArrayToStatement.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[PgOpfamilyId, /* oid */ Long] = Bijection[PgOpfamilyId, /* oid */ Long](_.value)(PgOpfamilyId.apply)
  implicit lazy val column: Column[PgOpfamilyId] = Column.columnToLong.map(PgOpfamilyId.apply)
  implicit lazy val ordering: Ordering[PgOpfamilyId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[PgOpfamilyId] = new ParameterMetaData[PgOpfamilyId] {
    override def sqlType: String = ParameterMetaData.LongParameterMetaData.sqlType
    override def jdbcType: Int = ParameterMetaData.LongParameterMetaData.jdbcType
  }
  implicit lazy val reads: Reads[PgOpfamilyId] = Reads.LongReads.map(PgOpfamilyId.apply)
  implicit lazy val toStatement: ToStatement[PgOpfamilyId] = ToStatement.longToStatement.contramap(_.value)
  implicit lazy val writes: Writes[PgOpfamilyId] = Writes.LongWrites.contramap(_.value)
}
