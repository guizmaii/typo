/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_trigger

import adventureworks.TypoInt2Vector
import adventureworks.TypoPgNodeTree
import anorm.ParameterMetaData
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgTriggerRepoImpl extends PgTriggerRepo {
  override def delete(oid: PgTriggerId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_trigger where oid = ${ParameterValue(oid, null, PgTriggerId.toStatement)}".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgTriggerFields, PgTriggerRow] = {
    DeleteBuilder("pg_catalog.pg_trigger", PgTriggerFields)
  }
  override def insert(unsaved: PgTriggerRow)(implicit c: Connection): PgTriggerRow = {
    SQL"""insert into pg_catalog.pg_trigger(oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable)
          values (${ParameterValue(unsaved.oid, null, PgTriggerId.toStatement)}::oid, ${ParameterValue(unsaved.tgrelid, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.tgparentid, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.tgname, null, ToStatement.stringToStatement)}::name, ${ParameterValue(unsaved.tgfoid, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.tgtype, null, ToStatement.intToStatement)}::int2, ${ParameterValue(unsaved.tgenabled, null, ToStatement.stringToStatement)}::char, ${ParameterValue(unsaved.tgisinternal, null, ToStatement.booleanToStatement)}, ${ParameterValue(unsaved.tgconstrrelid, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.tgconstrindid, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.tgconstraint, null, ToStatement.longToStatement)}::oid, ${ParameterValue(unsaved.tgdeferrable, null, ToStatement.booleanToStatement)}, ${ParameterValue(unsaved.tginitdeferred, null, ToStatement.booleanToStatement)}, ${ParameterValue(unsaved.tgnargs, null, ToStatement.intToStatement)}::int2, ${ParameterValue(unsaved.tgattr, null, TypoInt2Vector.toStatement)}::int2vector, ${ParameterValue(unsaved.tgargs, null, ToStatement.byteArrayToStatement)}::bytea, ${ParameterValue(unsaved.tgqual, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree, ${ParameterValue(unsaved.tgoldtable, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}::name, ${ParameterValue(unsaved.tgnewtable, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}::name)
          returning oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
       """
      .executeInsert(PgTriggerRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgTriggerFields, PgTriggerRow] = {
    SelectBuilderSql("pg_catalog.pg_trigger", PgTriggerFields, PgTriggerRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgTriggerRow] = {
    SQL"""select oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
          from pg_catalog.pg_trigger
       """.as(PgTriggerRow.rowParser(1).*)
  }
  override def selectById(oid: PgTriggerId)(implicit c: Connection): Option[PgTriggerRow] = {
    SQL"""select oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
          from pg_catalog.pg_trigger
          where oid = ${ParameterValue(oid, null, PgTriggerId.toStatement)}
       """.as(PgTriggerRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgTriggerId])(implicit c: Connection): List[PgTriggerRow] = {
    SQL"""select oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
          from pg_catalog.pg_trigger
          where oid = ANY(${oids})
       """.as(PgTriggerRow.rowParser(1).*)
    
  }
  override def selectByUnique(tgrelid: /* oid */ Long, tgname: String)(implicit c: Connection): Option[PgTriggerRow] = {
    SQL"""select tgrelid, tgname
          from pg_catalog.pg_trigger
          where tgrelid = ${ParameterValue(tgrelid, null, ToStatement.longToStatement)} AND tgname = ${ParameterValue(tgname, null, ToStatement.stringToStatement)}
       """.as(PgTriggerRow.rowParser(1).singleOpt)
    
  }
  override def update(row: PgTriggerRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_trigger
          set tgrelid = ${ParameterValue(row.tgrelid, null, ToStatement.longToStatement)}::oid,
              tgparentid = ${ParameterValue(row.tgparentid, null, ToStatement.longToStatement)}::oid,
              tgname = ${ParameterValue(row.tgname, null, ToStatement.stringToStatement)}::name,
              tgfoid = ${ParameterValue(row.tgfoid, null, ToStatement.longToStatement)}::oid,
              tgtype = ${ParameterValue(row.tgtype, null, ToStatement.intToStatement)}::int2,
              tgenabled = ${ParameterValue(row.tgenabled, null, ToStatement.stringToStatement)}::char,
              tgisinternal = ${ParameterValue(row.tgisinternal, null, ToStatement.booleanToStatement)},
              tgconstrrelid = ${ParameterValue(row.tgconstrrelid, null, ToStatement.longToStatement)}::oid,
              tgconstrindid = ${ParameterValue(row.tgconstrindid, null, ToStatement.longToStatement)}::oid,
              tgconstraint = ${ParameterValue(row.tgconstraint, null, ToStatement.longToStatement)}::oid,
              tgdeferrable = ${ParameterValue(row.tgdeferrable, null, ToStatement.booleanToStatement)},
              tginitdeferred = ${ParameterValue(row.tginitdeferred, null, ToStatement.booleanToStatement)},
              tgnargs = ${ParameterValue(row.tgnargs, null, ToStatement.intToStatement)}::int2,
              tgattr = ${ParameterValue(row.tgattr, null, TypoInt2Vector.toStatement)}::int2vector,
              tgargs = ${ParameterValue(row.tgargs, null, ToStatement.byteArrayToStatement)}::bytea,
              tgqual = ${ParameterValue(row.tgqual, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree,
              tgoldtable = ${ParameterValue(row.tgoldtable, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}::name,
              tgnewtable = ${ParameterValue(row.tgnewtable, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}::name
          where oid = ${ParameterValue(oid, null, PgTriggerId.toStatement)}
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgTriggerFields, PgTriggerRow] = {
    UpdateBuilder("pg_catalog.pg_trigger", PgTriggerFields, PgTriggerRow.rowParser)
  }
  override def upsert(unsaved: PgTriggerRow)(implicit c: Connection): PgTriggerRow = {
    SQL"""insert into pg_catalog.pg_trigger(oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable)
          values (
            ${ParameterValue(unsaved.oid, null, PgTriggerId.toStatement)}::oid,
            ${ParameterValue(unsaved.tgrelid, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.tgparentid, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.tgname, null, ToStatement.stringToStatement)}::name,
            ${ParameterValue(unsaved.tgfoid, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.tgtype, null, ToStatement.intToStatement)}::int2,
            ${ParameterValue(unsaved.tgenabled, null, ToStatement.stringToStatement)}::char,
            ${ParameterValue(unsaved.tgisinternal, null, ToStatement.booleanToStatement)},
            ${ParameterValue(unsaved.tgconstrrelid, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.tgconstrindid, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.tgconstraint, null, ToStatement.longToStatement)}::oid,
            ${ParameterValue(unsaved.tgdeferrable, null, ToStatement.booleanToStatement)},
            ${ParameterValue(unsaved.tginitdeferred, null, ToStatement.booleanToStatement)},
            ${ParameterValue(unsaved.tgnargs, null, ToStatement.intToStatement)}::int2,
            ${ParameterValue(unsaved.tgattr, null, TypoInt2Vector.toStatement)}::int2vector,
            ${ParameterValue(unsaved.tgargs, null, ToStatement.byteArrayToStatement)}::bytea,
            ${ParameterValue(unsaved.tgqual, null, ToStatement.optionToStatement(TypoPgNodeTree.toStatement, TypoPgNodeTree.parameterMetadata))}::pg_node_tree,
            ${ParameterValue(unsaved.tgoldtable, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}::name,
            ${ParameterValue(unsaved.tgnewtable, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}::name
          )
          on conflict (oid)
          do update set
            tgrelid = EXCLUDED.tgrelid,
            tgparentid = EXCLUDED.tgparentid,
            tgname = EXCLUDED.tgname,
            tgfoid = EXCLUDED.tgfoid,
            tgtype = EXCLUDED.tgtype,
            tgenabled = EXCLUDED.tgenabled,
            tgisinternal = EXCLUDED.tgisinternal,
            tgconstrrelid = EXCLUDED.tgconstrrelid,
            tgconstrindid = EXCLUDED.tgconstrindid,
            tgconstraint = EXCLUDED.tgconstraint,
            tgdeferrable = EXCLUDED.tgdeferrable,
            tginitdeferred = EXCLUDED.tginitdeferred,
            tgnargs = EXCLUDED.tgnargs,
            tgattr = EXCLUDED.tgattr,
            tgargs = EXCLUDED.tgargs,
            tgqual = EXCLUDED.tgqual,
            tgoldtable = EXCLUDED.tgoldtable,
            tgnewtable = EXCLUDED.tgnewtable
          returning oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
       """
      .executeInsert(PgTriggerRow.rowParser(1).single)
    
  }
}
