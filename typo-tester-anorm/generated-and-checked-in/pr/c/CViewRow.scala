/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package c

import adventureworks.production.culture.CultureId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class CViewRow(
  id: Option[/* bpchar */ String],
  /** Points to [[production.culture.CultureRow.cultureid]] */
  cultureid: Option[CultureId],
  /** Points to [[production.culture.CultureRow.name]] */
  name: Option[Name],
  /** Points to [[production.culture.CultureRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object CViewRow {
  val rowParser: RowParser[CViewRow] =
    RowParser[CViewRow] { row =>
      Success(
        CViewRow(
          id = row[Option[/* bpchar */ String]]("id"),
          cultureid = row[Option[CultureId]]("cultureid"),
          name = row[Option[Name]]("name"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
  implicit val oFormat: OFormat[CViewRow] = new OFormat[CViewRow]{
    override def writes(o: CViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "cultureid" -> o.cultureid,
        "name" -> o.name,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[CViewRow] = {
      JsResult.fromTry(
        Try(
          CViewRow(
            id = json.\("id").toOption.map(_.as[/* bpchar */ String]),
            cultureid = json.\("cultureid").toOption.map(_.as[CultureId]),
            name = json.\("name").toOption.map(_.as[Name]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
