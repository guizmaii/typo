/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productproductphoto

import adventureworks.production.product.ProductId
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.public.Flag
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime

case class ProductproductphotoRow(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
      Points to [[productphoto.ProductphotoRow.productphotoid]] */
  productphotoid: ProductphotoId,
  /** 0 = Photo is not the principal image. 1 = Photo is the principal image. */
  primary: Flag,
  modifieddate: LocalDateTime
){
   val compositeId: ProductproductphotoId = ProductproductphotoId(productid, productphotoid)
 }

object ProductproductphotoRow {
  implicit val decoder: Decoder[ProductproductphotoRow] =
    (c: HCursor) =>
      for {
        productid <- c.downField("productid").as[ProductId]
        productphotoid <- c.downField("productphotoid").as[ProductphotoId]
        primary <- c.downField("primary").as[Flag]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield ProductproductphotoRow(productid, productphotoid, primary, modifieddate)
  implicit val encoder: Encoder[ProductproductphotoRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productid" := row.productid,
        "productphotoid" := row.productphotoid,
        "primary" := row.primary,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[ProductproductphotoRow] =
    new Read[ProductproductphotoRow](
      gets = List(
        (Get[ProductId], Nullability.NoNulls),
        (Get[ProductphotoId], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductproductphotoRow(
        productid = Get[ProductId].unsafeGetNonNullable(rs, i + 0),
        productphotoid = Get[ProductphotoId].unsafeGetNonNullable(rs, i + 1),
        primary = Get[Flag].unsafeGetNonNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
