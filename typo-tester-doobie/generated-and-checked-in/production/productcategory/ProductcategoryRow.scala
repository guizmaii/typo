/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productcategory

import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

case class ProductcategoryRow(
  /** Primary key for ProductCategory records. */
  productcategoryid: ProductcategoryId,
  /** Category description. */
  name: Name,
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object ProductcategoryRow {
  implicit val decoder: Decoder[ProductcategoryRow] =
    (c: HCursor) =>
      for {
        productcategoryid <- c.downField("productcategoryid").as[ProductcategoryId]
        name <- c.downField("name").as[Name]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield ProductcategoryRow(productcategoryid, name, rowguid, modifieddate)
  implicit val encoder: Encoder[ProductcategoryRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productcategoryid" := row.productcategoryid,
        "name" := row.name,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[ProductcategoryRow] =
    new Read[ProductcategoryRow](
      gets = List(
        (Get[ProductcategoryId], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductcategoryRow(
        productcategoryid = Get[ProductcategoryId].unsafeGetNonNullable(rs, i + 0),
        name = Get[Name].unsafeGetNonNullable(rs, i + 1),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
