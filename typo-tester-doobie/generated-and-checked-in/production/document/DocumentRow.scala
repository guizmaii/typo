/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

case class DocumentRow(
  /** Title of the document. */
  title: /* max 50 chars */ String,
  /** Employee who controls the document.  Foreign key to Employee.BusinessEntityID
      Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  owner: BusinessentityId,
  /** 0 = This is a folder, 1 = This is a document. */
  folderflag: Flag,
  /** File name of the document */
  filename: /* max 400 chars */ String,
  /** File extension indicating the document type. For example, .doc or .txt. */
  fileextension: Option[/* max 8 chars */ String],
  /** Revision number of the document. */
  revision: /* bpchar */ String,
  /** Engineering change approval number. */
  changenumber: Int,
  /** 1 = Pending approval, 2 = Approved, 3 = Obsolete */
  status: Int,
  /** Document abstract. */
  documentsummary: Option[String],
  /** Complete document. */
  document: Option[Array[Byte]],
  /** ROWGUIDCOL number uniquely identifying the record. Required for FileStream. */
  rowguid: UUID,
  modifieddate: LocalDateTime,
  /** Primary key for Document records. */
  documentnode: DocumentId
)

object DocumentRow {
  implicit val decoder: Decoder[DocumentRow] =
    (c: HCursor) =>
      for {
        title <- c.downField("title").as[/* max 50 chars */ String]
        owner <- c.downField("owner").as[BusinessentityId]
        folderflag <- c.downField("folderflag").as[Flag]
        filename <- c.downField("filename").as[/* max 400 chars */ String]
        fileextension <- c.downField("fileextension").as[Option[/* max 8 chars */ String]]
        revision <- c.downField("revision").as[/* bpchar */ String]
        changenumber <- c.downField("changenumber").as[Int]
        status <- c.downField("status").as[Int]
        documentsummary <- c.downField("documentsummary").as[Option[String]]
        document <- c.downField("document").as[Option[Array[Byte]]]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
        documentnode <- c.downField("documentnode").as[DocumentId]
      } yield DocumentRow(title, owner, folderflag, filename, fileextension, revision, changenumber, status, documentsummary, document, rowguid, modifieddate, documentnode)
  implicit val encoder: Encoder[DocumentRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "title" := row.title,
        "owner" := row.owner,
        "folderflag" := row.folderflag,
        "filename" := row.filename,
        "fileextension" := row.fileextension,
        "revision" := row.revision,
        "changenumber" := row.changenumber,
        "status" := row.status,
        "documentsummary" := row.documentsummary,
        "document" := row.document,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate,
        "documentnode" := row.documentnode
      )}
  implicit val read: Read[DocumentRow] =
    new Read[DocumentRow](
      gets = List(
        (Get[/* max 50 chars */ String], Nullability.NoNulls),
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[/* max 400 chars */ String], Nullability.NoNulls),
        (Get[/* max 8 chars */ String], Nullability.Nullable),
        (Get[/* bpchar */ String], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[Array[Byte]], Nullability.Nullable),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[DocumentId], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => DocumentRow(
        title = Get[/* max 50 chars */ String].unsafeGetNonNullable(rs, i + 0),
        owner = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 1),
        folderflag = Get[Flag].unsafeGetNonNullable(rs, i + 2),
        filename = Get[/* max 400 chars */ String].unsafeGetNonNullable(rs, i + 3),
        fileextension = Get[/* max 8 chars */ String].unsafeGetNullable(rs, i + 4),
        revision = Get[/* bpchar */ String].unsafeGetNonNullable(rs, i + 5),
        changenumber = Get[Int].unsafeGetNonNullable(rs, i + 6),
        status = Get[Int].unsafeGetNonNullable(rs, i + 7),
        documentsummary = Get[String].unsafeGetNullable(rs, i + 8),
        document = Get[Array[Byte]].unsafeGetNullable(rs, i + 9),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 10),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 11),
        documentnode = Get[DocumentId].unsafeGetNonNullable(rs, i + 12)
      )
    )
  

}
