/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productphoto

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime

case class ProductphotoRow(
  /** Primary key for ProductPhoto records. */
  productphotoid: ProductphotoId,
  /** Small image of the product. */
  thumbnailphoto: Option[Array[Byte]],
  /** Small image file name. */
  thumbnailphotofilename: Option[/* max 50 chars */ String],
  /** Large image of the product. */
  largephoto: Option[Array[Byte]],
  /** Large image file name. */
  largephotofilename: Option[/* max 50 chars */ String],
  modifieddate: LocalDateTime
)

object ProductphotoRow {
  implicit val decoder: Decoder[ProductphotoRow] =
    (c: HCursor) =>
      for {
        productphotoid <- c.downField("productphotoid").as[ProductphotoId]
        thumbnailphoto <- c.downField("thumbnailphoto").as[Option[Array[Byte]]]
        thumbnailphotofilename <- c.downField("thumbnailphotofilename").as[Option[/* max 50 chars */ String]]
        largephoto <- c.downField("largephoto").as[Option[Array[Byte]]]
        largephotofilename <- c.downField("largephotofilename").as[Option[/* max 50 chars */ String]]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield ProductphotoRow(productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate)
  implicit val encoder: Encoder[ProductphotoRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productphotoid" := row.productphotoid,
        "thumbnailphoto" := row.thumbnailphoto,
        "thumbnailphotofilename" := row.thumbnailphotofilename,
        "largephoto" := row.largephoto,
        "largephotofilename" := row.largephotofilename,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[ProductphotoRow] =
    new Read[ProductphotoRow](
      gets = List(
        (Get[ProductphotoId], Nullability.NoNulls),
        (Get[Array[Byte]], Nullability.Nullable),
        (Get[/* max 50 chars */ String], Nullability.Nullable),
        (Get[Array[Byte]], Nullability.Nullable),
        (Get[/* max 50 chars */ String], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductphotoRow(
        productphotoid = Get[ProductphotoId].unsafeGetNonNullable(rs, i + 0),
        thumbnailphoto = Get[Array[Byte]].unsafeGetNullable(rs, i + 1),
        thumbnailphotofilename = Get[/* max 50 chars */ String].unsafeGetNullable(rs, i + 2),
        largephoto = Get[Array[Byte]].unsafeGetNullable(rs, i + 3),
        largephotofilename = Get[/* max 50 chars */ String].unsafeGetNullable(rs, i + 4),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 5)
      )
    )
  

}
