/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import org.postgresql.util.PGobject
import typo.dsl.Bijection

/** xid (via PGObject) */
case class TypoXid(value: String)

object TypoXid {
  implicit lazy val arrayGet: Get[Array[TypoXid]] = Get.Advanced.array[AnyRef](NonEmptyList.one("_xid"))
    .map(_.map(v => TypoXid(v.asInstanceOf[String])))
  implicit lazy val arrayPut: Put[Array[TypoXid]] = Put.Advanced.array[AnyRef](NonEmptyList.one("_xid"), "xid")
    .contramap(_.map(v => {
                            val obj = new PGobject
                            obj.setType("xid")
                            obj.setValue(v.value)
                            obj
                          }))
  implicit lazy val bijection: Bijection[TypoXid, String] = Bijection[TypoXid, String](_.value)(TypoXid.apply)
  implicit lazy val decoder: Decoder[TypoXid] = Decoder.decodeString.map(TypoXid.apply)
  implicit lazy val encoder: Encoder[TypoXid] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[TypoXid] = Get.Advanced.other[PGobject](NonEmptyList.one("xid"))
    .map(v => TypoXid(v.getValue))
  implicit lazy val ordering: Ordering[TypoXid] = Ordering.by(_.value)
  implicit lazy val put: Put[TypoXid] = Put.Advanced.other[PGobject](NonEmptyList.one("xid")).contramap(v => {
                                                                         val obj = new PGobject
                                                                         obj.setType("xid")
                                                                         obj.setValue(v.value)
                                                                         obj
                                                                       })
}
