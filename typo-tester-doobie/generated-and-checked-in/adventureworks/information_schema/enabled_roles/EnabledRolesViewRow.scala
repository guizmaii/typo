/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package enabled_roles

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class EnabledRolesViewRow(
  roleName: /* nullability unknown */ Option[String]
)

object EnabledRolesViewRow {
  implicit lazy val decoder: Decoder[EnabledRolesViewRow] = Decoder.forProduct1[EnabledRolesViewRow, /* nullability unknown */ Option[String]]("role_name")(EnabledRolesViewRow.apply)(Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[EnabledRolesViewRow] = Encoder.forProduct1[EnabledRolesViewRow, /* nullability unknown */ Option[String]]("role_name")(x => (x.roleName))(Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[EnabledRolesViewRow] = new Read[EnabledRolesViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => EnabledRolesViewRow(
      roleName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0)
    )
  )
}
