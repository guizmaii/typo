/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package udt_privileges

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.Structure.Relation

class UdtPrivilegesViewStructure[Row](val prefix: Option[String], val extract: Row => UdtPrivilegesViewRow, val merge: (Row, UdtPrivilegesViewRow) => Row)
  extends Relation[UdtPrivilegesViewFields, UdtPrivilegesViewRow, Row]
    with UdtPrivilegesViewFields[Row] { outer =>

  override val grantor = new Field[SqlIdentifier, Row](prefix, "grantor", None, Some("name"))(x => extract(x).grantor, (row, value) => merge(row, extract(row).copy(grantor = value)))
  override val grantee = new Field[SqlIdentifier, Row](prefix, "grantee", None, Some("name"))(x => extract(x).grantee, (row, value) => merge(row, extract(row).copy(grantee = value)))
  override val udtCatalog = new Field[SqlIdentifier, Row](prefix, "udt_catalog", None, Some("name"))(x => extract(x).udtCatalog, (row, value) => merge(row, extract(row).copy(udtCatalog = value)))
  override val udtSchema = new Field[SqlIdentifier, Row](prefix, "udt_schema", None, Some("name"))(x => extract(x).udtSchema, (row, value) => merge(row, extract(row).copy(udtSchema = value)))
  override val udtName = new Field[SqlIdentifier, Row](prefix, "udt_name", None, Some("name"))(x => extract(x).udtName, (row, value) => merge(row, extract(row).copy(udtName = value)))
  override val privilegeType = new Field[CharacterData, Row](prefix, "privilege_type", None, Some("varchar"))(x => extract(x).privilegeType, (row, value) => merge(row, extract(row).copy(privilegeType = value)))
  override val isGrantable = new Field[YesOrNo, Row](prefix, "is_grantable", None, Some("varchar"))(x => extract(x).isGrantable, (row, value) => merge(row, extract(row).copy(isGrantable = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](grantor, grantee, udtCatalog, udtSchema, udtName, privilegeType, isGrantable)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => UdtPrivilegesViewRow, merge: (NewRow, UdtPrivilegesViewRow) => NewRow): UdtPrivilegesViewStructure[NewRow] =
    new UdtPrivilegesViewStructure(prefix, extract, merge)
}
