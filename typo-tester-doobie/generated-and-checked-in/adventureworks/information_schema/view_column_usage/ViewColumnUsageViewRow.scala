/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package view_column_usage

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ViewColumnUsageViewRow(
  viewCatalog: /* nullability unknown */ Option[String],
  viewSchema: /* nullability unknown */ Option[String],
  viewName: /* nullability unknown */ Option[String],
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  columnName: /* nullability unknown */ Option[String]
)

object ViewColumnUsageViewRow {
  implicit lazy val decoder: Decoder[ViewColumnUsageViewRow] = Decoder.forProduct7[ViewColumnUsageViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("view_catalog", "view_schema", "view_name", "table_catalog", "table_schema", "table_name", "column_name")(ViewColumnUsageViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[ViewColumnUsageViewRow] = Encoder.forProduct7[ViewColumnUsageViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("view_catalog", "view_schema", "view_name", "table_catalog", "table_schema", "table_name", "column_name")(x => (x.viewCatalog, x.viewSchema, x.viewName, x.tableCatalog, x.tableSchema, x.tableName, x.columnName))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[ViewColumnUsageViewRow] = new Read[ViewColumnUsageViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ViewColumnUsageViewRow(
      viewCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      viewSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      viewName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      tableCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      tableSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 4),
      tableName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      columnName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 6)
    )
  )
}
