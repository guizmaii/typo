/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_tables`

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgForeignTablesViewRow(
  foreignTableCatalog: /* nullability unknown */ Option[String],
  foreignTableSchema: /* nullability unknown */ Option[String],
  foreignTableName: /* nullability unknown */ Option[String],
  /** Points to [[pg_catalog.pg_foreign_table.PgForeignTableRow.ftoptions]] */
  ftoptions: Option[Array[String]],
  foreignServerCatalog: /* nullability unknown */ Option[String],
  foreignServerName: /* nullability unknown */ Option[String],
  authorizationIdentifier: /* nullability unknown */ Option[String]
)

object PgForeignTablesViewRow {
  implicit lazy val decoder: Decoder[PgForeignTablesViewRow] = Decoder.forProduct7[PgForeignTablesViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], Option[Array[String]], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("foreign_table_catalog", "foreign_table_schema", "foreign_table_name", "ftoptions", "foreign_server_catalog", "foreign_server_name", "authorization_identifier")(PgForeignTablesViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[PgForeignTablesViewRow] = Encoder.forProduct7[PgForeignTablesViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], Option[Array[String]], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("foreign_table_catalog", "foreign_table_schema", "foreign_table_name", "ftoptions", "foreign_server_catalog", "foreign_server_name", "authorization_identifier")(x => (x.foreignTableCatalog, x.foreignTableSchema, x.foreignTableName, x.ftoptions, x.foreignServerCatalog, x.foreignServerName, x.authorizationIdentifier))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[PgForeignTablesViewRow] = new Read[PgForeignTablesViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (adventureworks.StringArrayMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgForeignTablesViewRow(
      foreignTableCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      foreignTableSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      foreignTableName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      ftoptions = adventureworks.StringArrayMeta.get.unsafeGetNullable(rs, i + 3),
      foreignServerCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 4),
      foreignServerName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      authorizationIdentifier = Meta.StringMeta.get.unsafeGetNullable(rs, i + 6)
    )
  )
}
