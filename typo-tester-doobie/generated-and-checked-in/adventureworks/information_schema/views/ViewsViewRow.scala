/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package views

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ViewsViewRow(
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  viewDefinition: /* nullability unknown */ Option[String],
  checkOption: /* nullability unknown */ Option[String],
  isUpdatable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isInsertableInto: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTriggerUpdatable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTriggerDeletable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTriggerInsertableInto: /* nullability unknown */ Option[/* max 3 chars */ String]
)

object ViewsViewRow {
  implicit lazy val decoder: Decoder[ViewsViewRow] = Decoder.forProduct10[ViewsViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String]]("table_catalog", "table_schema", "table_name", "view_definition", "check_option", "is_updatable", "is_insertable_into", "is_trigger_updatable", "is_trigger_deletable", "is_trigger_insertable_into")(ViewsViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[ViewsViewRow] = Encoder.forProduct10[ViewsViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String], /* nullability unknown */ Option[/* max 3 chars */ String]]("table_catalog", "table_schema", "table_name", "view_definition", "check_option", "is_updatable", "is_insertable_into", "is_trigger_updatable", "is_trigger_deletable", "is_trigger_insertable_into")(x => (x.tableCatalog, x.tableSchema, x.tableName, x.viewDefinition, x.checkOption, x.isUpdatable, x.isInsertableInto, x.isTriggerUpdatable, x.isTriggerDeletable, x.isTriggerInsertableInto))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[ViewsViewRow] = new Read[ViewsViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ViewsViewRow(
      tableCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      tableSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      tableName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      viewDefinition = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      checkOption = Meta.StringMeta.get.unsafeGetNullable(rs, i + 4),
      isUpdatable = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      isInsertableInto = Meta.StringMeta.get.unsafeGetNullable(rs, i + 6),
      isTriggerUpdatable = Meta.StringMeta.get.unsafeGetNullable(rs, i + 7),
      isTriggerDeletable = Meta.StringMeta.get.unsafeGetNullable(rs, i + 8),
      isTriggerInsertableInto = Meta.StringMeta.get.unsafeGetNullable(rs, i + 9)
    )
  )
}
