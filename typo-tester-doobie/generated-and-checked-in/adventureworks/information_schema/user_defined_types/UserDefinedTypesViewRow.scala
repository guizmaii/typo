/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: SqlIdentifier,
  userDefinedTypeSchema: SqlIdentifier,
  userDefinedTypeName: SqlIdentifier,
  userDefinedTypeCategory: CharacterData,
  isInstantiable: YesOrNo,
  isFinal: YesOrNo,
  orderingForm: CharacterData,
  orderingCategory: CharacterData,
  orderingRoutineCatalog: SqlIdentifier,
  orderingRoutineSchema: SqlIdentifier,
  orderingRoutineName: SqlIdentifier,
  referenceType: CharacterData,
  dataType: CharacterData,
  characterMaximumLength: CardinalNumber,
  characterOctetLength: CardinalNumber,
  characterSetCatalog: SqlIdentifier,
  characterSetSchema: SqlIdentifier,
  characterSetName: SqlIdentifier,
  collationCatalog: SqlIdentifier,
  collationSchema: SqlIdentifier,
  collationName: SqlIdentifier,
  numericPrecision: CardinalNumber,
  numericPrecisionRadix: CardinalNumber,
  numericScale: CardinalNumber,
  datetimePrecision: CardinalNumber,
  intervalType: CharacterData,
  intervalPrecision: CardinalNumber,
  sourceDtdIdentifier: SqlIdentifier,
  refDtdIdentifier: SqlIdentifier
)

object UserDefinedTypesViewRow {
  implicit lazy val decoder: Decoder[UserDefinedTypesViewRow] = Decoder.instanceTry[UserDefinedTypesViewRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      UserDefinedTypesViewRow(
        userDefinedTypeCatalog = orThrow(c.get("user_defined_type_catalog")(SqlIdentifier.decoder)),
        userDefinedTypeSchema = orThrow(c.get("user_defined_type_schema")(SqlIdentifier.decoder)),
        userDefinedTypeName = orThrow(c.get("user_defined_type_name")(SqlIdentifier.decoder)),
        userDefinedTypeCategory = orThrow(c.get("user_defined_type_category")(CharacterData.decoder)),
        isInstantiable = orThrow(c.get("is_instantiable")(YesOrNo.decoder)),
        isFinal = orThrow(c.get("is_final")(YesOrNo.decoder)),
        orderingForm = orThrow(c.get("ordering_form")(CharacterData.decoder)),
        orderingCategory = orThrow(c.get("ordering_category")(CharacterData.decoder)),
        orderingRoutineCatalog = orThrow(c.get("ordering_routine_catalog")(SqlIdentifier.decoder)),
        orderingRoutineSchema = orThrow(c.get("ordering_routine_schema")(SqlIdentifier.decoder)),
        orderingRoutineName = orThrow(c.get("ordering_routine_name")(SqlIdentifier.decoder)),
        referenceType = orThrow(c.get("reference_type")(CharacterData.decoder)),
        dataType = orThrow(c.get("data_type")(CharacterData.decoder)),
        characterMaximumLength = orThrow(c.get("character_maximum_length")(CardinalNumber.decoder)),
        characterOctetLength = orThrow(c.get("character_octet_length")(CardinalNumber.decoder)),
        characterSetCatalog = orThrow(c.get("character_set_catalog")(SqlIdentifier.decoder)),
        characterSetSchema = orThrow(c.get("character_set_schema")(SqlIdentifier.decoder)),
        characterSetName = orThrow(c.get("character_set_name")(SqlIdentifier.decoder)),
        collationCatalog = orThrow(c.get("collation_catalog")(SqlIdentifier.decoder)),
        collationSchema = orThrow(c.get("collation_schema")(SqlIdentifier.decoder)),
        collationName = orThrow(c.get("collation_name")(SqlIdentifier.decoder)),
        numericPrecision = orThrow(c.get("numeric_precision")(CardinalNumber.decoder)),
        numericPrecisionRadix = orThrow(c.get("numeric_precision_radix")(CardinalNumber.decoder)),
        numericScale = orThrow(c.get("numeric_scale")(CardinalNumber.decoder)),
        datetimePrecision = orThrow(c.get("datetime_precision")(CardinalNumber.decoder)),
        intervalType = orThrow(c.get("interval_type")(CharacterData.decoder)),
        intervalPrecision = orThrow(c.get("interval_precision")(CardinalNumber.decoder)),
        sourceDtdIdentifier = orThrow(c.get("source_dtd_identifier")(SqlIdentifier.decoder)),
        refDtdIdentifier = orThrow(c.get("ref_dtd_identifier")(SqlIdentifier.decoder))
      )
    }
  )
  implicit lazy val encoder: Encoder[UserDefinedTypesViewRow] = Encoder[UserDefinedTypesViewRow](row =>
    Json.obj(
      "user_defined_type_catalog" -> SqlIdentifier.encoder.apply(row.userDefinedTypeCatalog),
      "user_defined_type_schema" -> SqlIdentifier.encoder.apply(row.userDefinedTypeSchema),
      "user_defined_type_name" -> SqlIdentifier.encoder.apply(row.userDefinedTypeName),
      "user_defined_type_category" -> CharacterData.encoder.apply(row.userDefinedTypeCategory),
      "is_instantiable" -> YesOrNo.encoder.apply(row.isInstantiable),
      "is_final" -> YesOrNo.encoder.apply(row.isFinal),
      "ordering_form" -> CharacterData.encoder.apply(row.orderingForm),
      "ordering_category" -> CharacterData.encoder.apply(row.orderingCategory),
      "ordering_routine_catalog" -> SqlIdentifier.encoder.apply(row.orderingRoutineCatalog),
      "ordering_routine_schema" -> SqlIdentifier.encoder.apply(row.orderingRoutineSchema),
      "ordering_routine_name" -> SqlIdentifier.encoder.apply(row.orderingRoutineName),
      "reference_type" -> CharacterData.encoder.apply(row.referenceType),
      "data_type" -> CharacterData.encoder.apply(row.dataType),
      "character_maximum_length" -> CardinalNumber.encoder.apply(row.characterMaximumLength),
      "character_octet_length" -> CardinalNumber.encoder.apply(row.characterOctetLength),
      "character_set_catalog" -> SqlIdentifier.encoder.apply(row.characterSetCatalog),
      "character_set_schema" -> SqlIdentifier.encoder.apply(row.characterSetSchema),
      "character_set_name" -> SqlIdentifier.encoder.apply(row.characterSetName),
      "collation_catalog" -> SqlIdentifier.encoder.apply(row.collationCatalog),
      "collation_schema" -> SqlIdentifier.encoder.apply(row.collationSchema),
      "collation_name" -> SqlIdentifier.encoder.apply(row.collationName),
      "numeric_precision" -> CardinalNumber.encoder.apply(row.numericPrecision),
      "numeric_precision_radix" -> CardinalNumber.encoder.apply(row.numericPrecisionRadix),
      "numeric_scale" -> CardinalNumber.encoder.apply(row.numericScale),
      "datetime_precision" -> CardinalNumber.encoder.apply(row.datetimePrecision),
      "interval_type" -> CharacterData.encoder.apply(row.intervalType),
      "interval_precision" -> CardinalNumber.encoder.apply(row.intervalPrecision),
      "source_dtd_identifier" -> SqlIdentifier.encoder.apply(row.sourceDtdIdentifier),
      "ref_dtd_identifier" -> SqlIdentifier.encoder.apply(row.refDtdIdentifier)
    )
  )
  implicit lazy val read: Read[UserDefinedTypesViewRow] = new Read[UserDefinedTypesViewRow](
    gets = List(
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (YesOrNo.get, Nullability.NoNulls),
      (YesOrNo.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => UserDefinedTypesViewRow(
      userDefinedTypeCatalog = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 0),
      userDefinedTypeSchema = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 1),
      userDefinedTypeName = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 2),
      userDefinedTypeCategory = CharacterData.get.unsafeGetNonNullable(rs, i + 3),
      isInstantiable = YesOrNo.get.unsafeGetNonNullable(rs, i + 4),
      isFinal = YesOrNo.get.unsafeGetNonNullable(rs, i + 5),
      orderingForm = CharacterData.get.unsafeGetNonNullable(rs, i + 6),
      orderingCategory = CharacterData.get.unsafeGetNonNullable(rs, i + 7),
      orderingRoutineCatalog = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 8),
      orderingRoutineSchema = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 9),
      orderingRoutineName = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 10),
      referenceType = CharacterData.get.unsafeGetNonNullable(rs, i + 11),
      dataType = CharacterData.get.unsafeGetNonNullable(rs, i + 12),
      characterMaximumLength = CardinalNumber.get.unsafeGetNonNullable(rs, i + 13),
      characterOctetLength = CardinalNumber.get.unsafeGetNonNullable(rs, i + 14),
      characterSetCatalog = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 15),
      characterSetSchema = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 16),
      characterSetName = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 17),
      collationCatalog = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 18),
      collationSchema = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 19),
      collationName = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 20),
      numericPrecision = CardinalNumber.get.unsafeGetNonNullable(rs, i + 21),
      numericPrecisionRadix = CardinalNumber.get.unsafeGetNonNullable(rs, i + 22),
      numericScale = CardinalNumber.get.unsafeGetNonNullable(rs, i + 23),
      datetimePrecision = CardinalNumber.get.unsafeGetNonNullable(rs, i + 24),
      intervalType = CharacterData.get.unsafeGetNonNullable(rs, i + 25),
      intervalPrecision = CardinalNumber.get.unsafeGetNonNullable(rs, i + 26),
      sourceDtdIdentifier = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 27),
      refDtdIdentifier = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 28)
    )
  )
}
