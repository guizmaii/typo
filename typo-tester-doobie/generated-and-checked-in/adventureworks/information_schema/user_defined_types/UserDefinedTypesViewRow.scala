/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: /* nullability unknown */ Option[String],
  userDefinedTypeSchema: /* nullability unknown */ Option[String],
  userDefinedTypeName: /* nullability unknown */ Option[String],
  userDefinedTypeCategory: /* nullability unknown */ Option[String],
  isInstantiable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isFinal: /* nullability unknown */ Option[/* max 3 chars */ String],
  orderingForm: /* nullability unknown */ Option[String],
  orderingCategory: /* nullability unknown */ Option[String],
  orderingRoutineCatalog: /* nullability unknown */ Option[String],
  orderingRoutineSchema: /* nullability unknown */ Option[String],
  orderingRoutineName: /* nullability unknown */ Option[String],
  referenceType: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[String],
  characterMaximumLength: /* nullability unknown */ Option[Int],
  characterOctetLength: /* nullability unknown */ Option[Int],
  characterSetCatalog: /* nullability unknown */ Option[String],
  characterSetSchema: /* nullability unknown */ Option[String],
  characterSetName: /* nullability unknown */ Option[String],
  collationCatalog: /* nullability unknown */ Option[String],
  collationSchema: /* nullability unknown */ Option[String],
  collationName: /* nullability unknown */ Option[String],
  numericPrecision: /* nullability unknown */ Option[Int],
  numericPrecisionRadix: /* nullability unknown */ Option[Int],
  numericScale: /* nullability unknown */ Option[Int],
  datetimePrecision: /* nullability unknown */ Option[Int],
  intervalType: /* nullability unknown */ Option[String],
  intervalPrecision: /* nullability unknown */ Option[Int],
  sourceDtdIdentifier: /* nullability unknown */ Option[String],
  refDtdIdentifier: /* nullability unknown */ Option[String]
)

object UserDefinedTypesViewRow {
  implicit lazy val decoder: Decoder[UserDefinedTypesViewRow] = Decoder.instanceTry[UserDefinedTypesViewRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      UserDefinedTypesViewRow(
        userDefinedTypeCatalog = orThrow(c.get("user_defined_type_catalog")(Decoder.decodeOption(Decoder.decodeString))),
        userDefinedTypeSchema = orThrow(c.get("user_defined_type_schema")(Decoder.decodeOption(Decoder.decodeString))),
        userDefinedTypeName = orThrow(c.get("user_defined_type_name")(Decoder.decodeOption(Decoder.decodeString))),
        userDefinedTypeCategory = orThrow(c.get("user_defined_type_category")(Decoder.decodeOption(Decoder.decodeString))),
        isInstantiable = orThrow(c.get("is_instantiable")(Decoder.decodeOption(Decoder.decodeString))),
        isFinal = orThrow(c.get("is_final")(Decoder.decodeOption(Decoder.decodeString))),
        orderingForm = orThrow(c.get("ordering_form")(Decoder.decodeOption(Decoder.decodeString))),
        orderingCategory = orThrow(c.get("ordering_category")(Decoder.decodeOption(Decoder.decodeString))),
        orderingRoutineCatalog = orThrow(c.get("ordering_routine_catalog")(Decoder.decodeOption(Decoder.decodeString))),
        orderingRoutineSchema = orThrow(c.get("ordering_routine_schema")(Decoder.decodeOption(Decoder.decodeString))),
        orderingRoutineName = orThrow(c.get("ordering_routine_name")(Decoder.decodeOption(Decoder.decodeString))),
        referenceType = orThrow(c.get("reference_type")(Decoder.decodeOption(Decoder.decodeString))),
        dataType = orThrow(c.get("data_type")(Decoder.decodeOption(Decoder.decodeString))),
        characterMaximumLength = orThrow(c.get("character_maximum_length")(Decoder.decodeOption(Decoder.decodeInt))),
        characterOctetLength = orThrow(c.get("character_octet_length")(Decoder.decodeOption(Decoder.decodeInt))),
        characterSetCatalog = orThrow(c.get("character_set_catalog")(Decoder.decodeOption(Decoder.decodeString))),
        characterSetSchema = orThrow(c.get("character_set_schema")(Decoder.decodeOption(Decoder.decodeString))),
        characterSetName = orThrow(c.get("character_set_name")(Decoder.decodeOption(Decoder.decodeString))),
        collationCatalog = orThrow(c.get("collation_catalog")(Decoder.decodeOption(Decoder.decodeString))),
        collationSchema = orThrow(c.get("collation_schema")(Decoder.decodeOption(Decoder.decodeString))),
        collationName = orThrow(c.get("collation_name")(Decoder.decodeOption(Decoder.decodeString))),
        numericPrecision = orThrow(c.get("numeric_precision")(Decoder.decodeOption(Decoder.decodeInt))),
        numericPrecisionRadix = orThrow(c.get("numeric_precision_radix")(Decoder.decodeOption(Decoder.decodeInt))),
        numericScale = orThrow(c.get("numeric_scale")(Decoder.decodeOption(Decoder.decodeInt))),
        datetimePrecision = orThrow(c.get("datetime_precision")(Decoder.decodeOption(Decoder.decodeInt))),
        intervalType = orThrow(c.get("interval_type")(Decoder.decodeOption(Decoder.decodeString))),
        intervalPrecision = orThrow(c.get("interval_precision")(Decoder.decodeOption(Decoder.decodeInt))),
        sourceDtdIdentifier = orThrow(c.get("source_dtd_identifier")(Decoder.decodeOption(Decoder.decodeString))),
        refDtdIdentifier = orThrow(c.get("ref_dtd_identifier")(Decoder.decodeOption(Decoder.decodeString)))
      )
    }
  )
  implicit lazy val encoder: Encoder[UserDefinedTypesViewRow] = Encoder[UserDefinedTypesViewRow](row =>
    Json.obj(
      "user_defined_type_catalog" -> Encoder.encodeOption(Encoder.encodeString).apply(row.userDefinedTypeCatalog),
      "user_defined_type_schema" -> Encoder.encodeOption(Encoder.encodeString).apply(row.userDefinedTypeSchema),
      "user_defined_type_name" -> Encoder.encodeOption(Encoder.encodeString).apply(row.userDefinedTypeName),
      "user_defined_type_category" -> Encoder.encodeOption(Encoder.encodeString).apply(row.userDefinedTypeCategory),
      "is_instantiable" -> Encoder.encodeOption(Encoder.encodeString).apply(row.isInstantiable),
      "is_final" -> Encoder.encodeOption(Encoder.encodeString).apply(row.isFinal),
      "ordering_form" -> Encoder.encodeOption(Encoder.encodeString).apply(row.orderingForm),
      "ordering_category" -> Encoder.encodeOption(Encoder.encodeString).apply(row.orderingCategory),
      "ordering_routine_catalog" -> Encoder.encodeOption(Encoder.encodeString).apply(row.orderingRoutineCatalog),
      "ordering_routine_schema" -> Encoder.encodeOption(Encoder.encodeString).apply(row.orderingRoutineSchema),
      "ordering_routine_name" -> Encoder.encodeOption(Encoder.encodeString).apply(row.orderingRoutineName),
      "reference_type" -> Encoder.encodeOption(Encoder.encodeString).apply(row.referenceType),
      "data_type" -> Encoder.encodeOption(Encoder.encodeString).apply(row.dataType),
      "character_maximum_length" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.characterMaximumLength),
      "character_octet_length" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.characterOctetLength),
      "character_set_catalog" -> Encoder.encodeOption(Encoder.encodeString).apply(row.characterSetCatalog),
      "character_set_schema" -> Encoder.encodeOption(Encoder.encodeString).apply(row.characterSetSchema),
      "character_set_name" -> Encoder.encodeOption(Encoder.encodeString).apply(row.characterSetName),
      "collation_catalog" -> Encoder.encodeOption(Encoder.encodeString).apply(row.collationCatalog),
      "collation_schema" -> Encoder.encodeOption(Encoder.encodeString).apply(row.collationSchema),
      "collation_name" -> Encoder.encodeOption(Encoder.encodeString).apply(row.collationName),
      "numeric_precision" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.numericPrecision),
      "numeric_precision_radix" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.numericPrecisionRadix),
      "numeric_scale" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.numericScale),
      "datetime_precision" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.datetimePrecision),
      "interval_type" -> Encoder.encodeOption(Encoder.encodeString).apply(row.intervalType),
      "interval_precision" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.intervalPrecision),
      "source_dtd_identifier" -> Encoder.encodeOption(Encoder.encodeString).apply(row.sourceDtdIdentifier),
      "ref_dtd_identifier" -> Encoder.encodeOption(Encoder.encodeString).apply(row.refDtdIdentifier)
    )
  )
  implicit lazy val read: Read[UserDefinedTypesViewRow] = new Read[UserDefinedTypesViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => UserDefinedTypesViewRow(
      userDefinedTypeCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      userDefinedTypeSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      userDefinedTypeName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      userDefinedTypeCategory = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      isInstantiable = Meta.StringMeta.get.unsafeGetNullable(rs, i + 4),
      isFinal = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      orderingForm = Meta.StringMeta.get.unsafeGetNullable(rs, i + 6),
      orderingCategory = Meta.StringMeta.get.unsafeGetNullable(rs, i + 7),
      orderingRoutineCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 8),
      orderingRoutineSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 9),
      orderingRoutineName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 10),
      referenceType = Meta.StringMeta.get.unsafeGetNullable(rs, i + 11),
      dataType = Meta.StringMeta.get.unsafeGetNullable(rs, i + 12),
      characterMaximumLength = Meta.IntMeta.get.unsafeGetNullable(rs, i + 13),
      characterOctetLength = Meta.IntMeta.get.unsafeGetNullable(rs, i + 14),
      characterSetCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 15),
      characterSetSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 16),
      characterSetName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 17),
      collationCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 18),
      collationSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 19),
      collationName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 20),
      numericPrecision = Meta.IntMeta.get.unsafeGetNullable(rs, i + 21),
      numericPrecisionRadix = Meta.IntMeta.get.unsafeGetNullable(rs, i + 22),
      numericScale = Meta.IntMeta.get.unsafeGetNullable(rs, i + 23),
      datetimePrecision = Meta.IntMeta.get.unsafeGetNullable(rs, i + 24),
      intervalType = Meta.StringMeta.get.unsafeGetNullable(rs, i + 25),
      intervalPrecision = Meta.IntMeta.get.unsafeGetNullable(rs, i + 26),
      sourceDtdIdentifier = Meta.StringMeta.get.unsafeGetNullable(rs, i + 27),
      refDtdIdentifier = Meta.StringMeta.get.unsafeGetNullable(rs, i + 28)
    )
  )
}
