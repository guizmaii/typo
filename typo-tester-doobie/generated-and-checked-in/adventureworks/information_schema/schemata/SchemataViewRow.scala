/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package schemata

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class SchemataViewRow(
  catalogName: /* nullability unknown */ Option[String],
  schemaName: /* nullability unknown */ Option[String],
  schemaOwner: /* nullability unknown */ Option[String],
  defaultCharacterSetCatalog: /* nullability unknown */ Option[String],
  defaultCharacterSetSchema: /* nullability unknown */ Option[String],
  defaultCharacterSetName: /* nullability unknown */ Option[String],
  sqlPath: /* nullability unknown */ Option[String]
)

object SchemataViewRow {
  implicit lazy val decoder: Decoder[SchemataViewRow] = Decoder.forProduct7[SchemataViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("catalog_name", "schema_name", "schema_owner", "default_character_set_catalog", "default_character_set_schema", "default_character_set_name", "sql_path")(SchemataViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[SchemataViewRow] = Encoder.forProduct7[SchemataViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("catalog_name", "schema_name", "schema_owner", "default_character_set_catalog", "default_character_set_schema", "default_character_set_name", "sql_path")(x => (x.catalogName, x.schemaName, x.schemaOwner, x.defaultCharacterSetCatalog, x.defaultCharacterSetSchema, x.defaultCharacterSetName, x.sqlPath))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[SchemataViewRow] = new Read[SchemataViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SchemataViewRow(
      catalogName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      schemaName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      schemaOwner = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      defaultCharacterSetCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      defaultCharacterSetSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 4),
      defaultCharacterSetName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      sqlPath = Meta.StringMeta.get.unsafeGetNullable(rs, i + 6)
    )
  )
}
