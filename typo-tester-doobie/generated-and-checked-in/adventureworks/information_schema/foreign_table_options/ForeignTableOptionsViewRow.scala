/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_table_options

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ForeignTableOptionsViewRow(
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableCatalog]] */
  foreignTableCatalog: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableSchema]] */
  foreignTableSchema: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableName]] */
  foreignTableName: Option[/* nullability unknown */ String],
  optionName: /* nullability unknown */ Option[String],
  optionValue: /* nullability unknown */ Option[String]
)

object ForeignTableOptionsViewRow {
  implicit lazy val decoder: Decoder[ForeignTableOptionsViewRow] = Decoder.forProduct5[ForeignTableOptionsViewRow, Option[/* nullability unknown */ String], Option[/* nullability unknown */ String], Option[/* nullability unknown */ String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("foreign_table_catalog", "foreign_table_schema", "foreign_table_name", "option_name", "option_value")(ForeignTableOptionsViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[ForeignTableOptionsViewRow] = Encoder.forProduct5[ForeignTableOptionsViewRow, Option[/* nullability unknown */ String], Option[/* nullability unknown */ String], Option[/* nullability unknown */ String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("foreign_table_catalog", "foreign_table_schema", "foreign_table_name", "option_name", "option_value")(x => (x.foreignTableCatalog, x.foreignTableSchema, x.foreignTableName, x.optionName, x.optionValue))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[ForeignTableOptionsViewRow] = new Read[ForeignTableOptionsViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ForeignTableOptionsViewRow(
      foreignTableCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      foreignTableSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      foreignTableName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      optionName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      optionValue = Meta.StringMeta.get.unsafeGetNullable(rs, i + 4)
    )
  )
}
