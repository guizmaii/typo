/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_user_mappings`

import adventureworks.information_schema.SqlIdentifier
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgUserMappingsViewRow(
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.oid]] */
  oid: /* oid */ Long,
  umoptions: Array[String],
  umuser: /* oid */ Long,
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.authorizationIdentifier]] */
  authorizationIdentifier: SqlIdentifier,
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerCatalog]] */
  foreignServerCatalog: SqlIdentifier,
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerName]] */
  foreignServerName: SqlIdentifier,
  srvowner: SqlIdentifier
)

object PgUserMappingsViewRow {
  implicit lazy val decoder: Decoder[PgUserMappingsViewRow] = Decoder.forProduct7[PgUserMappingsViewRow, /* oid */ Long, Array[String], /* oid */ Long, SqlIdentifier, SqlIdentifier, SqlIdentifier, SqlIdentifier]("oid", "umoptions", "umuser", "authorization_identifier", "foreign_server_catalog", "foreign_server_name", "srvowner")(PgUserMappingsViewRow.apply)(Decoder.decodeLong, Decoder.decodeArray[String](Decoder.decodeString, implicitly), Decoder.decodeLong, SqlIdentifier.decoder, SqlIdentifier.decoder, SqlIdentifier.decoder, SqlIdentifier.decoder)
  implicit lazy val encoder: Encoder[PgUserMappingsViewRow] = Encoder.forProduct7[PgUserMappingsViewRow, /* oid */ Long, Array[String], /* oid */ Long, SqlIdentifier, SqlIdentifier, SqlIdentifier, SqlIdentifier]("oid", "umoptions", "umuser", "authorization_identifier", "foreign_server_catalog", "foreign_server_name", "srvowner")(x => (x.oid, x.umoptions, x.umuser, x.authorizationIdentifier, x.foreignServerCatalog, x.foreignServerName, x.srvowner))(Encoder.encodeLong, Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly), Encoder.encodeLong, SqlIdentifier.encoder, SqlIdentifier.encoder, SqlIdentifier.encoder, SqlIdentifier.encoder)
  implicit lazy val read: Read[PgUserMappingsViewRow] = new Read[PgUserMappingsViewRow](
    gets = List(
      (Meta.LongMeta.get, Nullability.NoNulls),
      (adventureworks.StringArrayMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgUserMappingsViewRow(
      oid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 0),
      umoptions = adventureworks.StringArrayMeta.get.unsafeGetNonNullable(rs, i + 1),
      umuser = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 2),
      authorizationIdentifier = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 3),
      foreignServerCatalog = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 4),
      foreignServerName = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 5),
      srvowner = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 6)
    )
  )
}
