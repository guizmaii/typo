/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package applicable_roles

import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ApplicableRolesViewRow(
  grantee: SqlIdentifier,
  roleName: SqlIdentifier,
  isGrantable: YesOrNo
)

object ApplicableRolesViewRow {
  implicit lazy val decoder: Decoder[ApplicableRolesViewRow] = Decoder.forProduct3[ApplicableRolesViewRow, SqlIdentifier, SqlIdentifier, YesOrNo]("grantee", "role_name", "is_grantable")(ApplicableRolesViewRow.apply)(SqlIdentifier.decoder, SqlIdentifier.decoder, YesOrNo.decoder)
  implicit lazy val encoder: Encoder[ApplicableRolesViewRow] = Encoder.forProduct3[ApplicableRolesViewRow, SqlIdentifier, SqlIdentifier, YesOrNo]("grantee", "role_name", "is_grantable")(x => (x.grantee, x.roleName, x.isGrantable))(SqlIdentifier.encoder, SqlIdentifier.encoder, YesOrNo.encoder)
  implicit lazy val read: Read[ApplicableRolesViewRow] = new Read[ApplicableRolesViewRow](
    gets = List(
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (YesOrNo.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ApplicableRolesViewRow(
      grantee = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 0),
      roleName = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 1),
      isGrantable = YesOrNo.get.unsafeGetNonNullable(rs, i + 2)
    )
  )
}
