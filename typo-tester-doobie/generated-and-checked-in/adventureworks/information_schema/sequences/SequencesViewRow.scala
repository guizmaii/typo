/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sequences

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class SequencesViewRow(
  sequenceCatalog: /* nullability unknown */ Option[String],
  sequenceSchema: /* nullability unknown */ Option[String],
  sequenceName: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[String],
  numericPrecision: /* nullability unknown */ Option[Int],
  numericPrecisionRadix: /* nullability unknown */ Option[Int],
  numericScale: /* nullability unknown */ Option[Int],
  startValue: /* nullability unknown */ Option[String],
  minimumValue: /* nullability unknown */ Option[String],
  maximumValue: /* nullability unknown */ Option[String],
  increment: /* nullability unknown */ Option[String],
  cycleOption: /* nullability unknown */ Option[/* max 3 chars */ String]
)

object SequencesViewRow {
  implicit lazy val decoder: Decoder[SequencesViewRow] = Decoder.forProduct12[SequencesViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[/* max 3 chars */ String]]("sequence_catalog", "sequence_schema", "sequence_name", "data_type", "numeric_precision", "numeric_precision_radix", "numeric_scale", "start_value", "minimum_value", "maximum_value", "increment", "cycle_option")(SequencesViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[SequencesViewRow] = Encoder.forProduct12[SequencesViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[/* max 3 chars */ String]]("sequence_catalog", "sequence_schema", "sequence_name", "data_type", "numeric_precision", "numeric_precision_radix", "numeric_scale", "start_value", "minimum_value", "maximum_value", "increment", "cycle_option")(x => (x.sequenceCatalog, x.sequenceSchema, x.sequenceName, x.dataType, x.numericPrecision, x.numericPrecisionRadix, x.numericScale, x.startValue, x.minimumValue, x.maximumValue, x.increment, x.cycleOption))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[SequencesViewRow] = new Read[SequencesViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SequencesViewRow(
      sequenceCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      sequenceSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      sequenceName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      dataType = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      numericPrecision = Meta.IntMeta.get.unsafeGetNullable(rs, i + 4),
      numericPrecisionRadix = Meta.IntMeta.get.unsafeGetNullable(rs, i + 5),
      numericScale = Meta.IntMeta.get.unsafeGetNullable(rs, i + 6),
      startValue = Meta.StringMeta.get.unsafeGetNullable(rs, i + 7),
      minimumValue = Meta.StringMeta.get.unsafeGetNullable(rs, i + 8),
      maximumValue = Meta.StringMeta.get.unsafeGetNullable(rs, i + 9),
      increment = Meta.StringMeta.get.unsafeGetNullable(rs, i + 10),
      cycleOption = Meta.StringMeta.get.unsafeGetNullable(rs, i + 11)
    )
  )
}
