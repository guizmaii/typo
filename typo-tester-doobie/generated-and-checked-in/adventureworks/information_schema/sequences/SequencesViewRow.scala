/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sequences

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class SequencesViewRow(
  sequenceCatalog: SqlIdentifier,
  sequenceSchema: SqlIdentifier,
  sequenceName: SqlIdentifier,
  dataType: CharacterData,
  numericPrecision: CardinalNumber,
  numericPrecisionRadix: CardinalNumber,
  numericScale: CardinalNumber,
  startValue: CharacterData,
  minimumValue: CharacterData,
  maximumValue: CharacterData,
  increment: CharacterData,
  cycleOption: YesOrNo
)

object SequencesViewRow {
  implicit lazy val decoder: Decoder[SequencesViewRow] = Decoder.forProduct12[SequencesViewRow, SqlIdentifier, SqlIdentifier, SqlIdentifier, CharacterData, CardinalNumber, CardinalNumber, CardinalNumber, CharacterData, CharacterData, CharacterData, CharacterData, YesOrNo]("sequence_catalog", "sequence_schema", "sequence_name", "data_type", "numeric_precision", "numeric_precision_radix", "numeric_scale", "start_value", "minimum_value", "maximum_value", "increment", "cycle_option")(SequencesViewRow.apply)(SqlIdentifier.decoder, SqlIdentifier.decoder, SqlIdentifier.decoder, CharacterData.decoder, CardinalNumber.decoder, CardinalNumber.decoder, CardinalNumber.decoder, CharacterData.decoder, CharacterData.decoder, CharacterData.decoder, CharacterData.decoder, YesOrNo.decoder)
  implicit lazy val encoder: Encoder[SequencesViewRow] = Encoder.forProduct12[SequencesViewRow, SqlIdentifier, SqlIdentifier, SqlIdentifier, CharacterData, CardinalNumber, CardinalNumber, CardinalNumber, CharacterData, CharacterData, CharacterData, CharacterData, YesOrNo]("sequence_catalog", "sequence_schema", "sequence_name", "data_type", "numeric_precision", "numeric_precision_radix", "numeric_scale", "start_value", "minimum_value", "maximum_value", "increment", "cycle_option")(x => (x.sequenceCatalog, x.sequenceSchema, x.sequenceName, x.dataType, x.numericPrecision, x.numericPrecisionRadix, x.numericScale, x.startValue, x.minimumValue, x.maximumValue, x.increment, x.cycleOption))(SqlIdentifier.encoder, SqlIdentifier.encoder, SqlIdentifier.encoder, CharacterData.encoder, CardinalNumber.encoder, CardinalNumber.encoder, CardinalNumber.encoder, CharacterData.encoder, CharacterData.encoder, CharacterData.encoder, CharacterData.encoder, YesOrNo.encoder)
  implicit lazy val read: Read[SequencesViewRow] = new Read[SequencesViewRow](
    gets = List(
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (SqlIdentifier.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CardinalNumber.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (CharacterData.get, Nullability.NoNulls),
      (YesOrNo.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SequencesViewRow(
      sequenceCatalog = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 0),
      sequenceSchema = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 1),
      sequenceName = SqlIdentifier.get.unsafeGetNonNullable(rs, i + 2),
      dataType = CharacterData.get.unsafeGetNonNullable(rs, i + 3),
      numericPrecision = CardinalNumber.get.unsafeGetNonNullable(rs, i + 4),
      numericPrecisionRadix = CardinalNumber.get.unsafeGetNonNullable(rs, i + 5),
      numericScale = CardinalNumber.get.unsafeGetNonNullable(rs, i + 6),
      startValue = CharacterData.get.unsafeGetNonNullable(rs, i + 7),
      minimumValue = CharacterData.get.unsafeGetNonNullable(rs, i + 8),
      maximumValue = CharacterData.get.unsafeGetNonNullable(rs, i + 9),
      increment = CharacterData.get.unsafeGetNonNullable(rs, i + 10),
      cycleOption = YesOrNo.get.unsafeGetNonNullable(rs, i + 11)
    )
  )
}
