/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_udt_usage

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ColumnUdtUsageViewRow(
  udtCatalog: /* nullability unknown */ Option[String],
  udtSchema: /* nullability unknown */ Option[String],
  udtName: /* nullability unknown */ Option[String],
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  columnName: /* nullability unknown */ Option[String]
)

object ColumnUdtUsageViewRow {
  implicit lazy val decoder: Decoder[ColumnUdtUsageViewRow] = Decoder.forProduct7[ColumnUdtUsageViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("udt_catalog", "udt_schema", "udt_name", "table_catalog", "table_schema", "table_name", "column_name")(ColumnUdtUsageViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[ColumnUdtUsageViewRow] = Encoder.forProduct7[ColumnUdtUsageViewRow, /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String]]("udt_catalog", "udt_schema", "udt_name", "table_catalog", "table_schema", "table_name", "column_name")(x => (x.udtCatalog, x.udtSchema, x.udtName, x.tableCatalog, x.tableSchema, x.tableName, x.columnName))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[ColumnUdtUsageViewRow] = new Read[ColumnUdtUsageViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ColumnUdtUsageViewRow(
      udtCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      udtSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      udtName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      tableCatalog = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      tableSchema = Meta.StringMeta.get.unsafeGetNullable(rs, i + 4),
      tableName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      columnName = Meta.StringMeta.get.unsafeGetNullable(rs, i + 6)
    )
  )
}
