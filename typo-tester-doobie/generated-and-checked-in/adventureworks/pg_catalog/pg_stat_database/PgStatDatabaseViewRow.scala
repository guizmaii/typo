/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_database

import adventureworks.customtypes.TypoOffsetDateTime
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class PgStatDatabaseViewRow(
  datid: /* oid */ Long,
  datname: String,
  numbackends: Int,
  xactCommit: Long,
  xactRollback: Long,
  blksRead: Long,
  blksHit: Long,
  tupReturned: Long,
  tupFetched: Long,
  tupInserted: Long,
  tupUpdated: Long,
  tupDeleted: Long,
  conflicts: Long,
  tempFiles: Long,
  tempBytes: Long,
  deadlocks: Long,
  checksumFailures: Long,
  checksumLastFailure: TypoOffsetDateTime,
  blkReadTime: Double,
  blkWriteTime: Double,
  sessionTime: Double,
  activeTime: Double,
  idleInTransactionTime: Double,
  sessions: Long,
  sessionsAbandoned: Long,
  sessionsFatal: Long,
  sessionsKilled: Long,
  statsReset: TypoOffsetDateTime
)

object PgStatDatabaseViewRow {
  implicit lazy val decoder: Decoder[PgStatDatabaseViewRow] = Decoder.instanceTry[PgStatDatabaseViewRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgStatDatabaseViewRow(
        datid = orThrow(c.get("datid")(Decoder.decodeLong)),
        datname = orThrow(c.get("datname")(Decoder.decodeString)),
        numbackends = orThrow(c.get("numbackends")(Decoder.decodeInt)),
        xactCommit = orThrow(c.get("xact_commit")(Decoder.decodeLong)),
        xactRollback = orThrow(c.get("xact_rollback")(Decoder.decodeLong)),
        blksRead = orThrow(c.get("blks_read")(Decoder.decodeLong)),
        blksHit = orThrow(c.get("blks_hit")(Decoder.decodeLong)),
        tupReturned = orThrow(c.get("tup_returned")(Decoder.decodeLong)),
        tupFetched = orThrow(c.get("tup_fetched")(Decoder.decodeLong)),
        tupInserted = orThrow(c.get("tup_inserted")(Decoder.decodeLong)),
        tupUpdated = orThrow(c.get("tup_updated")(Decoder.decodeLong)),
        tupDeleted = orThrow(c.get("tup_deleted")(Decoder.decodeLong)),
        conflicts = orThrow(c.get("conflicts")(Decoder.decodeLong)),
        tempFiles = orThrow(c.get("temp_files")(Decoder.decodeLong)),
        tempBytes = orThrow(c.get("temp_bytes")(Decoder.decodeLong)),
        deadlocks = orThrow(c.get("deadlocks")(Decoder.decodeLong)),
        checksumFailures = orThrow(c.get("checksum_failures")(Decoder.decodeLong)),
        checksumLastFailure = orThrow(c.get("checksum_last_failure")(TypoOffsetDateTime.decoder)),
        blkReadTime = orThrow(c.get("blk_read_time")(Decoder.decodeDouble)),
        blkWriteTime = orThrow(c.get("blk_write_time")(Decoder.decodeDouble)),
        sessionTime = orThrow(c.get("session_time")(Decoder.decodeDouble)),
        activeTime = orThrow(c.get("active_time")(Decoder.decodeDouble)),
        idleInTransactionTime = orThrow(c.get("idle_in_transaction_time")(Decoder.decodeDouble)),
        sessions = orThrow(c.get("sessions")(Decoder.decodeLong)),
        sessionsAbandoned = orThrow(c.get("sessions_abandoned")(Decoder.decodeLong)),
        sessionsFatal = orThrow(c.get("sessions_fatal")(Decoder.decodeLong)),
        sessionsKilled = orThrow(c.get("sessions_killed")(Decoder.decodeLong)),
        statsReset = orThrow(c.get("stats_reset")(TypoOffsetDateTime.decoder))
      )
    }
  )
  implicit lazy val encoder: Encoder[PgStatDatabaseViewRow] = Encoder[PgStatDatabaseViewRow](row =>
    Json.obj(
      "datid" -> Encoder.encodeLong.apply(row.datid),
      "datname" -> Encoder.encodeString.apply(row.datname),
      "numbackends" -> Encoder.encodeInt.apply(row.numbackends),
      "xact_commit" -> Encoder.encodeLong.apply(row.xactCommit),
      "xact_rollback" -> Encoder.encodeLong.apply(row.xactRollback),
      "blks_read" -> Encoder.encodeLong.apply(row.blksRead),
      "blks_hit" -> Encoder.encodeLong.apply(row.blksHit),
      "tup_returned" -> Encoder.encodeLong.apply(row.tupReturned),
      "tup_fetched" -> Encoder.encodeLong.apply(row.tupFetched),
      "tup_inserted" -> Encoder.encodeLong.apply(row.tupInserted),
      "tup_updated" -> Encoder.encodeLong.apply(row.tupUpdated),
      "tup_deleted" -> Encoder.encodeLong.apply(row.tupDeleted),
      "conflicts" -> Encoder.encodeLong.apply(row.conflicts),
      "temp_files" -> Encoder.encodeLong.apply(row.tempFiles),
      "temp_bytes" -> Encoder.encodeLong.apply(row.tempBytes),
      "deadlocks" -> Encoder.encodeLong.apply(row.deadlocks),
      "checksum_failures" -> Encoder.encodeLong.apply(row.checksumFailures),
      "checksum_last_failure" -> TypoOffsetDateTime.encoder.apply(row.checksumLastFailure),
      "blk_read_time" -> Encoder.encodeDouble.apply(row.blkReadTime),
      "blk_write_time" -> Encoder.encodeDouble.apply(row.blkWriteTime),
      "session_time" -> Encoder.encodeDouble.apply(row.sessionTime),
      "active_time" -> Encoder.encodeDouble.apply(row.activeTime),
      "idle_in_transaction_time" -> Encoder.encodeDouble.apply(row.idleInTransactionTime),
      "sessions" -> Encoder.encodeLong.apply(row.sessions),
      "sessions_abandoned" -> Encoder.encodeLong.apply(row.sessionsAbandoned),
      "sessions_fatal" -> Encoder.encodeLong.apply(row.sessionsFatal),
      "sessions_killed" -> Encoder.encodeLong.apply(row.sessionsKilled),
      "stats_reset" -> TypoOffsetDateTime.encoder.apply(row.statsReset)
    )
  )
  implicit lazy val read: Read[PgStatDatabaseViewRow] = new Read[PgStatDatabaseViewRow](
    gets = List(
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (TypoOffsetDateTime.get, Nullability.NoNulls),
      (Meta.DoubleMeta.get, Nullability.NoNulls),
      (Meta.DoubleMeta.get, Nullability.NoNulls),
      (Meta.DoubleMeta.get, Nullability.NoNulls),
      (Meta.DoubleMeta.get, Nullability.NoNulls),
      (Meta.DoubleMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (TypoOffsetDateTime.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatDatabaseViewRow(
      datid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 0),
      datname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 1),
      numbackends = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 2),
      xactCommit = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 3),
      xactRollback = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 4),
      blksRead = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 5),
      blksHit = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 6),
      tupReturned = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 7),
      tupFetched = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 8),
      tupInserted = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 9),
      tupUpdated = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 10),
      tupDeleted = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 11),
      conflicts = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 12),
      tempFiles = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 13),
      tempBytes = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 14),
      deadlocks = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 15),
      checksumFailures = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 16),
      checksumLastFailure = TypoOffsetDateTime.get.unsafeGetNonNullable(rs, i + 17),
      blkReadTime = Meta.DoubleMeta.get.unsafeGetNonNullable(rs, i + 18),
      blkWriteTime = Meta.DoubleMeta.get.unsafeGetNonNullable(rs, i + 19),
      sessionTime = Meta.DoubleMeta.get.unsafeGetNonNullable(rs, i + 20),
      activeTime = Meta.DoubleMeta.get.unsafeGetNonNullable(rs, i + 21),
      idleInTransactionTime = Meta.DoubleMeta.get.unsafeGetNonNullable(rs, i + 22),
      sessions = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 23),
      sessionsAbandoned = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 24),
      sessionsFatal = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 25),
      sessionsKilled = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 26),
      statsReset = TypoOffsetDateTime.get.unsafeGetNonNullable(rs, i + 27)
    )
  )
}
