/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_ssl

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgStatSslViewRow(
  pid: /* nullability unknown */ Option[Int],
  ssl: /* nullability unknown */ Option[Boolean],
  version: /* nullability unknown */ Option[String],
  cipher: /* nullability unknown */ Option[String],
  bits: /* nullability unknown */ Option[Int],
  clientDn: /* nullability unknown */ Option[String],
  clientSerial: /* nullability unknown */ Option[BigDecimal],
  issuerDn: /* nullability unknown */ Option[String]
)

object PgStatSslViewRow {
  implicit lazy val decoder: Decoder[PgStatSslViewRow] = Decoder.forProduct8[PgStatSslViewRow, /* nullability unknown */ Option[Int], /* nullability unknown */ Option[Boolean], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[String], /* nullability unknown */ Option[BigDecimal], /* nullability unknown */ Option[String]]("pid", "ssl", "version", "cipher", "bits", "client_dn", "client_serial", "issuer_dn")(PgStatSslViewRow.apply)(Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeBoolean), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeBigDecimal), Decoder.decodeOption(Decoder.decodeString))
  implicit lazy val encoder: Encoder[PgStatSslViewRow] = Encoder.forProduct8[PgStatSslViewRow, /* nullability unknown */ Option[Int], /* nullability unknown */ Option[Boolean], /* nullability unknown */ Option[String], /* nullability unknown */ Option[String], /* nullability unknown */ Option[Int], /* nullability unknown */ Option[String], /* nullability unknown */ Option[BigDecimal], /* nullability unknown */ Option[String]]("pid", "ssl", "version", "cipher", "bits", "client_dn", "client_serial", "issuer_dn")(x => (x.pid, x.ssl, x.version, x.cipher, x.bits, x.clientDn, x.clientSerial, x.issuerDn))(Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeBoolean), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeBigDecimal), Encoder.encodeOption(Encoder.encodeString))
  implicit lazy val read: Read[PgStatSslViewRow] = new Read[PgStatSslViewRow](
    gets = List(
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.BooleanMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.ScalaBigDecimalMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatSslViewRow(
      pid = Meta.IntMeta.get.unsafeGetNullable(rs, i + 0),
      ssl = Meta.BooleanMeta.get.unsafeGetNullable(rs, i + 1),
      version = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      cipher = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      bits = Meta.IntMeta.get.unsafeGetNullable(rs, i + 4),
      clientDn = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      clientSerial = Meta.ScalaBigDecimalMeta.get.unsafeGetNullable(rs, i + 6),
      issuerDn = Meta.StringMeta.get.unsafeGetNullable(rs, i + 7)
    )
  )
}
