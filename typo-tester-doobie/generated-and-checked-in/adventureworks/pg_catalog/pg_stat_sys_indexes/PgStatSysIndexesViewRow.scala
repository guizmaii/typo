/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_sys_indexes

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgStatSysIndexesViewRow(
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.relid]] */
  relid: /* oid */ Long,
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.indexrelid]] */
  indexrelid: /* oid */ Long,
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.schemaname]] */
  schemaname: String,
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.relname]] */
  relname: String,
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.indexrelname]] */
  indexrelname: String,
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.idxScan]] */
  idxScan: Long,
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.idxTupRead]] */
  idxTupRead: Long,
  /** Points to [[pg_stat_all_indexes.PgStatAllIndexesViewRow.idxTupFetch]] */
  idxTupFetch: Long
)

object PgStatSysIndexesViewRow {
  implicit lazy val decoder: Decoder[PgStatSysIndexesViewRow] = Decoder.forProduct8[PgStatSysIndexesViewRow, /* oid */ Long, /* oid */ Long, String, String, String, Long, Long, Long]("relid", "indexrelid", "schemaname", "relname", "indexrelname", "idx_scan", "idx_tup_read", "idx_tup_fetch")(PgStatSysIndexesViewRow.apply)(Decoder.decodeLong, Decoder.decodeLong, Decoder.decodeString, Decoder.decodeString, Decoder.decodeString, Decoder.decodeLong, Decoder.decodeLong, Decoder.decodeLong)
  implicit lazy val encoder: Encoder[PgStatSysIndexesViewRow] = Encoder.forProduct8[PgStatSysIndexesViewRow, /* oid */ Long, /* oid */ Long, String, String, String, Long, Long, Long]("relid", "indexrelid", "schemaname", "relname", "indexrelname", "idx_scan", "idx_tup_read", "idx_tup_fetch")(x => (x.relid, x.indexrelid, x.schemaname, x.relname, x.indexrelname, x.idxScan, x.idxTupRead, x.idxTupFetch))(Encoder.encodeLong, Encoder.encodeLong, Encoder.encodeString, Encoder.encodeString, Encoder.encodeString, Encoder.encodeLong, Encoder.encodeLong, Encoder.encodeLong)
  implicit lazy val read: Read[PgStatSysIndexesViewRow] = new Read[PgStatSysIndexesViewRow](
    gets = List(
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatSysIndexesViewRow(
      relid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 0),
      indexrelid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 1),
      schemaname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 2),
      relname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 3),
      indexrelname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 4),
      idxScan = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 5),
      idxTupRead = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 6),
      idxTupFetch = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 7)
    )
  )
}
