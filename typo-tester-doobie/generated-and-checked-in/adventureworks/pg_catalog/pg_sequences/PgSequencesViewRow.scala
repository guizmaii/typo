/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequences

import adventureworks.customtypes.TypoRegtype
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgSequencesViewRow(
  schemaname: String,
  sequencename: String,
  sequenceowner: String,
  dataType: TypoRegtype,
  startValue: Long,
  minValue: Long,
  maxValue: Long,
  incrementBy: Long,
  cycle: Boolean,
  cacheSize: Long,
  lastValue: Long
)

object PgSequencesViewRow {
  implicit lazy val decoder: Decoder[PgSequencesViewRow] = Decoder.forProduct11[PgSequencesViewRow, String, String, String, TypoRegtype, Long, Long, Long, Long, Boolean, Long, Long]("schemaname", "sequencename", "sequenceowner", "data_type", "start_value", "min_value", "max_value", "increment_by", "cycle", "cache_size", "last_value")(PgSequencesViewRow.apply)(Decoder.decodeString, Decoder.decodeString, Decoder.decodeString, TypoRegtype.decoder, Decoder.decodeLong, Decoder.decodeLong, Decoder.decodeLong, Decoder.decodeLong, Decoder.decodeBoolean, Decoder.decodeLong, Decoder.decodeLong)
  implicit lazy val encoder: Encoder[PgSequencesViewRow] = Encoder.forProduct11[PgSequencesViewRow, String, String, String, TypoRegtype, Long, Long, Long, Long, Boolean, Long, Long]("schemaname", "sequencename", "sequenceowner", "data_type", "start_value", "min_value", "max_value", "increment_by", "cycle", "cache_size", "last_value")(x => (x.schemaname, x.sequencename, x.sequenceowner, x.dataType, x.startValue, x.minValue, x.maxValue, x.incrementBy, x.cycle, x.cacheSize, x.lastValue))(Encoder.encodeString, Encoder.encodeString, Encoder.encodeString, TypoRegtype.encoder, Encoder.encodeLong, Encoder.encodeLong, Encoder.encodeLong, Encoder.encodeLong, Encoder.encodeBoolean, Encoder.encodeLong, Encoder.encodeLong)
  implicit lazy val read: Read[PgSequencesViewRow] = new Read[PgSequencesViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (TypoRegtype.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgSequencesViewRow(
      schemaname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 0),
      sequencename = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 1),
      sequenceowner = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 2),
      dataType = TypoRegtype.get.unsafeGetNonNullable(rs, i + 3),
      startValue = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 4),
      minValue = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 5),
      maxValue = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 6),
      incrementBy = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 7),
      cycle = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 8),
      cacheSize = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 9),
      lastValue = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 10)
    )
  )
}
