/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_activity

import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoOffsetDateTime
import adventureworks.customtypes.TypoXid
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgStatActivityViewRow(
  datid: /* oid */ Long,
  datname: Option[String],
  pid: Int,
  leaderPid: Int,
  usesysid: /* oid */ Long,
  usename: Option[String],
  applicationName: String,
  clientAddr: TypoInet,
  clientHostname: String,
  clientPort: Int,
  backendStart: TypoOffsetDateTime,
  xactStart: TypoOffsetDateTime,
  queryStart: TypoOffsetDateTime,
  stateChange: TypoOffsetDateTime,
  waitEventType: String,
  waitEvent: String,
  state: String,
  backendXid: TypoXid,
  backendXmin: TypoXid,
  queryId: Long,
  query: String,
  backendType: String
)

object PgStatActivityViewRow {
  implicit lazy val decoder: Decoder[PgStatActivityViewRow] = Decoder.forProduct22[PgStatActivityViewRow, /* oid */ Long, Option[String], Int, Int, /* oid */ Long, Option[String], String, TypoInet, String, Int, TypoOffsetDateTime, TypoOffsetDateTime, TypoOffsetDateTime, TypoOffsetDateTime, String, String, String, TypoXid, TypoXid, Long, String, String]("datid", "datname", "pid", "leader_pid", "usesysid", "usename", "application_name", "client_addr", "client_hostname", "client_port", "backend_start", "xact_start", "query_start", "state_change", "wait_event_type", "wait_event", "state", "backend_xid", "backend_xmin", "query_id", "query", "backend_type")(PgStatActivityViewRow.apply)(Decoder.decodeLong, Decoder.decodeOption(Decoder.decodeString), Decoder.decodeInt, Decoder.decodeInt, Decoder.decodeLong, Decoder.decodeOption(Decoder.decodeString), Decoder.decodeString, TypoInet.decoder, Decoder.decodeString, Decoder.decodeInt, TypoOffsetDateTime.decoder, TypoOffsetDateTime.decoder, TypoOffsetDateTime.decoder, TypoOffsetDateTime.decoder, Decoder.decodeString, Decoder.decodeString, Decoder.decodeString, TypoXid.decoder, TypoXid.decoder, Decoder.decodeLong, Decoder.decodeString, Decoder.decodeString)
  implicit lazy val encoder: Encoder[PgStatActivityViewRow] = Encoder.forProduct22[PgStatActivityViewRow, /* oid */ Long, Option[String], Int, Int, /* oid */ Long, Option[String], String, TypoInet, String, Int, TypoOffsetDateTime, TypoOffsetDateTime, TypoOffsetDateTime, TypoOffsetDateTime, String, String, String, TypoXid, TypoXid, Long, String, String]("datid", "datname", "pid", "leader_pid", "usesysid", "usename", "application_name", "client_addr", "client_hostname", "client_port", "backend_start", "xact_start", "query_start", "state_change", "wait_event_type", "wait_event", "state", "backend_xid", "backend_xmin", "query_id", "query", "backend_type")(x => (x.datid, x.datname, x.pid, x.leaderPid, x.usesysid, x.usename, x.applicationName, x.clientAddr, x.clientHostname, x.clientPort, x.backendStart, x.xactStart, x.queryStart, x.stateChange, x.waitEventType, x.waitEvent, x.state, x.backendXid, x.backendXmin, x.queryId, x.query, x.backendType))(Encoder.encodeLong, Encoder.encodeOption(Encoder.encodeString), Encoder.encodeInt, Encoder.encodeInt, Encoder.encodeLong, Encoder.encodeOption(Encoder.encodeString), Encoder.encodeString, TypoInet.encoder, Encoder.encodeString, Encoder.encodeInt, TypoOffsetDateTime.encoder, TypoOffsetDateTime.encoder, TypoOffsetDateTime.encoder, TypoOffsetDateTime.encoder, Encoder.encodeString, Encoder.encodeString, Encoder.encodeString, TypoXid.encoder, TypoXid.encoder, Encoder.encodeLong, Encoder.encodeString, Encoder.encodeString)
  implicit lazy val read: Read[PgStatActivityViewRow] = new Read[PgStatActivityViewRow](
    gets = List(
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (TypoInet.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (TypoOffsetDateTime.get, Nullability.NoNulls),
      (TypoOffsetDateTime.get, Nullability.NoNulls),
      (TypoOffsetDateTime.get, Nullability.NoNulls),
      (TypoOffsetDateTime.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (TypoXid.get, Nullability.NoNulls),
      (TypoXid.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatActivityViewRow(
      datid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 0),
      datname = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      pid = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 2),
      leaderPid = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 3),
      usesysid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 4),
      usename = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      applicationName = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 6),
      clientAddr = TypoInet.get.unsafeGetNonNullable(rs, i + 7),
      clientHostname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 8),
      clientPort = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 9),
      backendStart = TypoOffsetDateTime.get.unsafeGetNonNullable(rs, i + 10),
      xactStart = TypoOffsetDateTime.get.unsafeGetNonNullable(rs, i + 11),
      queryStart = TypoOffsetDateTime.get.unsafeGetNonNullable(rs, i + 12),
      stateChange = TypoOffsetDateTime.get.unsafeGetNonNullable(rs, i + 13),
      waitEventType = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 14),
      waitEvent = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 15),
      state = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 16),
      backendXid = TypoXid.get.unsafeGetNonNullable(rs, i + 17),
      backendXmin = TypoXid.get.unsafeGetNonNullable(rs, i + 18),
      queryId = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 19),
      query = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 20),
      backendType = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 21)
    )
  )
}
