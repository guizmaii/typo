/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_xact_user_functions

import adventureworks.pg_catalog.pg_proc.PgProcId
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgStatXactUserFunctionsViewRow(
  /** Points to [[pg_proc.PgProcRow.oid]] */
  funcid: PgProcId,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_proc.PgProcRow.proname]] */
  funcname: String,
  calls: /* nullability unknown */ Option[Long],
  totalTime: /* nullability unknown */ Option[Double],
  selfTime: /* nullability unknown */ Option[Double]
)

object PgStatXactUserFunctionsViewRow {
  implicit lazy val decoder: Decoder[PgStatXactUserFunctionsViewRow] = Decoder.forProduct6[PgStatXactUserFunctionsViewRow, PgProcId, Option[String], String, /* nullability unknown */ Option[Long], /* nullability unknown */ Option[Double], /* nullability unknown */ Option[Double]]("funcid", "schemaname", "funcname", "calls", "total_time", "self_time")(PgStatXactUserFunctionsViewRow.apply)(PgProcId.decoder, Decoder.decodeOption(Decoder.decodeString), Decoder.decodeString, Decoder.decodeOption(Decoder.decodeLong), Decoder.decodeOption(Decoder.decodeDouble), Decoder.decodeOption(Decoder.decodeDouble))
  implicit lazy val encoder: Encoder[PgStatXactUserFunctionsViewRow] = Encoder.forProduct6[PgStatXactUserFunctionsViewRow, PgProcId, Option[String], String, /* nullability unknown */ Option[Long], /* nullability unknown */ Option[Double], /* nullability unknown */ Option[Double]]("funcid", "schemaname", "funcname", "calls", "total_time", "self_time")(x => (x.funcid, x.schemaname, x.funcname, x.calls, x.totalTime, x.selfTime))(PgProcId.encoder, Encoder.encodeOption(Encoder.encodeString), Encoder.encodeString, Encoder.encodeOption(Encoder.encodeLong), Encoder.encodeOption(Encoder.encodeDouble), Encoder.encodeOption(Encoder.encodeDouble))
  implicit lazy val read: Read[PgStatXactUserFunctionsViewRow] = new Read[PgStatXactUserFunctionsViewRow](
    gets = List(
      (PgProcId.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.Nullable),
      (Meta.DoubleMeta.get, Nullability.Nullable),
      (Meta.DoubleMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatXactUserFunctionsViewRow(
      funcid = PgProcId.get.unsafeGetNonNullable(rs, i + 0),
      schemaname = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      funcname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 2),
      calls = Meta.LongMeta.get.unsafeGetNullable(rs, i + 3),
      totalTime = Meta.DoubleMeta.get.unsafeGetNullable(rs, i + 4),
      selfTime = Meta.DoubleMeta.get.unsafeGetNullable(rs, i + 5)
    )
  )
}
