/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package vproductmodelcatalogdescription

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.util.UUID
import scala.util.Try

case class VproductmodelcatalogdescriptionViewRow(
  /** Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: ProductmodelId,
  /** Points to [[productmodel.ProductmodelRow.name]] */
  name: Name,
  Summary: String,
  manufacturer: String,
  copyright: /* max 30 chars */ String,
  producturl: /* max 256 chars */ String,
  warrantyperiod: /* max 256 chars */ String,
  warrantydescription: /* max 256 chars */ String,
  noofyears: /* max 256 chars */ String,
  maintenancedescription: /* max 256 chars */ String,
  wheel: /* max 256 chars */ String,
  saddle: /* max 256 chars */ String,
  pedal: /* max 256 chars */ String,
  bikeframe: String,
  crankset: /* max 256 chars */ String,
  pictureangle: /* max 256 chars */ String,
  picturesize: /* max 256 chars */ String,
  productphotoid: /* max 256 chars */ String,
  material: /* max 256 chars */ String,
  color: /* max 256 chars */ String,
  productline: /* max 256 chars */ String,
  style: /* max 256 chars */ String,
  riderexperience: /* max 1024 chars */ String,
  /** Points to [[productmodel.ProductmodelRow.rowguid]] */
  rowguid: UUID,
  /** Points to [[productmodel.ProductmodelRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object VproductmodelcatalogdescriptionViewRow {
  implicit lazy val decoder: Decoder[VproductmodelcatalogdescriptionViewRow] = Decoder.instanceTry[VproductmodelcatalogdescriptionViewRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      VproductmodelcatalogdescriptionViewRow(
        productmodelid = orThrow(c.get("productmodelid")(ProductmodelId.decoder)),
        name = orThrow(c.get("name")(Name.decoder)),
        Summary = orThrow(c.get("Summary")(Decoder.decodeString)),
        manufacturer = orThrow(c.get("manufacturer")(Decoder.decodeString)),
        copyright = orThrow(c.get("copyright")(Decoder.decodeString)),
        producturl = orThrow(c.get("producturl")(Decoder.decodeString)),
        warrantyperiod = orThrow(c.get("warrantyperiod")(Decoder.decodeString)),
        warrantydescription = orThrow(c.get("warrantydescription")(Decoder.decodeString)),
        noofyears = orThrow(c.get("noofyears")(Decoder.decodeString)),
        maintenancedescription = orThrow(c.get("maintenancedescription")(Decoder.decodeString)),
        wheel = orThrow(c.get("wheel")(Decoder.decodeString)),
        saddle = orThrow(c.get("saddle")(Decoder.decodeString)),
        pedal = orThrow(c.get("pedal")(Decoder.decodeString)),
        bikeframe = orThrow(c.get("bikeframe")(Decoder.decodeString)),
        crankset = orThrow(c.get("crankset")(Decoder.decodeString)),
        pictureangle = orThrow(c.get("pictureangle")(Decoder.decodeString)),
        picturesize = orThrow(c.get("picturesize")(Decoder.decodeString)),
        productphotoid = orThrow(c.get("productphotoid")(Decoder.decodeString)),
        material = orThrow(c.get("material")(Decoder.decodeString)),
        color = orThrow(c.get("color")(Decoder.decodeString)),
        productline = orThrow(c.get("productline")(Decoder.decodeString)),
        style = orThrow(c.get("style")(Decoder.decodeString)),
        riderexperience = orThrow(c.get("riderexperience")(Decoder.decodeString)),
        rowguid = orThrow(c.get("rowguid")(Decoder.decodeUUID)),
        modifieddate = orThrow(c.get("modifieddate")(TypoLocalDateTime.decoder))
      )
    }
  )
  implicit lazy val encoder: Encoder[VproductmodelcatalogdescriptionViewRow] = Encoder[VproductmodelcatalogdescriptionViewRow](row =>
    Json.obj(
      "productmodelid" -> ProductmodelId.encoder.apply(row.productmodelid),
      "name" -> Name.encoder.apply(row.name),
      "Summary" -> Encoder.encodeString.apply(row.Summary),
      "manufacturer" -> Encoder.encodeString.apply(row.manufacturer),
      "copyright" -> Encoder.encodeString.apply(row.copyright),
      "producturl" -> Encoder.encodeString.apply(row.producturl),
      "warrantyperiod" -> Encoder.encodeString.apply(row.warrantyperiod),
      "warrantydescription" -> Encoder.encodeString.apply(row.warrantydescription),
      "noofyears" -> Encoder.encodeString.apply(row.noofyears),
      "maintenancedescription" -> Encoder.encodeString.apply(row.maintenancedescription),
      "wheel" -> Encoder.encodeString.apply(row.wheel),
      "saddle" -> Encoder.encodeString.apply(row.saddle),
      "pedal" -> Encoder.encodeString.apply(row.pedal),
      "bikeframe" -> Encoder.encodeString.apply(row.bikeframe),
      "crankset" -> Encoder.encodeString.apply(row.crankset),
      "pictureangle" -> Encoder.encodeString.apply(row.pictureangle),
      "picturesize" -> Encoder.encodeString.apply(row.picturesize),
      "productphotoid" -> Encoder.encodeString.apply(row.productphotoid),
      "material" -> Encoder.encodeString.apply(row.material),
      "color" -> Encoder.encodeString.apply(row.color),
      "productline" -> Encoder.encodeString.apply(row.productline),
      "style" -> Encoder.encodeString.apply(row.style),
      "riderexperience" -> Encoder.encodeString.apply(row.riderexperience),
      "rowguid" -> Encoder.encodeUUID.apply(row.rowguid),
      "modifieddate" -> TypoLocalDateTime.encoder.apply(row.modifieddate)
    )
  )
  implicit lazy val read: Read[VproductmodelcatalogdescriptionViewRow] = new Read[VproductmodelcatalogdescriptionViewRow](
    gets = List(
      (ProductmodelId.get, Nullability.NoNulls),
      (Name.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (adventureworks.UUIDMeta.get, Nullability.NoNulls),
      (TypoLocalDateTime.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => VproductmodelcatalogdescriptionViewRow(
      productmodelid = ProductmodelId.get.unsafeGetNonNullable(rs, i + 0),
      name = Name.get.unsafeGetNonNullable(rs, i + 1),
      Summary = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 2),
      manufacturer = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 3),
      copyright = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 4),
      producturl = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 5),
      warrantyperiod = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 6),
      warrantydescription = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 7),
      noofyears = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 8),
      maintenancedescription = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 9),
      wheel = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 10),
      saddle = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 11),
      pedal = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 12),
      bikeframe = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 13),
      crankset = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 14),
      pictureangle = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 15),
      picturesize = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 16),
      productphotoid = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 17),
      material = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 18),
      color = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 19),
      productline = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 20),
      style = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 21),
      riderexperience = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 22),
      rowguid = adventureworks.UUIDMeta.get.unsafeGetNonNullable(rs, i + 23),
      modifieddate = TypoLocalDateTime.get.unsafeGetNonNullable(rs, i + 24)
    )
  )
}
