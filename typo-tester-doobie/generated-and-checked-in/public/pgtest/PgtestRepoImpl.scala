/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtest

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream

object PgtestRepoImpl extends PgtestRepo {
  override def insert(unsaved: PgtestRow): ConnectionIO[PgtestRow] = {
    sql"""insert into "public".pgtest(box, circle, line, lseg, "path", point, polygon, "interval", money, "xml", json, jsonb, hstore, inet, boxes, circlees, linees, lseges, pathes, pointes, polygones, intervales, moneyes, xmles, jsones, jsonbes, hstores, inets)
          values (${unsaved.box}::box, ${unsaved.circle}::circle, ${unsaved.line}::line, ${unsaved.lseg}::lseg, ${unsaved.path}::path, ${unsaved.point}::point, ${unsaved.polygon}::polygon, ${unsaved.interval}::interval, ${unsaved.money}::numeric, ${unsaved.xml}::xml, ${unsaved.json}::json, ${unsaved.jsonb}::jsonb, ${unsaved.hstore}::hstore, ${unsaved.inet}::inet, ${unsaved.boxes}::_box, ${unsaved.circlees}::_circle, ${unsaved.linees}::_line, ${unsaved.lseges}::_lseg, ${unsaved.pathes}::_path, ${unsaved.pointes}::_point, ${unsaved.polygones}::_polygon, ${unsaved.intervales}::_interval, ${unsaved.moneyes}::numeric[], ${unsaved.xmles}::_xml, ${unsaved.jsones}::_json, ${unsaved.jsonbes}::_jsonb, ${unsaved.hstores}::_hstore, ${unsaved.inets}::_inet)
          returning box, circle, line, lseg, "path", point, polygon, "interval", money::numeric, "xml", json, jsonb, hstore, inet, boxes, circlees, linees, lseges, pathes, pointes, polygones, intervales, moneyes::numeric[], xmles, jsones, jsonbes, hstores, inets
       """.query[PgtestRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgtestRow] = {
    sql"""select box, circle, line, lseg, "path", point, polygon, "interval", money, "xml", json, jsonb, hstore, inet, boxes, circlees, linees, lseges, pathes, pointes, polygones, intervales, moneyes, xmles, jsones, jsonbes, hstores, inets from "public".pgtest""".query[PgtestRow].stream
  }
  override def selectByFieldValues(fieldValues: List[PgtestFieldOrIdValue[_]]): Stream[ConnectionIO, PgtestRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case PgtestFieldValue.box(value) => fr"box = $value"
        case PgtestFieldValue.circle(value) => fr"circle = $value"
        case PgtestFieldValue.line(value) => fr"line = $value"
        case PgtestFieldValue.lseg(value) => fr"lseg = $value"
        case PgtestFieldValue.path(value) => fr""""path" = $value"""
        case PgtestFieldValue.point(value) => fr"point = $value"
        case PgtestFieldValue.polygon(value) => fr"polygon = $value"
        case PgtestFieldValue.interval(value) => fr""""interval" = $value"""
        case PgtestFieldValue.money(value) => fr"money = $value"
        case PgtestFieldValue.xml(value) => fr""""xml" = $value"""
        case PgtestFieldValue.json(value) => fr"json = $value"
        case PgtestFieldValue.jsonb(value) => fr"jsonb = $value"
        case PgtestFieldValue.hstore(value) => fr"hstore = $value"
        case PgtestFieldValue.inet(value) => fr"inet = $value"
        case PgtestFieldValue.boxes(value) => fr"boxes = $value"
        case PgtestFieldValue.circlees(value) => fr"circlees = $value"
        case PgtestFieldValue.linees(value) => fr"linees = $value"
        case PgtestFieldValue.lseges(value) => fr"lseges = $value"
        case PgtestFieldValue.pathes(value) => fr"pathes = $value"
        case PgtestFieldValue.pointes(value) => fr"pointes = $value"
        case PgtestFieldValue.polygones(value) => fr"polygones = $value"
        case PgtestFieldValue.intervales(value) => fr"intervales = $value"
        case PgtestFieldValue.moneyes(value) => fr"moneyes = $value"
        case PgtestFieldValue.xmles(value) => fr"xmles = $value"
        case PgtestFieldValue.jsones(value) => fr"jsones = $value"
        case PgtestFieldValue.jsonbes(value) => fr"jsonbes = $value"
        case PgtestFieldValue.hstores(value) => fr"hstores = $value"
        case PgtestFieldValue.inets(value) => fr"inets = $value"
      } :_*
    )
    sql"""select * from "public".pgtest $where""".query[PgtestRow].stream
  
  }
}
