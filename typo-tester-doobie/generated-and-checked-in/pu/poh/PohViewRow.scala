/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package poh

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import adventureworks.purchasing.shipmethod.ShipmethodId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime

case class PohViewRow(
  id: Option[Int],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.purchaseorderid]] */
  purchaseorderid: Option[PurchaseorderheaderId],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.revisionnumber]] */
  revisionnumber: Option[Int],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.status]] */
  status: Option[Int],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.employeeid]] */
  employeeid: Option[BusinessentityId],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.vendorid]] */
  vendorid: Option[BusinessentityId],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.shipmethodid]] */
  shipmethodid: Option[ShipmethodId],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.orderdate]] */
  orderdate: Option[LocalDateTime],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.shipdate]] */
  shipdate: Option[LocalDateTime],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.subtotal]] */
  subtotal: Option[BigDecimal],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.taxamt]] */
  taxamt: Option[BigDecimal],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.freight]] */
  freight: Option[BigDecimal],
  /** Points to [[purchasing.purchaseorderheader.PurchaseorderheaderRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PohViewRow {
  implicit val decoder: Decoder[PohViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        purchaseorderid <- c.downField("purchaseorderid").as[Option[PurchaseorderheaderId]]
        revisionnumber <- c.downField("revisionnumber").as[Option[Int]]
        status <- c.downField("status").as[Option[Int]]
        employeeid <- c.downField("employeeid").as[Option[BusinessentityId]]
        vendorid <- c.downField("vendorid").as[Option[BusinessentityId]]
        shipmethodid <- c.downField("shipmethodid").as[Option[ShipmethodId]]
        orderdate <- c.downField("orderdate").as[Option[LocalDateTime]]
        shipdate <- c.downField("shipdate").as[Option[LocalDateTime]]
        subtotal <- c.downField("subtotal").as[Option[BigDecimal]]
        taxamt <- c.downField("taxamt").as[Option[BigDecimal]]
        freight <- c.downField("freight").as[Option[BigDecimal]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield PohViewRow(id, purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate)
  implicit val encoder: Encoder[PohViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "purchaseorderid" := row.purchaseorderid,
        "revisionnumber" := row.revisionnumber,
        "status" := row.status,
        "employeeid" := row.employeeid,
        "vendorid" := row.vendorid,
        "shipmethodid" := row.shipmethodid,
        "orderdate" := row.orderdate,
        "shipdate" := row.shipdate,
        "subtotal" := row.subtotal,
        "taxamt" := row.taxamt,
        "freight" := row.freight,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[PohViewRow] =
    new Read[PohViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[PurchaseorderheaderId], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[ShipmethodId], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PohViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        purchaseorderid = Get[PurchaseorderheaderId].unsafeGetNullable(rs, i + 1),
        revisionnumber = Get[Int].unsafeGetNullable(rs, i + 2),
        status = Get[Int].unsafeGetNullable(rs, i + 3),
        employeeid = Get[BusinessentityId].unsafeGetNullable(rs, i + 4),
        vendorid = Get[BusinessentityId].unsafeGetNullable(rs, i + 5),
        shipmethodid = Get[ShipmethodId].unsafeGetNullable(rs, i + 6),
        orderdate = Get[LocalDateTime].unsafeGetNullable(rs, i + 7),
        shipdate = Get[LocalDateTime].unsafeGetNullable(rs, i + 8),
        subtotal = Get[BigDecimal].unsafeGetNullable(rs, i + 9),
        taxamt = Get[BigDecimal].unsafeGetNullable(rs, i + 10),
        freight = Get[BigDecimal].unsafeGetNullable(rs, i + 11),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 12)
      )
    )
  

}
