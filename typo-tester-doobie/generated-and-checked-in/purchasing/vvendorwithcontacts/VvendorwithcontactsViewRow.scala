/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vvendorwithcontacts

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import adventureworks.public.Phone
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class VvendorwithcontactsViewRow(
  /** Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.contacttype.ContacttypeRow.name]] */
  name: Option[Name],
  contacttype: Option[Name],
  /** Points to [[person.person.PersonRow.title]] */
  title: Option[/* max 8 chars */ String],
  /** Points to [[person.person.PersonRow.firstname]] */
  firstname: Option[Name],
  /** Points to [[person.person.PersonRow.middlename]] */
  middlename: Option[Name],
  /** Points to [[person.person.PersonRow.lastname]] */
  lastname: Option[Name],
  /** Points to [[person.person.PersonRow.suffix]] */
  suffix: Option[/* max 10 chars */ String],
  /** Points to [[person.personphone.PersonphoneRow.phonenumber]] */
  phonenumber: Option[Phone],
  phonenumbertype: Option[Name],
  /** Points to [[person.emailaddress.EmailaddressRow.emailaddress]] */
  emailaddress: Option[/* max 50 chars */ String],
  /** Points to [[person.person.PersonRow.emailpromotion]] */
  emailpromotion: Option[Int]
)

object VvendorwithcontactsViewRow {
  implicit val decoder: Decoder[VvendorwithcontactsViewRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        name <- c.downField("name").as[Option[Name]]
        contacttype <- c.downField("contacttype").as[Option[Name]]
        title <- c.downField("title").as[Option[/* max 8 chars */ String]]
        firstname <- c.downField("firstname").as[Option[Name]]
        middlename <- c.downField("middlename").as[Option[Name]]
        lastname <- c.downField("lastname").as[Option[Name]]
        suffix <- c.downField("suffix").as[Option[/* max 10 chars */ String]]
        phonenumber <- c.downField("phonenumber").as[Option[Phone]]
        phonenumbertype <- c.downField("phonenumbertype").as[Option[Name]]
        emailaddress <- c.downField("emailaddress").as[Option[/* max 50 chars */ String]]
        emailpromotion <- c.downField("emailpromotion").as[Option[Int]]
      } yield VvendorwithcontactsViewRow(businessentityid, name, contacttype, title, firstname, middlename, lastname, suffix, phonenumber, phonenumbertype, emailaddress, emailpromotion)
  implicit val encoder: Encoder[VvendorwithcontactsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "name" := row.name,
        "contacttype" := row.contacttype,
        "title" := row.title,
        "firstname" := row.firstname,
        "middlename" := row.middlename,
        "lastname" := row.lastname,
        "suffix" := row.suffix,
        "phonenumber" := row.phonenumber,
        "phonenumbertype" := row.phonenumbertype,
        "emailaddress" := row.emailaddress,
        "emailpromotion" := row.emailpromotion
      )}
  implicit val read: Read[VvendorwithcontactsViewRow] =
    new Read[VvendorwithcontactsViewRow](
      gets = List(
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[/* max 8 chars */ String], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[/* max 10 chars */ String], Nullability.Nullable),
        (Get[Phone], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[/* max 50 chars */ String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => VvendorwithcontactsViewRow(
        businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 0),
        name = Get[Name].unsafeGetNullable(rs, i + 1),
        contacttype = Get[Name].unsafeGetNullable(rs, i + 2),
        title = Get[/* max 8 chars */ String].unsafeGetNullable(rs, i + 3),
        firstname = Get[Name].unsafeGetNullable(rs, i + 4),
        middlename = Get[Name].unsafeGetNullable(rs, i + 5),
        lastname = Get[Name].unsafeGetNullable(rs, i + 6),
        suffix = Get[/* max 10 chars */ String].unsafeGetNullable(rs, i + 7),
        phonenumber = Get[Phone].unsafeGetNullable(rs, i + 8),
        phonenumbertype = Get[Name].unsafeGetNullable(rs, i + 9),
        emailaddress = Get[/* max 50 chars */ String].unsafeGetNullable(rs, i + 10),
        emailpromotion = Get[Int].unsafeGetNullable(rs, i + 11)
      )
    )
  

}
