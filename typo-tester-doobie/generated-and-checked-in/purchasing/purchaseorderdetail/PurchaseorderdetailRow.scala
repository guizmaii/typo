/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderdetail

import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime

case class PurchaseorderdetailRow(
  /** Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
      Points to [[purchaseorderheader.PurchaseorderheaderRow.purchaseorderid]] */
  purchaseorderid: PurchaseorderheaderId,
  /** Primary key. One line number per purchased product. */
  purchaseorderdetailid: Int,
  /** Date the product is expected to be received. */
  duedate: LocalDateTime,
  /** Quantity ordered. */
  orderqty: Int,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Vendor's selling price of a single product. */
  unitprice: BigDecimal,
  /** Quantity actually received from the vendor. */
  receivedqty: BigDecimal,
  /** Quantity rejected during inspection. */
  rejectedqty: BigDecimal,
  modifieddate: LocalDateTime
){
   val compositeId: PurchaseorderdetailId = PurchaseorderdetailId(purchaseorderid, purchaseorderdetailid)
 }

object PurchaseorderdetailRow {
  implicit val decoder: Decoder[PurchaseorderdetailRow] =
    (c: HCursor) =>
      for {
        purchaseorderid <- c.downField("purchaseorderid").as[PurchaseorderheaderId]
        purchaseorderdetailid <- c.downField("purchaseorderdetailid").as[Int]
        duedate <- c.downField("duedate").as[LocalDateTime]
        orderqty <- c.downField("orderqty").as[Int]
        productid <- c.downField("productid").as[ProductId]
        unitprice <- c.downField("unitprice").as[BigDecimal]
        receivedqty <- c.downField("receivedqty").as[BigDecimal]
        rejectedqty <- c.downField("rejectedqty").as[BigDecimal]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield PurchaseorderdetailRow(purchaseorderid, purchaseorderdetailid, duedate, orderqty, productid, unitprice, receivedqty, rejectedqty, modifieddate)
  implicit val encoder: Encoder[PurchaseorderdetailRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "purchaseorderid" := row.purchaseorderid,
        "purchaseorderdetailid" := row.purchaseorderdetailid,
        "duedate" := row.duedate,
        "orderqty" := row.orderqty,
        "productid" := row.productid,
        "unitprice" := row.unitprice,
        "receivedqty" := row.receivedqty,
        "rejectedqty" := row.rejectedqty,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[PurchaseorderdetailRow] =
    new Read[PurchaseorderdetailRow](
      gets = List(
        (Get[PurchaseorderheaderId], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[ProductId], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PurchaseorderdetailRow(
        purchaseorderid = Get[PurchaseorderheaderId].unsafeGetNonNullable(rs, i + 0),
        purchaseorderdetailid = Get[Int].unsafeGetNonNullable(rs, i + 1),
        duedate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 2),
        orderqty = Get[Int].unsafeGetNonNullable(rs, i + 3),
        productid = Get[ProductId].unsafeGetNonNullable(rs, i + 4),
        unitprice = Get[BigDecimal].unsafeGetNonNullable(rs, i + 5),
        receivedqty = Get[BigDecimal].unsafeGetNonNullable(rs, i + 6),
        rejectedqty = Get[BigDecimal].unsafeGetNonNullable(rs, i + 7),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 8)
      )
    )
  

}
