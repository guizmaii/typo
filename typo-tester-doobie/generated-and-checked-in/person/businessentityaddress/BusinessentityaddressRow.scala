/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package businessentityaddress

import adventureworks.person.address.AddressId
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.person.businessentity.BusinessentityId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

case class BusinessentityaddressRow(
  /** Primary key. Foreign key to BusinessEntity.BusinessEntityID.
      Points to [[businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Primary key. Foreign key to Address.AddressID.
      Points to [[address.AddressRow.addressid]] */
  addressid: AddressId,
  /** Primary key. Foreign key to AddressType.AddressTypeID.
      Points to [[addresstype.AddresstypeRow.addresstypeid]] */
  addresstypeid: AddresstypeId,
  rowguid: UUID,
  modifieddate: LocalDateTime
){
   val compositeId: BusinessentityaddressId = BusinessentityaddressId(businessentityid, addressid, addresstypeid)
 }

object BusinessentityaddressRow {
  implicit val decoder: Decoder[BusinessentityaddressRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[BusinessentityId]
        addressid <- c.downField("addressid").as[AddressId]
        addresstypeid <- c.downField("addresstypeid").as[AddresstypeId]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield BusinessentityaddressRow(businessentityid, addressid, addresstypeid, rowguid, modifieddate)
  implicit val encoder: Encoder[BusinessentityaddressRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "addressid" := row.addressid,
        "addresstypeid" := row.addresstypeid,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[BusinessentityaddressRow] =
    new Read[BusinessentityaddressRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[AddressId], Nullability.NoNulls),
        (Get[AddresstypeId], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => BusinessentityaddressRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        addressid = Get[AddressId].unsafeGetNonNullable(rs, i + 1),
        addresstypeid = Get[AddresstypeId].unsafeGetNonNullable(rs, i + 2),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 3),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 4)
      )
    )
  

}
