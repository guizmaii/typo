/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesreason

import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime

case class SalesreasonRow(
  /** Primary key for SalesReason records. */
  salesreasonid: SalesreasonId,
  /** Sales reason description. */
  name: Name,
  /** Category the sales reason belongs to. */
  reasontype: Name,
  modifieddate: LocalDateTime
)

object SalesreasonRow {
  implicit val decoder: Decoder[SalesreasonRow] =
    (c: HCursor) =>
      for {
        salesreasonid <- c.downField("salesreasonid").as[SalesreasonId]
        name <- c.downField("name").as[Name]
        reasontype <- c.downField("reasontype").as[Name]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield SalesreasonRow(salesreasonid, name, reasontype, modifieddate)
  implicit val encoder: Encoder[SalesreasonRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "salesreasonid" := row.salesreasonid,
        "name" := row.name,
        "reasontype" := row.reasontype,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[SalesreasonRow] =
    new Read[SalesreasonRow](
      gets = List(
        (Get[SalesreasonId], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SalesreasonRow(
        salesreasonid = Get[SalesreasonId].unsafeGetNonNullable(rs, i + 0),
        name = Get[Name].unsafeGetNonNullable(rs, i + 1),
        reasontype = Get[Name].unsafeGetNonNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
