/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vpersondemographics

import adventureworks.TypoMoney
import adventureworks.person.businessentity.BusinessentityId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDate

case class VpersondemographicsViewRow(
  /** Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  totalpurchaseytd: Option[TypoMoney],
  datefirstpurchase: Option[LocalDate],
  birthdate: Option[LocalDate],
  maritalstatus: Option[/* max 1 chars */ String],
  yearlyincome: Option[/* max 30 chars */ String],
  gender: Option[/* max 1 chars */ String],
  totalchildren: Option[Int],
  numberchildrenathome: Option[Int],
  education: Option[/* max 30 chars */ String],
  occupation: Option[/* max 30 chars */ String],
  homeownerflag: Option[Boolean],
  numbercarsowned: Option[Int]
)

object VpersondemographicsViewRow {
  implicit val decoder: Decoder[VpersondemographicsViewRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        totalpurchaseytd <- c.downField("totalpurchaseytd").as[Option[TypoMoney]]
        datefirstpurchase <- c.downField("datefirstpurchase").as[Option[LocalDate]]
        birthdate <- c.downField("birthdate").as[Option[LocalDate]]
        maritalstatus <- c.downField("maritalstatus").as[Option[/* max 1 chars */ String]]
        yearlyincome <- c.downField("yearlyincome").as[Option[/* max 30 chars */ String]]
        gender <- c.downField("gender").as[Option[/* max 1 chars */ String]]
        totalchildren <- c.downField("totalchildren").as[Option[Int]]
        numberchildrenathome <- c.downField("numberchildrenathome").as[Option[Int]]
        education <- c.downField("education").as[Option[/* max 30 chars */ String]]
        occupation <- c.downField("occupation").as[Option[/* max 30 chars */ String]]
        homeownerflag <- c.downField("homeownerflag").as[Option[Boolean]]
        numbercarsowned <- c.downField("numbercarsowned").as[Option[Int]]
      } yield VpersondemographicsViewRow(businessentityid, totalpurchaseytd, datefirstpurchase, birthdate, maritalstatus, yearlyincome, gender, totalchildren, numberchildrenathome, education, occupation, homeownerflag, numbercarsowned)
  implicit val encoder: Encoder[VpersondemographicsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "totalpurchaseytd" := row.totalpurchaseytd,
        "datefirstpurchase" := row.datefirstpurchase,
        "birthdate" := row.birthdate,
        "maritalstatus" := row.maritalstatus,
        "yearlyincome" := row.yearlyincome,
        "gender" := row.gender,
        "totalchildren" := row.totalchildren,
        "numberchildrenathome" := row.numberchildrenathome,
        "education" := row.education,
        "occupation" := row.occupation,
        "homeownerflag" := row.homeownerflag,
        "numbercarsowned" := row.numbercarsowned
      )}
  implicit val read: Read[VpersondemographicsViewRow] =
    new Read[VpersondemographicsViewRow](
      gets = List(
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[TypoMoney], Nullability.Nullable),
        (Get[LocalDate], Nullability.Nullable),
        (Get[LocalDate], Nullability.Nullable),
        (Get[/* max 1 chars */ String], Nullability.Nullable),
        (Get[/* max 30 chars */ String], Nullability.Nullable),
        (Get[/* max 1 chars */ String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[/* max 30 chars */ String], Nullability.Nullable),
        (Get[/* max 30 chars */ String], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[Int], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => VpersondemographicsViewRow(
        businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 0),
        totalpurchaseytd = Get[TypoMoney].unsafeGetNullable(rs, i + 1),
        datefirstpurchase = Get[LocalDate].unsafeGetNullable(rs, i + 2),
        birthdate = Get[LocalDate].unsafeGetNullable(rs, i + 3),
        maritalstatus = Get[/* max 1 chars */ String].unsafeGetNullable(rs, i + 4),
        yearlyincome = Get[/* max 30 chars */ String].unsafeGetNullable(rs, i + 5),
        gender = Get[/* max 1 chars */ String].unsafeGetNullable(rs, i + 6),
        totalchildren = Get[Int].unsafeGetNullable(rs, i + 7),
        numberchildrenathome = Get[Int].unsafeGetNullable(rs, i + 8),
        education = Get[/* max 30 chars */ String].unsafeGetNullable(rs, i + 9),
        occupation = Get[/* max 30 chars */ String].unsafeGetNullable(rs, i + 10),
        homeownerflag = Get[Boolean].unsafeGetNullable(rs, i + 11),
        numbercarsowned = Get[Int].unsafeGetNullable(rs, i + 12)
      )
    )
  

}
