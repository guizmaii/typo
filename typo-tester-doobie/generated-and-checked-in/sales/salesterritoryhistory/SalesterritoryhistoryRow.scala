/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesterritoryhistory

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

case class SalesterritoryhistoryRow(
  /** Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: SalesterritoryId,
  /** Primary key. Date the sales representive started work in the territory. */
  startdate: LocalDateTime,
  /** Date the sales representative left work in the territory. */
  enddate: Option[LocalDateTime],
  rowguid: UUID,
  modifieddate: LocalDateTime
){
   val compositeId: SalesterritoryhistoryId = SalesterritoryhistoryId(businessentityid, startdate, territoryid)
 }

object SalesterritoryhistoryRow {
  implicit val decoder: Decoder[SalesterritoryhistoryRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[BusinessentityId]
        territoryid <- c.downField("territoryid").as[SalesterritoryId]
        startdate <- c.downField("startdate").as[LocalDateTime]
        enddate <- c.downField("enddate").as[Option[LocalDateTime]]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield SalesterritoryhistoryRow(businessentityid, territoryid, startdate, enddate, rowguid, modifieddate)
  implicit val encoder: Encoder[SalesterritoryhistoryRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "territoryid" := row.territoryid,
        "startdate" := row.startdate,
        "enddate" := row.enddate,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[SalesterritoryhistoryRow] =
    new Read[SalesterritoryhistoryRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[SalesterritoryId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SalesterritoryhistoryRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        territoryid = Get[SalesterritoryId].unsafeGetNonNullable(rs, i + 1),
        startdate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 2),
        enddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 3),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 4),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 5)
      )
    )
  

}
