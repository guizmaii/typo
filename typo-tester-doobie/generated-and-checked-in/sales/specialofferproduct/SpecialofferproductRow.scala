/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialofferproduct

import adventureworks.production.product.ProductId
import adventureworks.sales.specialoffer.SpecialofferId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

case class SpecialofferproductRow(
  /** Primary key for SpecialOfferProduct records.
      Points to [[specialoffer.SpecialofferRow.specialofferid]] */
  specialofferid: SpecialofferId,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  rowguid: UUID,
  modifieddate: LocalDateTime
){
   val compositeId: SpecialofferproductId = SpecialofferproductId(specialofferid, productid)
 }

object SpecialofferproductRow {
  implicit val decoder: Decoder[SpecialofferproductRow] =
    (c: HCursor) =>
      for {
        specialofferid <- c.downField("specialofferid").as[SpecialofferId]
        productid <- c.downField("productid").as[ProductId]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield SpecialofferproductRow(specialofferid, productid, rowguid, modifieddate)
  implicit val encoder: Encoder[SpecialofferproductRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "specialofferid" := row.specialofferid,
        "productid" := row.productid,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[SpecialofferproductRow] =
    new Read[SpecialofferproductRow](
      gets = List(
        (Get[SpecialofferId], Nullability.NoNulls),
        (Get[ProductId], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SpecialofferproductRow(
        specialofferid = Get[SpecialofferId].unsafeGetNonNullable(rs, i + 0),
        productid = Get[ProductId].unsafeGetNonNullable(rs, i + 1),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
