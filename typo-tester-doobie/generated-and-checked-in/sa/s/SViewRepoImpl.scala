/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package s

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream

object SViewRepoImpl extends SViewRepo {
  override def selectAll: Stream[ConnectionIO, SViewRow] = {
    sql"""select "id", businessentityid, "name", salespersonid, demographics, rowguid, modifieddate from sa.s""".query[SViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[SViewFieldOrIdValue[_]]): Stream[ConnectionIO, SViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case SViewFieldValue.id(value) => fr""""id" = $value"""
        case SViewFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case SViewFieldValue.name(value) => fr""""name" = $value"""
        case SViewFieldValue.salespersonid(value) => fr"salespersonid = $value"
        case SViewFieldValue.demographics(value) => fr"demographics = $value"
        case SViewFieldValue.rowguid(value) => fr"rowguid = $value"
        case SViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sa.s $where".query[SViewRow].stream
  
  }
}
