/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package s

import adventureworks.humanresources.shift.ShiftId
import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.LocalDateTime
import java.time.LocalTime

case class SViewRow(
  id: Option[Int],
  /** Points to [[humanresources.shift.ShiftRow.shiftid]] */
  shiftid: Option[ShiftId],
  /** Points to [[humanresources.shift.ShiftRow.name]] */
  name: Option[Name],
  /** Points to [[humanresources.shift.ShiftRow.starttime]] */
  starttime: Option[LocalTime],
  /** Points to [[humanresources.shift.ShiftRow.endtime]] */
  endtime: Option[LocalTime],
  /** Points to [[humanresources.shift.ShiftRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object SViewRow {
  implicit val decoder: Decoder[SViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        shiftid <- c.downField("shiftid").as[Option[ShiftId]]
        name <- c.downField("name").as[Option[Name]]
        starttime <- c.downField("starttime").as[Option[LocalTime]]
        endtime <- c.downField("endtime").as[Option[LocalTime]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield SViewRow(id, shiftid, name, starttime, endtime, modifieddate)
  implicit val encoder: Encoder[SViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "shiftid" := row.shiftid,
        "name" := row.name,
        "starttime" := row.starttime,
        "endtime" := row.endtime,
        "modifieddate" := row.modifieddate
      )}
  implicit val read: Read[SViewRow] =
    new Read[SViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[ShiftId], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[LocalTime], Nullability.Nullable),
        (Get[LocalTime], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        shiftid = Get[ShiftId].unsafeGetNullable(rs, i + 1),
        name = Get[Name].unsafeGetNullable(rs, i + 2),
        starttime = Get[LocalTime].unsafeGetNullable(rs, i + 3),
        endtime = Get[LocalTime].unsafeGetNullable(rs, i + 4),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 5)
      )
    )
  

}
